{"version":3,"sources":["resource/menu.svg","util/interpret.ts","component/Sim/Sim.tsx","component/Controls/Controls.tsx","component/Console/Console.tsx","model/DataRange.ts","model/OrderedMap.ts","model/node.ts","model/Network.ts","component/Api/Api.tsx","component/NavAndMenu/NavAndMenu.tsx","App.tsx","index.tsx"],"names":["module","exports","interpretOneCommand","instrId","input","executeCommands","network","inputObj","undefined","nodeId","op","itemId","additionalDelay","jsonStartIndex","jsonEndIndex","i","length","failure","msg","slice","JSON","parse","e","beforeJson","substring","afterJson","inputArr","split","cleanArr","forEach","token","push","isNaN","parseInt","n","getNode","additionalDelayMs","read","delete","insert","update","buildNodeInfoString","dataRangeString","dataRange","concat","start","end","dataSliceString","it","dataSlice","entries","val","next","value","Object","keys","key","clockString","stringify","clock","id","connections","Sim","props","useState","instructionBlockToExecute","setInstructionBlockToExecute","useEffect","rerenderSim","sizeOuterCircle","generateNodes","net","numNodes","insertAnimations","apiResponse","console","log","setFinishedExecuting","sentInstructions","instr","executeApiResponse","document","getElementById","innerHTML","mostRecentNodeInfo","set","width","offsetWidth","height","offsetHeight","circleDiameter","documentElement","style","setProperty","num","nodeDiameter","newDiv","createElement","setAttribute","toString","newContent","createTextNode","appendChild","deg","radius","remove","append","transform","lineHeight","addEventListener","ev","getNodeInfo","edges","nodeMap","node","connection","findIndex","elem","newLine","div1","div2","off1","getOffset","off2","x1","left","y1","top","x2","y2","Math","sqrt","cx","cy","thickness","angle","atan2","PI","padding","margin","backgroundColor","position","connect","insertBefore","getBoundingClientRect","getComputedStyle","j","window","pageXOffset","pageYOffset","styleSheets","insertRule","pauseFirstAnimations","ind","done","setTimeout","thisMsg","dir","includes","setApiResponse","allInstr","thisBlock","thisInstr","inst","thisBlockDone","setSentInstructions","nextMsg","delay","networkLatency","msgId","div","animation","getPayloadInfo","el","rect","className","Controls","finishedExecuting","btn","resetRunBtn","classList","setRunButtonClasses","toggle","setInstrList","setApiResponseCopy","setMostRecentStepCompleted","removeEventListener","changeRunStatus","runOrControls","active","contains","running","play","success","blocks","instructionBlocks","inputCommands","toLowerCase","nextInstructionId","ibIndex","normal","inOrder","str","trim","text","interpret","instructionBlock","checkResult","errText","setInstructionsToSend","add","click","msgs","getElementsByClassName","item","getAttribute","animationPlayState","onClick","Console","instrList","apiResponseCopy","Map","mapInstrIdsToLabels","setMapInstrIdsToLabels","displayResponse","setDisplayResponse","setLiWidth","currMsg","tokens","get","ControlsProps","toggleButtonsAndInfo","updateInstrList","instrArr","getInstrLabel","includeColon","mapRes","newMap","label","labelList","opIndex","currLabel","li","getMsgColor","totalWidth","labels","maxWidth","currWidth","getInstrClasses","c","onChange","handleTextAreaInput","map","newState","showResponse","res","color","dangerouslySetInnerHTML","__html","getResponseText","DataRange","full","highestItemId","OrderedMap","keysInOrder","dRange","this","has","sort","a","b","delIndex","splice","eventStream","latency","dataRangeOrderedMap","mostRecentWrite","processPayload","payload","hasOwnProperty","Promise","resolve","pathIndex","path","nodeInfoString","ping","syncAndIncrementClock","sourceClock","requestClock","dbItem","doIncomingWrite","sourceHasUpdatedVectorClock","deleted","changes","broadcast","retItem","changedDataRange","newRange","range","realConnMap","connMap","shortestPath","tempClock","nodeToPing","respond","then","originalNode","newNode","findAllNodes","targetNode","currDataRangeStart","prePath","result","updateOrDelete","dataRangeToNode","highest","highestRange","currDataRange","find","numDataRange","count","leastDataNodes","targetId","returnConnMap","distance","visited","jobQ","currId","preCurrConn","currConn","preCurrNode","currNode","nextConn","preRet","ret","round","random","event","Network","inputDataRangeSize","inputEventStream","dataRangeSize","Subject","connectionsToPush","size","conn","connNode","indexOf","initialSlice","initialRange","fruit","getRandomFruit","rand","Api","emittedEvents","setEmittedEvents","apiFinishedExecuting","setApiFinishedExecuting","setNetwork","generateNetwork","simFinishedExecuting","subscription","subscribe","executeAllCommands","instrLists","index","subs","unsubscribe","currList","totalInList","numCompletedInList","originalInstr","response","Menu","menuClasses","setMenuClasses","menuContents","setMenuContents","initialContents","getMsgShowcase","o","classes","bgc","backToMenuBtn","removeProperty","tutorialContents","innerWidth","textAlign","float","marginTop","marginLeft","marginRight","display","paddingLeft","paddingRight","marginBottom","scrollIntoView","behavior","exampleContents","aboutContents","paddingTop","target","href","msgWidth","w1ToEnd","w2ToEnd","src","menu","alt","viewBox","d","App","nodeInfoClasses","setNodeInfoClasses","runButtonClasses","runState","setRunState","instructionsToSend","mostRecentStepCompleted","setRerenderSim","closeNodeInfo","scrollToEnd","detectClickOffTextArea","runButtonActive","scrollToTop","displayInfo","info","apiResIndex","pathString","opString","itemIdString","itemString","msgString","buildPayloadInfoString","currValue","fill","ReactDOM","render"],"mappings":"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","file":"static/js/main.29075f9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu.c159867d.svg\";","import Network from \"../model/Network\";\r\nimport node from \"../model/node\";\r\nimport payload from \"../model/payload\";\r\n\r\nexport interface Instruction {\r\n    instrId: number,\r\n    text: string,\r\n    res?: any,\r\n    done: boolean,\r\n}\r\n\r\nexport function createInstructionBlocks(input: string): Instruction[][] {\r\n\r\n    input = input.toLowerCase();\r\n\r\n    const inputCommands = input.split(\"\\n\");\r\n    let instructionBlocks: Instruction[][];\r\n    let nextInstructionId = 0;\r\n    let ibIndex = 0;\r\n\r\n    let normal = true;   // execute all instructions, don't wait\r\n    let inOrder = false; // wait for response before executing next instruction to guarantee order\r\n\r\n    for (let i = 0; i < inputCommands.length; ++i) {\r\n\r\n        const str = inputCommands[i].trim();\r\n        if (!str.length) {\r\n            continue;\r\n\r\n        } else if (str === 'normal') {\r\n            normal = true;\r\n            inOrder = false;\r\n            if (instructionBlocks) {\r\n                ibIndex = instructionBlocks.length; // set ibIndex to the current instruction block that we just initialized\r\n            }\r\n            continue;\r\n\r\n        } else if (str === 'in-order') {\r\n            normal = false;\r\n            inOrder = true;\r\n            continue;\r\n        }\r\n\r\n        if (!instructionBlocks) {\r\n            instructionBlocks = [\r\n                [{instrId: nextInstructionId++, text: str, done: false}]\r\n            ];\r\n            continue;\r\n        }  \r\n\r\n        if (normal && !instructionBlocks[ibIndex]) {\r\n            instructionBlocks.push([{instrId: nextInstructionId++, text: str, done: false}]);\r\n            ibIndex = instructionBlocks.length - 1; // set ibIndex to the current instruction block that we just initialized\r\n\r\n        } else if (normal && instructionBlocks[ibIndex]) {\r\n            instructionBlocks[ibIndex].push({instrId: nextInstructionId++, text: str, done: false});\r\n\r\n        } else if (inOrder) {\r\n            instructionBlocks.push([{instrId: nextInstructionId++, text: str, done: false}]);\r\n            ibIndex = instructionBlocks.length; // set ibIndex to the block AFTER this one ie it doesn't exist yet\r\n        }\r\n    }\r\n\r\n    return instructionBlocks;\r\n}\r\n\r\nexport function interpretAllCommands(something: any): any {\r\n    // what do I put here?\r\n    return undefined;\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param input string command input\r\n * @param executeCommands if false, this function just checks for bad syntax\r\n * \r\n * @returns Object with .failure either true or false, or the timeline\r\n */\r\nexport function interpretOneCommand(instrId: number, input: string, executeCommands: boolean, network?: Network): any {\r\n\r\n    // if command has correct syntax all of these will be populated as necessary\r\n    let inputObj  = undefined;\r\n    let nodeId: number = undefined;\r\n    let op: 'read' | 'update' | 'insert' | 'delete' = undefined;\r\n    let itemId: number = undefined;\r\n    let additionalDelay: number = undefined;\r\n\r\n    // detect json object and take it out before splitting\r\n    let jsonStartIndex = 0;\r\n    let jsonEndIndex = 0;\r\n\r\n    for(let i = 0; i < input.length; i++) {\r\n        if (input[i] === '{') {\r\n            jsonStartIndex = i;\r\n        } else if (input[i] === '}') {\r\n            jsonEndIndex = ++i;\r\n        }\r\n    }\r\n\r\n    if (jsonStartIndex && !jsonEndIndex) {\r\n        return {failure: true, msg: 'entered JSON string \\'' + input.slice(jsonStartIndex, input.length - 1) + '\\' was missing a closing bracket'};\r\n    }\r\n\r\n    if (jsonStartIndex) {\r\n        try {\r\n            inputObj = JSON.parse(input.slice(jsonStartIndex, jsonEndIndex));\r\n        } catch (e) {\r\n            return {failure: true, msg: 'entered JSON string \\'' + input.slice(jsonStartIndex, jsonEndIndex) + '\\' was invalid. Did you remember to put quotes?'};\r\n        }\r\n\r\n        const beforeJson = input.substring(0, jsonStartIndex);\r\n        let afterJson = undefined;\r\n        if (jsonEndIndex + 1 < input.length) {\r\n            afterJson = input.substring(jsonEndIndex + 1, input.length);\r\n        }\r\n\r\n        if (afterJson !== undefined) {\r\n            input = beforeJson + ' ' + afterJson;\r\n        } else {\r\n            input = beforeJson;\r\n        }\r\n    }\r\n\r\n    let inputArr = input.split(\" \");\r\n    let cleanArr: string[] = [];\r\n\r\n    inputArr.forEach( (token) => {\r\n        if (token.length !== 0) {\r\n            cleanArr.push(token);\r\n        }\r\n    });\r\n\r\n    inputArr = cleanArr;\r\n    let i = 0;\r\n\r\n    if (inputArr[i] === 'node' || inputArr[i] === 'n') {\r\n        i++;\r\n    }\r\n    \r\n    if (!isNaN(inputArr[i] as any)) {\r\n        nodeId = parseInt(inputArr[i]);\r\n        i++;\r\n    } else {\r\n        return {failure: true, msg: 'Node id \\'' + inputArr[i] + '\\' is invalid'};\r\n    }\r\n\r\n    if (inputArr[i] === 'read' || inputArr[i] === 'r') {\r\n        op = 'read';\r\n        i++;\r\n\r\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\r\n            i++;\r\n        }\r\n        if (!isNaN(inputArr[i] as any)) {\r\n            itemId = parseInt(inputArr[i]);\r\n            i++;\r\n\r\n        } else {\r\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\r\n        }\r\n\r\n    } else if (inputArr[i] === 'update' || inputArr[i] === 'u' || inputArr[i] === 'write' || inputArr[i] === 'w') {\r\n        op = 'update';\r\n        i++;\r\n\r\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\r\n            i++;\r\n        }\r\n        if (!isNaN(inputArr[i] as any)) {\r\n            itemId = parseInt(inputArr[i]);\r\n            i++;\r\n\r\n        } else {\r\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\r\n        }\r\n\r\n    } else if (inputArr[i] === 'insert' || inputArr[i] === 'i') {\r\n        op = 'insert';\r\n        i++;\r\n\r\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\r\n            i++;\r\n        }\r\n\r\n    } else if (inputArr[i] === 'delete' || inputArr[i] === 'd') {\r\n        op = 'delete';\r\n        i++;\r\n\r\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\r\n            i++;\r\n        }\r\n        if (!isNaN(inputArr[i] as any)) {\r\n            itemId = parseInt(inputArr[i]);\r\n            i++;\r\n        } else {\r\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\r\n        }\r\n\r\n    } else {\r\n        return {failure: true, msg: 'operation \\'' + inputArr[i] + '\\' not recognized'};\r\n    }\r\n\r\n    if (i < inputArr.length && (inputArr[i] === 'delay' || inputArr[i] === 'd')) {\r\n        i++;\r\n        if (!isNaN(inputArr[i] as any)) {\r\n            additionalDelay = parseInt(inputArr[i]);\r\n            i++;\r\n        } else {\r\n            return {failure: true, msg: 'delay must be followed by a number, ' + inputArr[i] + ' is not a number'};\r\n        }\r\n    }\r\n\r\n    if (!executeCommands) {\r\n        return {failure: false};\r\n\r\n    } else if (executeCommands && !network) {\r\n        return {failure: true, msg: 'A network to perform the operations on must be provided'};\r\n    }\r\n\r\n    // now, actually execute the commands lol\r\n    const n = network.getNode(nodeId);\r\n    const additionalDelayMs = additionalDelay * 100;\r\n\r\n    if (op === 'read') {\r\n        return n.read(itemId, additionalDelayMs, instrId);\r\n\r\n    } else if (op === 'delete') {\r\n        return n.delete(itemId, additionalDelayMs, instrId);\r\n\r\n    } else if (op === 'insert') {\r\n        return n.insert(inputObj, additionalDelayMs, instrId);\r\n \r\n    } else if (op === 'update') {\r\n        return n.update(itemId, inputObj, additionalDelayMs, instrId);\r\n    }\r\n}\r\n\r\nexport function buildNodeInfoString(n: node): string {\r\n    let dataRangeString = '[{';\r\n    for (let i = 0; i < n.dataRange.length; i++) {\r\n      dataRangeString = dataRangeString.concat(n.dataRange[i].start + ' => ' + n.dataRange[i].end);\r\n      if (i + 1 < n.dataRange.length) {\r\n        dataRangeString = dataRangeString.concat('}, {');\r\n      }\r\n    }\r\n    dataRangeString = dataRangeString.concat('}]');\r\n\r\n    let dataSliceString = \"<span style=''>[</span></br>\";\r\n    const it = n.dataSlice.entries();\r\n\r\n    let val = it.next().value;\r\n    while (!!val) {\r\n      dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>{</span>itemId: \" + val[0] + ', ');\r\n      Object.keys(val[1]).forEach( (key) => {\r\n        dataSliceString = dataSliceString.concat(key + ': ' + val[1][key] + ', ');\r\n      });\r\n      dataSliceString = dataSliceString.slice(0, -2); \r\n\r\n      if (val = it.next().value) {\r\n        dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>}</span>,</br>\");\r\n      } else {\r\n        dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>}</span></br>\");\r\n      }\r\n    }\r\n    dataSliceString = dataSliceString.concat(\"<span style=''>]</span>\");\r\n\r\n    let clockString = JSON.stringify(n.clock);\r\n    clockString = clockString.split('[')[1];\r\n    clockString = clockString.split(']')[0];\r\n    clockString = \"<span style='color: #18cdfa'>[</span>\".concat(clockString).concat(\"<span style='color: #18cdfa'>]</span>\");\r\n\r\n    let infoToPrint = \"<h3 class='nodeinfo-h3'>node \" + n.id + \" info</h3>\" + \r\n      \"<span style='color: #f1ef43'>clock: </span>\"       + clockString                   + '</br>' +\r\n      \"<span style='color: #f1ef43'>connections: </span>\" + JSON.stringify(n.connections) + '</br>' +\r\n      \"<span style='color: #f1ef43'>dataRange: </span>\"   + dataRangeString               + '</br>' +\r\n      \"<span style='color: #f1ef43'>dataSlice: </span>\"   + dataSliceString\r\n    //   + \"<span style='color: #dd9f58'>}</span>\"\r\n    \r\n    return infoToPrint;\r\n  };\r\n\r\nexport function buildPayloadInfoString(payload: payload, msgId: string): string {\r\n    console.log(payload);\r\n    const label = document.getElementById(msgId).innerHTML;\r\n\r\n    let pathString = '';\r\n    if (payload.dir === 'out') {\r\n\r\n        for (let i = 0; i < payload.path.length; i++) {\r\n\r\n            pathString = pathString.concat(payload.path[i].toString());\r\n\r\n            if (i + 1 < payload.path.length) {\r\n                pathString = pathString.concat(' => ');\r\n            }\r\n        }\r\n\r\n    } else {\r\n\r\n        for (let i = payload.path.length - 1; i >= 0; i--) {\r\n\r\n            pathString = pathString.concat(payload.path[i].toString());\r\n\r\n            if (i - 1 >= 0) {\r\n                pathString = pathString.concat(' => ');\r\n            }\r\n        }\r\n    }\r\n\r\n    let opString = '';\r\n    if (payload.op === 'r') {\r\n        opString = 'read';\r\n    } else if (payload.op === 'u') {\r\n        opString = 'update';\r\n    } else if (payload.op === 'i') {\r\n        opString = 'insert';\r\n    } else if (payload.op === 'd') {\r\n        opString = 'delete';\r\n    }\r\n\r\n    let itemIdString = '';\r\n    if (payload.itemId) {\r\n        itemIdString =     \"<span style='color: #f1ef43'>itemId: </span>\" + payload.itemId + '</br>';\r\n    }\r\n\r\n    let itemString = '';\r\n    if (payload.item) {\r\n        itemString =     \"<span style='color: #f1ef43'>item: </span>\" + JSON.stringify(payload.item, null, 1) + '</br>';\r\n    }\r\n\r\n    let msgString = '';\r\n    if (payload.msg) {\r\n        msgString =     \"<span style='color: #f1ef43'>msg: </span>\" + payload.msg + '</br>';\r\n    }\r\n\r\n    let sourceClockString = \"<span style='color: #f1ef43'>sourceClock (node \" + pathString[0] + \"): </span>\" + JSON.stringify(payload.sourceClock) + '</br>';\r\n\r\n    let infoToPrint = \"<h3 class='payloadinfo-h3'>payload \" + label + \" info</h3>\" +\r\n    \"<span style='color: #f1ef43'>path: </span>\" + pathString + '</br>' +\r\n    \"<span style='color: #f1ef43'>operation: </span>\" + opString + '</br>' +\r\n    itemIdString + itemString + msgString + sourceClockString;\r\n\r\n\r\n    return infoToPrint;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport './Sim.css';\r\nimport Network from '../../model/Network';\r\nimport { Instruction, buildNodeInfoString } from '../../util/interpret';\r\n\r\ninterface SimProps {\r\n\tnet: Network;\r\n\tgetNodeInfo: (id: number) => void;\r\n\tgetPayloadInfo: (apiResIndex: number, msgId: string) => void;\r\n\tapiResponse: any;\r\n\tsetApiResponse: React.Dispatch<any>;\r\n\tsentInstructions: Instruction[][];\r\n\tsetSentInstructions: React.Dispatch<React.SetStateAction<Instruction[][]>>;\r\n\tsetFinishedExecuting: React.Dispatch<React.SetStateAction<boolean>>;\r\n\r\n\t// so sim can update shown info for \"silent\" updates like datarange changes during the sim\r\n\tnetwork: Network;\r\n\tmostRecentNodeInfo: Map<number, string>;\r\n\r\n\trerenderSim: boolean;\r\n }\r\n\r\nconst Sim: React.FunctionComponent<SimProps> = (props) => {\r\n\r\n\tconst [ instructionBlockToExecute, setInstructionBlockToExecute ] = useState(undefined as number);\r\n\r\n\tuseEffect( () => {\r\n\r\n\t\tif (props.rerenderSim) {\r\n\t\t\tsizeOuterCircle();\r\n\t\t\tgenerateNodes(props.net.numNodes);\r\n\t\t\tinsertAnimations(props.net.numNodes);\r\n\t\t}\r\n\r\n\t}, [props.rerenderSim]);\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t// TODO: make this work for resizing too\r\n\t\t// window.addEventListener('resize', sizeOuterCircle);\r\n\t\tsizeOuterCircle();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.net) {\r\n\t\t\tgenerateNodes(props.net.numNodes);\r\n\t\t\tinsertAnimations(props.net.numNodes);\r\n\t\t}\r\n\t}, [props.net]);\r\n\r\n\tuseEffect( () => {\r\n\t\tif (!props.apiResponse || instructionBlockToExecute !== undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconsole.log('received api response! ', props.apiResponse);\r\n\t\tprops.setFinishedExecuting(false);\r\n\t\tsetInstructionBlockToExecute(0);\r\n\t\t\r\n\t}, [props.apiResponse]);\r\n\r\n\tuseEffect( () => {\r\n\t\tif (instructionBlockToExecute === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (instructionBlockToExecute === props.sentInstructions.length) {\r\n\t\t\tconsole.log('executed all blocks!');\r\n\t\t\tprops.setFinishedExecuting(true);\r\n\t\t\tsetInstructionBlockToExecute(undefined); // reset ibToExecute\r\n\r\n\t\t\t// fill map with current node data to capture info from silent changes such as\r\n\t\t\t// datarange update notifications on insert (seen in clocks of all nodes)\r\n\t\t\tfor (let i = 0; i < props.network.numNodes; i++) {\r\n\t\t\t\tprops.mostRecentNodeInfo.set(i, buildNodeInfoString(props.network.getNode(i)));\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst instrToExecute = props.sentInstructions[instructionBlockToExecute];\r\n\r\n\t\tinstrToExecute.forEach( instr => {\r\n\t\t\tconst instrId = instr.instrId;\r\n\t\t\t\r\n\t\t\tfor (let i = 0; i < props.apiResponse.length; i++ ) {\r\n\t\t\t\tif (props.apiResponse[i].instrId === instrId) {\r\n\t\t\t\t\texecuteApiResponse(props.apiResponse, i, document.getElementById('run').innerHTML === 'wait');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// this is basically manipulating app state by looking directly at the dom...\r\n\t\t// goal is to pause the initial run button click. really bad obviously\r\n\t\t// the only other relevant code is in controls run button click function\r\n\t\tif (document.getElementById('run').innerHTML === 'wait') {\r\n\t\t\tdocument.getElementById('run').innerHTML = 'pause';\r\n\t\t}\r\n\r\n\t}, [instructionBlockToExecute]);\r\n\r\n\tconst sizeOuterCircle = () => {\r\n\t\tvar width = document.getElementById(\"sim-wrapper\").offsetWidth;\r\n\t\tvar height = document.getElementById(\"sim-wrapper\").offsetHeight;\r\n\r\n\t\t// screen is tall\r\n\t\tif (height > width) {\r\n\t\t\tvar circleDiameter = document.getElementById(\"circle-wrapper\").offsetWidth;\r\n\r\n\t\t\tdocument.documentElement.style.setProperty(\r\n\t\t\t\t'--circle-wrapper-height', \r\n\t\t\t\tcircleDiameter + 'px'\r\n\t\t\t);\r\n\r\n\t\t\t// set padding to center vertically\r\n\t\t\tdocument.documentElement.style.setProperty(\r\n\t\t\t\t'--sim-wrapper-vertical-padding',\r\n\t\t\t\t((document.getElementById(\"sim-wrapper\").offsetHeight - circleDiameter) / 2) + 'px'\r\n\t\t\t)\r\n\r\n\t\t\t// reset height to what it was originally\r\n\t\t\tdocument.getElementById(\"sim-wrapper\").style.height = height + 'px';\r\n\r\n\t\t// screen is wide\r\n\t\t} else if (height < width) {\r\n\t\t\tdocument.documentElement.style.setProperty(\r\n\t\t\t\t'--circle-wrapper-width', \r\n\t\t\t\tdocument.getElementById(\"circle-wrapper\").offsetHeight + 'px'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tconst generateNodes = (num) => {\r\n\t\tconst nodeDiameter = document.getElementById('circle-wrapper').offsetWidth / 7;\r\n\t\tdocument.documentElement.style.setProperty('--node-diameter', nodeDiameter + 'px');\r\n\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tconst newDiv = document.createElement('div');\r\n\t\t\tnewDiv.setAttribute('class', 'dot');\r\n\t\t\tnewDiv.setAttribute('id', i.toString());\r\n\t\t\tconst newContent = document.createTextNode(i.toString());\r\n\t\t\tnewDiv.appendChild(newContent);\r\n\r\n\t\t\tconst deg = (360 / num) * i;\r\n\r\n\t\t\tvar radius = (document.getElementById(\"circle-wrapper\").offsetWidth / 2) + 'px';\r\n\r\n\t\t\t// if this is the second render, remove the already existing node\r\n\t\t\tif (document.getElementById(i.toString())) {\r\n\t\t\t\tdocument.getElementById(i.toString()).remove();\r\n\t\t\t}\r\n\r\n\t\t\tdocument.getElementById('circle-wrapper').append(newDiv);\r\n\t\t\tdocument.getElementById(i.toString()).style.transform = \"rotate(-90deg) rotate(\" + deg + \"deg) translate(\" + radius + \") rotate(-\" + deg + \"deg) rotate(90deg)\";\r\n\t\t\tdocument.getElementById(i.toString()).style.lineHeight = document.getElementById(i.toString()).offsetWidth - 2 + 'px'; // reset line height, - 2 is border width\r\n\r\n\t\t\tdocument.getElementById(i.toString()).addEventListener('click', (ev) => {props.getNodeInfo(i)});\r\n\t\t}\r\n\r\n\t\tconst edges = [];\r\n\t\t\r\n\t\tprops.net.nodeMap.forEach(node => {\r\n\t\t\tnode.connections.forEach( connection => {\r\n\t\t\t\tif (edges.findIndex(\r\n\t\t\t\t\telem => (elem[0] === node.id && elem[1] === connection) || (elem[1] === node.id && elem[0] === connection)\r\n\t\t\t\t) < 0) {\r\n\r\n\t\t\t\t\t// add the edge to edges, create new line on the svg\r\n\t\t\t\t\tconst newLine = connect(document.getElementById(node.id.toString()), document.getElementById(connection.toString()));\r\n\t\t\t\t\tdocument.getElementById('sim-wrapper').insertBefore(newLine, document.getElementById('circle-wrapper'));\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t};\r\n\r\n\tconst insertAnimations = (numNodes: number) => {\r\n\t\tconst subtractBy = document.getElementById('0').getBoundingClientRect().top;\r\n\t\tconst msgWidth = parseInt(getComputedStyle(document.getElementById('0')).width);\r\n\t\tvar width = document.getElementById(\"sim-wrapper\").offsetWidth;\r\n\t\tvar height = document.getElementById(\"sim-wrapper\").offsetHeight;\r\n\r\n\t\tfor (let i = 0; i < numNodes; i++) {\r\n\t\t\tfor (let j = 0; j < numNodes; j++) {\r\n\t\t\t\tif (i === j) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet x1, x2, y1, y2;\r\n\t\t\t\t\r\n\t\t\t\t\tx1 = document.getElementById(i.toString()).getBoundingClientRect().left + window.pageXOffset;\r\n\t\t\t\t\ty1 = document.getElementById(i.toString()).getBoundingClientRect().top + window.pageYOffset;\r\n\t\r\n\t\t\t\t\tx2 = document.getElementById(j.toString()).getBoundingClientRect().left + window.pageXOffset;\r\n\t\t\t\t\ty2 = document.getElementById(j.toString()).getBoundingClientRect().top + window.pageYOffset;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// // going right or left\r\n\t\t\t\t// if (x2 - x1 > 0)      { x1 += Math.round(msgWidth/4); x2 -= Math.round(msgWidth/4); }\t\t\t\t\r\n\t\t\t\t// else if (x2 - x1 < 0) { x1 -= Math.round(msgWidth/4); x2 += Math.round(msgWidth/4); }\r\n\r\n\t\t\t\t// // going down or up\r\n\t\t\t\t// if (y2 - y1 > 0)      { y1 += Math.round(msgWidth/4); y2 -= Math.round(msgWidth/4); }\r\n\t\t\t\t// else if (y2 - y1 < 0) { y1 -= Math.round(msgWidth/4); y2 += Math.round(msgWidth/4); }\r\n\r\n\r\n\t\t\t\t(document.styleSheets[0] as any).insertRule(\r\n\t\t\t\t\t`@keyframes id${i}to${j} { from{ left:${x1}px; top:${y1}px   } to{ left:${x2}px; top:${y2}px } }`\r\n\t\t\t\t);\r\n\r\n\t\t\t\t(document.styleSheets[0] as any).insertRule(\r\n\t\t\t\t\t`.msg${i}to${j} { left:${x1}px; top:${y1}px }`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst executeApiResponse = (apiResponse: [{\r\n\t\tinstrId: number,\r\n\t\tnodeId: number,\r\n\t\tdir: string,\r\n\t\tmsg: string,\r\n\t\tpayload: any,\r\n\t\tnodeInfoString: string,\r\n\t\tnetworkLatency?: number,\r\n\t\tadditionalDelay?: number,\r\n\t\tdone: boolean,\r\n\t}], i: number, pauseFirstAnimations?: boolean) => {\r\n\r\n\t\tconsole.log('executing ' + i);\r\n\t\tfor (let ind = i-1; ind >= 0; --ind) {\r\n\t\t\tif (apiResponse[ind].done === false) {\r\n\t\t\t\tconsole.log('out of order, waiting for correct thing to execute');\r\n\t\t\t\tsetTimeout(() => executeApiResponse(apiResponse, i), 500);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (i === apiResponse.length) {\r\n\t\t\tconsole.log('does this ever happen?');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst thisMsg = apiResponse[i];\r\n\t\tif (thisMsg.dir === 'recv' && thisMsg.msg.includes('original')) {\r\n\t\t\tconsole.log('finished instr ' + thisMsg.instrId);\r\n\t\t\tthisMsg.done = true;\r\n\r\n\t\t\t// emit apiResponse progression (separate from instruction progression)\r\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\r\n\r\n\t\t\t// barrier synchronization\r\n\t\t\tconst allInstr = props.sentInstructions;\r\n\t\t\tconst thisBlock = allInstr[instructionBlockToExecute];\r\n\t\t\tconst thisInstr = thisBlock.findIndex((inst) => inst.instrId === thisMsg.instrId);\r\n\t\t\t\r\n\t\t\tif (thisInstr >= 0) {\r\n\t\t\t\tthisBlock[thisInstr].done = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet thisBlockDone = true;\r\n\t\t\tfor (let i = 0; i < thisBlock.length; i++) {\r\n\t\t\t\tif (!thisBlock[i].done) { thisBlockDone = false; }\r\n\t\t\t}\r\n\r\n\t\t\t// update sentInstructions so that the console can display properly\r\n\t\t\tprops.setSentInstructions(JSON.parse(JSON.stringify(allInstr)));\r\n\r\n\t\t\t// execute the next block\r\n\t\t\tif (thisBlockDone) {\r\n\t\t\t\tsetInstructionBlockToExecute(instructionBlockToExecute + 1);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// ending the updateDataRange messages\r\n\t\tif (thisMsg.dir === 'recv' && thisMsg.msg.includes('final') && thisMsg.msg.includes('updateDataRange')) {\r\n\t\t\tconsole.log('finished instr ' + thisMsg.instrId);\r\n\t\t\tthisMsg.done = true;\r\n\r\n\t\t\t// emit apiResponse progression (separate from instruction progression)\r\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet next = i + 1;\r\n\t\twhile (apiResponse[next].instrId !== apiResponse[i].instrId) {\r\n\t\t\tnext++;\r\n\t\t} \r\n\r\n\t\tconst nextMsg = apiResponse[next];\r\n\r\n\t\t// ie. reading data on the same node\r\n\t\tif (nextMsg.nodeId === thisMsg.nodeId) {\r\n\t\t\tthisMsg.done = true;\r\n\r\n\t\t\t// emit apiResponse progression (separate from instruction progression)\r\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\r\n\r\n\t\t\texecuteApiResponse(apiResponse, next);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (thisMsg.msg.includes('initial payload') ||\r\n\t\t\t(thisMsg.dir === 'send' && thisMsg.msg.includes('middle')) ||\r\n\t\t\t(thisMsg.dir === 'send' && thisMsg.msg.includes('final'))\r\n\t\t) {\t\r\n\t\t\tlet delay = 1 + (nextMsg.networkLatency/100) + (nextMsg.additionalDelay/100);\r\n\r\n\t\t\tconst msg = document.createElement('div');\r\n\t\t\tconst msgId = `instr_${thisMsg.instrId}_msg${thisMsg.nodeId}to${nextMsg.nodeId}_apiresindex_${i}`;\r\n\t\t\tmsg.setAttribute('class', `msg msg${thisMsg.nodeId}to${nextMsg.nodeId}`);\r\n\t\t\tmsg.setAttribute('id', msgId);\r\n\t\t\tdocument.getElementById('sim-wrapper').appendChild(msg);\r\n\t\t\tconst div = document.getElementById(msgId);\r\n\t\t\tdiv.style.height = document.getElementById('0').offsetHeight + 'px';\r\n\t\t\tdiv.style.width = document.getElementById('0').offsetWidth + 'px';\r\n\t\t\tdiv.style.lineHeight = div.offsetHeight.toString() + 'px';\r\n\r\n\t\t\tif (pauseFirstAnimations) {\r\n\t\t\t\tdiv.style.animation = `id${thisMsg.nodeId}to${nextMsg.nodeId} ${delay}s linear forwards paused`;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tdiv.style.animation = `id${thisMsg.nodeId}to${nextMsg.nodeId} ${delay}s linear forwards`;\r\n\t\t\t}\r\n\r\n\t\t\tdiv.addEventListener('animationend', () => {\r\n\t\t\t\tconsole.log(`Animation ${msgId} ended`);\r\n\t\t\t\tdiv.remove();\r\n\t\t\t\texecuteApiResponse(apiResponse, next);\r\n\t\t\t});\r\n\r\n\t\t\tdiv.addEventListener('click', () => props.getPayloadInfo(i, msgId));\r\n\r\n\t\t\tthisMsg.done = true;\r\n\r\n\t\t\t// emit apiResponse progression (separate from instruction progression)\r\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ((thisMsg.dir === 'recv' && thisMsg.msg.includes('middle')) ||\r\n\t\t\t(thisMsg.dir === 'recv' && thisMsg.msg.includes('final'))\r\n\t\t) {\r\n\t\t\tthisMsg.done = true;\r\n\r\n\t\t\t// emit apiResponse progression (separate from instruction progression)\r\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\r\n\r\n\t\t\t\r\n\t\t\treturn executeApiResponse(apiResponse, next);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction getOffset( el ) {\r\n\t\tvar rect = el.getBoundingClientRect();\r\n\t\treturn {\r\n\t\t\tleft: rect.left + window.pageXOffset,\r\n\t\t\ttop: rect.top + window.pageYOffset,\r\n\t\t\twidth: rect.width || el.offsetWidth,\r\n\t\t\theight: rect.height || el.offsetHeight\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction connect(div1: HTMLElement, div2: HTMLElement): HTMLElement { // draw a line connecting elements\r\n\t\tconst thickness = 2;\r\n\r\n\t\tvar off1 = getOffset(div1);\r\n\t\tvar off2 = getOffset(div2);\r\n\t\t// middle\r\n\t\tvar x1 = off1.left + (off1.width / 2);\r\n\t\tvar y1 = off1.top + (off1.height / 2);\r\n\t\t// middle\r\n\t\tvar x2 = off2.left + (off2.width / 2);\r\n\t\tvar y2 = off2.top + (off2.height / 2);\r\n\t\t// distance\r\n\t\tvar length = Math.sqrt(((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)));\r\n\t\t// center\r\n\t\tvar cx = ((x1 + x2) / 2) - (length / 2);\r\n\t\tvar cy = ((y1 + y2) / 2) - (thickness / 2);\r\n\t\t// angle\r\n\t\tvar angle = Math.atan2((y1-y2),(x1-x2))*(180/Math.PI);\r\n\t\t\r\n\t\tconst newLine = document.createElement('div');\r\n\t\tnewLine.style.padding = '0px';\r\n\t\tnewLine.style.margin = '0px';\r\n\t\tnewLine.style.height = '2px';\r\n\t\tnewLine.style.backgroundColor = '#282c34';\r\n\t\tnewLine.style.lineHeight = '1px';\r\n\t\tnewLine.style.position = 'absolute';\r\n\t\tnewLine.style.left = cx + 'px';\r\n\t\tnewLine.style.top = cy + 'px';\r\n\t\tnewLine.style.width = length + 'px';\r\n\t\tnewLine.style.transform = 'rotate(' + angle + 'deg)';\r\n\r\n\t\treturn newLine as HTMLElement;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t\t<div id=\"sim-wrapper\" className=\"sim-wrapper\">\r\n\t\t\t\t<div id=\"circle-wrapper\" className=\"circle-wrapper\">\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Sim;","import React, { useEffect, useState } from 'react';\r\nimport './Controls.css';\r\nimport * as interpret from '../../util/interpret';\r\n\r\nexport interface ControlsProps {\r\n\tsetInstructionsToSend: React.Dispatch<React.SetStateAction<interpret.Instruction[][]>>;\r\n\tfinishedExecuting: boolean;\r\n\tsetFinishedExecuting: React.Dispatch<React.SetStateAction<boolean>>;\r\n\tsetRunButtonClasses: React.Dispatch<React.SetStateAction<string[]>>;\r\n\r\n\trunState: string;\r\n\tsetRunState: React.Dispatch<React.SetStateAction<string>>;\r\n\t\r\n\tsetMostRecentStepCompleted: React.Dispatch<React.SetStateAction<number[]>>;\r\n\r\n\t// delivered by the Console component just so this component can delay resetting the instruction list\r\n\tsetInstrList?: React.Dispatch<React.SetStateAction<interpret.Instruction[]>>\r\n\r\n\tsetApiResponseCopy?: React.Dispatch<React.SetStateAction<any[]>>;\r\n}\r\n\r\nconst Controls: React.FunctionComponent<ControlsProps> = (props) => {\r\n\r\n\tuseEffect( () => {\r\n\t\tif (!props.finishedExecuting) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (props.finishedExecuting) {\r\n\t\t\tconst btn = document.getElementById('run');\r\n\t\t\tbtn.innerHTML = 'reset';\r\n\r\n\t\t\tbtn.addEventListener('click', resetRunBtn);\r\n\t\t}\r\n\t}, [props.finishedExecuting]);\r\n\r\n\tconst resetRunBtn = () => {\r\n\t\tconst btn = document.getElementById('run');\r\n\t\tbtn.classList.remove('run-active');\r\n\t\tbtn.classList.remove('run-running');\r\n\t\tbtn.classList.remove('display-block');\r\n\t\tbtn.classList.remove('display-none');\r\n\r\n\t\tbtn.innerHTML = 'run';\r\n\t\t(document.getElementById(\"textarea\") as any).value = '';\r\n\r\n\t\tprops.setFinishedExecuting(undefined);\r\n\t\tprops.setRunButtonClasses(['run']);\r\n\r\n\t\tconst toggleButtonsAndInfo = () => {\r\n\t\t\tdocument.getElementById('prompt').classList.toggle('display-none');\r\n\t\t\tdocument.getElementById('textarea').classList.toggle('display-none');\r\n\t\t\tdocument.getElementById('liveinfo').classList.toggle('display-none');\r\n\t\t};\r\n\r\n\t\t// originally executed on console component, but this component handles reset now\r\n\t\ttoggleButtonsAndInfo();\r\n\r\n\t\t// side effect of this on console component is resetting mapInstrIdToLabel map\r\n\t\t// if done anywhere else the map gets reset to the old map because the old\r\n\t\t// instructions still exist at this point. very frustrating\r\n\t\tprops.setInstrList([] as interpret.Instruction[]);\r\n\t\tprops.setApiResponseCopy([]);\r\n\t\tprops.setMostRecentStepCompleted([]);\r\n\r\n\t\tbtn.removeEventListener('click', resetRunBtn);\r\n\t};\r\n\r\n\tconst changeRunStatus = (runOrControls: string) => {\r\n\r\n\t\tconst btn = document.getElementById('run');\r\n\t\tconst active = btn.classList.contains('run-active');\r\n\t\tconst running = btn.classList.contains('run-running');\r\n\r\n\t\t// const back = document.getElementById('back');\r\n\t\tconst play = document.getElementById('play');\r\n\t\t// const forward = document.getElementById('forward');\r\n\r\n\t\tif (runOrControls === 'run' && active && !running) {\r\n\t\t\tif (document.getElementById('err-text')) {\r\n\t\t\t\tdocument.getElementById('err-text').remove();\r\n\t\t\t}\r\n\r\n\t\t\tlet success = true;\r\n\t\t\tconst blocks = interpret.createInstructionBlocks((document.getElementById(\"textarea\") as any).value);\r\n\r\n\t\t\tblocks.forEach( instructionBlock => {\r\n\r\n\t\t\t\tinstructionBlock.forEach(instr => {\r\n\r\n\t\t\t\t\tconst checkResult = interpret.interpretOneCommand(instr.instrId, instr.text, false);\r\n\t\t\t\t\tif (checkResult.failure) {\r\n\r\n\t\t\t\t\t\tsuccess = false;\r\n\r\n\t\t\t\t\t\tconst errText = document.createElement('span');\r\n\t\t\t\t\t\terrText.setAttribute('id', 'err-text');\r\n\t\t\t\t\t\terrText.setAttribute('style', 'color: orange');\r\n\t\t\t\t\t\tconst newContent = document.createTextNode('failure: ' + checkResult.msg);\r\n\t\t\t\t\t\terrText.appendChild(newContent);\r\n\r\n\t\t\t\t\t\tdocument.getElementById('console').insertBefore(errText, document.getElementById('textarea'));\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tif (success) {\r\n\t\t\t\t// this is equivalent to \"sending\" instructions to our api component\r\n\t\t\t\t// (it's listening for changes to its sent instructions prop)\r\n\r\n\t\t\t\t// if using a real api, we would detect instructions to send and\r\n\t\t\t\t// make an api request, then return the apiResponse to the app component\r\n\t\t\t\tprops.setInstructionsToSend(blocks);\r\n\t\t\t\tbtn.innerHTML = 'wait';\r\n\t\t\t\tbtn.classList.add('run-running');\r\n\r\n\t\t\t\tdocument.getElementById('run').click();\r\n\t\t\t};\r\n\r\n\t\t} else if(runOrControls === 'run' && running) {\r\n\r\n\t\t\tconst msgs = document.getElementsByClassName('msg');\r\n\r\n\t\t\tfor (let i = 0; i < msgs.length; i++) {\r\n\t\t\t\tconst item = document.getElementById(msgs.item(i).getAttribute('id'));\r\n\t\t\t\titem.style.animationPlayState = 'paused';\r\n\t\t\t}\r\n\r\n\t\t\t// toggle and show the back-play-forward btns\r\n\t\t\tbtn.classList.remove('run-active');\r\n\t\t\tbtn.classList.remove('run-running');\r\n\t\t\t// btn.classList.remove('display-block');\r\n\t\t\tbtn.classList.add('display-none');\r\n\r\n\t\t\t// back.classList.remove('display-none');\r\n\t\t\tplay.classList.remove('display-none');\r\n\t\t\t// forward.classList.remove('display-none');\r\n\t\t\t// back.classList.add('display-inline-block');\r\n\t\t\t// play.classList.add('display-inline-block');\r\n\t\t\t// forward.classList.add('display-inline-block');\r\n\r\n\t\t} else if (runOrControls === 'play') {\r\n\r\n\t\t\tconst msgs = document.getElementsByClassName('msg');\r\n\r\n\t\t\tfor (let i = 0; i < msgs.length; i++) {\r\n\t\t\t\tconst item = document.getElementById(msgs.item(i).getAttribute('id'));\r\n\t\t\t\titem.style.animationPlayState = 'running';\r\n\t\t\t}\r\n\r\n\t\t\tbtn.classList.remove('display-none');\r\n\t\t\t// btn.classList.add('display-block');\r\n\t\t\tbtn.classList.add('run-active');\r\n\t\t\tbtn.classList.add('run-running');\r\n\r\n\t\t\t// back.classList.remove('display-inline-block');\r\n\t\t\t// play.classList.remove('display-inline-block');\r\n\t\t\t// forward.classList.remove('display-inline-block');\r\n\t\t\t// back.classList.add('display-none');\r\n\t\t\tplay.classList.add('display-none');\r\n\t\t\t// forward.classList.add('display-none');\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst tutorial = () => {\r\n\t\tdocument.getElementById('tutorial').classList.add('display-none');\r\n\t\tdocument.getElementById('menu-btn').click();\r\n\t\tsetTimeout( () => {\r\n\t\t\tdocument.getElementById('tutorial-li').click();\r\n\t\t}, 800);\r\n\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<div id=\"run\" className=\"run\" onClick={() => {if(document.getElementById('run').classList.length > 1) { changeRunStatus('run'); }}}>run</div>\r\n\t\t{/* <div id=\"back\" className=\"back\" onClick={() => {scrollToTop(); changeRunStatus('back');}}>&lt;=</div> */}\r\n\t\t<div id=\"play\" className=\"play display-none\" onClick={() => {changeRunStatus('play');}}>play</div>\r\n\t\t{/* <div id=\"forward\" className=\"forward\" onClick={() => {scrollToTop(); changeRunStatus('forward');}}>=></div> */}\r\n\r\n\t\t<div id=\"tutorial\" className=\"tutorial\" onClick={() => tutorial()}>first visit?</div>\r\n\t\t</>\r\n\t);\r\n\r\n}\r\n\r\nexport default Controls;","import React, { useEffect, useState } from 'react';\r\nimport './Console.css';\r\nimport Network from '../../model/Network';\r\nimport { Instruction } from '../../util/interpret';\r\nimport * as interpret from '../../util/interpret';\r\nimport Controls, { ControlsProps } from '../Controls/Controls';\r\n\r\ninterface ConsoleProps {\r\n    ControlsProps: ControlsProps;\r\n    apiResponse: any;\r\n    handleTextAreaInput: (event: React.ChangeEvent<Element>) => void;\r\n    sentInstructions: Instruction[][];\r\n}\r\n\r\nconst Console: React.FunctionComponent<ConsoleProps> = (props) => {\r\n\r\n    const [ instrList, setInstrList ] = useState([] as Instruction[]);\r\n    const [ apiResponseCopy, setApiResponseCopy ] = useState([]);\r\n    const [ mapInstrIdsToLabels, setMapInstrIdsToLabels ] = useState(new Map<number, string>());\r\n    const [ displayResponse, setDisplayResponse ] = useState([] as boolean[]);\r\n    \r\n\r\n    useEffect( () => {\r\n        if (!props.apiResponse) {\r\n            return;\r\n        }\r\n\r\n        // only set LiWidth on the first apiResponse\r\n        if (apiResponseCopy.length === 0) {\r\n            setLiWidth();\r\n        }\r\n\r\n        setApiResponseCopy(props.apiResponse);\r\n\r\n        console.log('console received new api progression');\r\n        console.log(props.apiResponse);\r\n\r\n        const msgs = document.getElementsByClassName('msg');\r\n        for (let i = 0; i < msgs.length; i++) {\r\n            const currMsg = msgs.item(i) as HTMLElement;\r\n            const tokens = currMsg.id.split('_');\r\n            if (!currMsg.innerHTML && mapInstrIdsToLabels.get(parseInt(tokens[1]))) {\r\n                currMsg.innerHTML = mapInstrIdsToLabels.get(parseInt(tokens[1]));\r\n            }\r\n        }\r\n\r\n    }, [props.apiResponse]);\r\n    \r\n    useEffect( () => {\r\n        if (props.ControlsProps.finishedExecuting === undefined) {\r\n            return;\r\n\r\n        // we're currently executing something\r\n        } else if (props.ControlsProps.finishedExecuting === false) {\r\n            toggleButtonsAndInfo();\r\n            updateInstrList();\r\n\r\n        // we're done executing\r\n        } else {\r\n            // toggleButtonsAndInfo executed by the reset event listener on Controls component\r\n            // resetting the instruction list also done on the controls component\r\n        }\r\n\r\n    }, [props.ControlsProps.finishedExecuting]);\r\n\r\n    useEffect( () => {\r\n        if (!props.sentInstructions) {\r\n            return;\r\n        }\r\n\r\n        console.log('updated instr:');\r\n        console.log(props.sentInstructions)\r\n        updateInstrList();\r\n    }, [props.sentInstructions]);\r\n\r\n    useEffect( () => {\r\n        if (instrList.length === 0) {\r\n            setMapInstrIdsToLabels(undefined);\r\n            // set this map to undefined so labels reset for next instructions\r\n\r\n            setDisplayResponse([]);\r\n\r\n        } else if (displayResponse.length === 0) {\r\n\r\n            instrList.forEach( instr => displayResponse[instr.instrId] = false );\r\n        }\r\n    }, [instrList]);\r\n\r\n    const toggleButtonsAndInfo = () => {\r\n        document.getElementById('prompt').classList.toggle('display-none');\r\n        document.getElementById('textarea').classList.toggle('display-none');\r\n        document.getElementById('liveinfo').classList.toggle('display-none');\r\n    };\r\n\r\n    const updateInstrList = () => {\r\n        const instrList = [] as Instruction[];\r\n        props.sentInstructions.forEach( instrArr => {\r\n            instrArr.forEach( instr => {\r\n                instrList.push(instr);\r\n            });\r\n        });\r\n\r\n        setInstrList(instrList);\r\n    };\r\n\r\n    const getInstrLabel = (instr: any, includeColon?: boolean): any => {\r\n\r\n        let mapRes = undefined;\r\n        let newMap = undefined as Map<number, string>;\r\n\r\n        if (mapInstrIdsToLabels) {\r\n            mapRes = mapInstrIdsToLabels.get(instr.instrId);\r\n            \r\n        } else {\r\n            newMap = new Map<number, string>();\r\n        }\r\n\r\n        // define labels for all instructions at once\r\n        if (mapRes === undefined) {\r\n            let label: string;\r\n\r\n            let labelList = [];\r\n            for (let i = 0; i < instrList.length; i++) {\r\n                const thisInstr = instrList[i];\r\n                const tokens = thisInstr.text.split(' ');\r\n                let opIndex = 0;\r\n                let done = false;\r\n\r\n                while (!done) {\r\n                    if (tokens[opIndex] === 'read' || tokens[opIndex] === 'r') {\r\n                        label = 'r';\r\n                        done = true;\r\n\r\n                    } else if (tokens[opIndex] === 'update' || tokens[opIndex] === 'u') {\r\n                        label = 'u';\r\n                        done = true;\r\n\r\n                    } else if (tokens[opIndex] === 'insert' || tokens[opIndex] === 'i') {\r\n                        label = 'i';\r\n                        done = true;\r\n\r\n                    } else if (tokens[opIndex] === 'delete' || tokens[opIndex] === 'd') {\r\n                        label = 'd';\r\n                        done = true;\r\n                    }\r\n\r\n                    opIndex++;\r\n                }\r\n\r\n                if (tokens[opIndex] === 'item' || tokens[opIndex] === 'i' ) {\r\n                    opIndex++;\r\n                }\r\n\r\n                if (label !== 'i') {\r\n                    label = label.concat(tokens[opIndex]);\r\n\r\n                    for (let i = labelList.length - 1; i >= 0; i--) {\r\n                        const currLabel = labelList[i].label;\r\n                        if (currLabel[0] === label[0] && currLabel[1] === label[1]) {\r\n\r\n                            if (currLabel.includes('_')) {\r\n                                label = label.concat('_' + (parseInt(currLabel[currLabel.length - 1]) + 1).toString());\r\n                            } else {\r\n                                label = label.concat('_2');\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    for (let i = labelList.length - 1; i >= 0; i--) {\r\n                        const currLabel = labelList[i].label;\r\n                        if (currLabel[0] === label[0]) {\r\n\r\n                            if (currLabel.includes('_')) {\r\n                                label = label.concat('_' + (parseInt(currLabel[currLabel.length - 1]) + 1).toString());\r\n                            } else {\r\n                                label = label.concat('_2');\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                labelList.push({instrId: thisInstr.instrId, label: label});\r\n            }\r\n\r\n            labelList.forEach( li => {\r\n                newMap.set(li.instrId, li.label);\r\n            });\r\n\r\n            if (document.getElementById('run').innerHTML !== 'run') {\r\n                // this will set a new map for the second instruction ONLY\r\n                // when the run button's innerHTML is not 'run'\r\n                // this indicates that new instructions are on the way\r\n                setMapInstrIdsToLabels(newMap);\r\n            }\r\n\r\n            label = newMap.get(instr.instrId);\r\n\r\n            return includeColon === false ? label : label + \": \";\r\n\r\n        } else {\r\n            return includeColon === false ? mapRes : mapRes + \": \";\r\n        }\r\n    };\r\n\r\n    const getMsgColor = (val: any): string => {\r\n        return val.done ? 'gray' : val.msg.includes('final') ? 'blue' : val.msg.includes('original') ? 'yellow' : 'sky'\r\n    };\r\n\r\n    const setLiWidth = () => {\r\n        const totalWidth = document.getElementById('instrlist').offsetWidth;\r\n\r\n        let labels = document.getElementsByClassName('listlabel');\r\n\r\n        let maxWidth = 0;\r\n        for (let i = 0; i < labels.length; i++) {\r\n            const currWidth = (labels.item(i) as HTMLElement).offsetWidth;\r\n            if (currWidth > maxWidth) {\r\n                maxWidth = currWidth;\r\n            }\r\n        }\r\n\r\n        let msgs = document.getElementsByClassName('listmsg');\r\n        labels = document.getElementsByClassName('listlabel');\r\n\r\n        for (let i = 0; i < msgs.length; i++) {\r\n            let item = msgs.item(i) as HTMLElement;\r\n            let label = labels.item(i) as HTMLElement;\r\n\r\n            item.style.width = (totalWidth - maxWidth - 1) + 'px';\r\n            label.style.lineHeight = item.offsetHeight + 'px';\r\n        }\r\n    };\r\n\r\n    const getInstrClasses = (instrList: any[], key: number): string => {\r\n        let c = instrList[key].done ? 'gray' : 'sky';\r\n        if (key === 0) {\r\n            c = c.concat(' first');\r\n        }\r\n        if (key === instrList.length - 1) {\r\n            c = c.concat(' last');\r\n        }\r\n        return c;\r\n    };\r\n\r\n    const showResponse = (instrId: number): void => {\r\n        const newState = [];\r\n        displayResponse.forEach( (val, i) => {\r\n            newState[i] = i === instrId ? true : val;\r\n        });\r\n        setDisplayResponse(newState);\r\n    };\r\n\r\n    const getResponseText = (instr: any): any => {\r\n\r\n        let str = instr.res.itemId ? `itemId: ${instr.res.itemId}, ` : '';\r\n\r\n        if (instr.res.item) {\r\n            Object.keys(instr.res.item).forEach( (key) => {\r\n                str = str.concat(key + ': ' + instr.res.item[key] + ', ');\r\n            });\r\n            str = str.slice(0, -2); \r\n        }\r\n\r\n        return (<>\r\n            <span style={{color: '#f1ef43'}}>msg: </span><span dangerouslySetInnerHTML={{__html: instr.res.msg}}></span><br></br>\r\n            <span style={{color: '#f1ef43'}}>item: </span>\r\n            <span style={{color: '#f0d976'}}>{'{'}</span>\r\n                {str}\r\n            <span style={{color: '#f0d976'}}>{'}'}</span>\r\n        </>)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <div id=\"console\" className=\"console\">\r\n        <Controls {...props.ControlsProps} setInstrList={setInstrList} setApiResponseCopy={setApiResponseCopy} />\r\n  \r\n        <div id=\"prompt\" className=\"before-textarea blink\">>>></div>\r\n        <textarea id=\"textarea\" onClick={() => document.getElementById('prompt').classList.remove('blink')} onChange={props.handleTextAreaInput}></textarea>\r\n        <div id=\"liveinfo\" className=\"liveinfo display-none\">\r\n\r\n            <h3 className={'liveinfo-h3 top-margin-20'}>executing instructions:</h3>\r\n            <ul className='instrlist'>\r\n                {instrList.map((instr, key) => {\r\n                    return <li\r\n                        id={'instr' + instr.instrId.toString()}\r\n                        key={key}\r\n                        className={getInstrClasses(instrList, key)}\r\n                    >\r\n                        {instr.done ? <s>{'instr ' + getInstrLabel(instr)}</s> : 'instr ' + getInstrLabel(instr)}\r\n                        {instr.text}\r\n\r\n                        {instr.done && !displayResponse[instr.instrId] ? <div className=\"view-response\" onClick={() => showResponse(instr.instrId)}>view response</div> : ''}\r\n                        {displayResponse[instr.instrId] ? <div className='response-text'><span className='blue'> instr {getInstrLabel(instr, false)} response: </span><br></br>{getResponseText(instr)}</div> : ''}\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            \r\n\r\n            <h3 className={'liveinfo-h3 top-margin'}>all system actions:</h3>\r\n            <ul className=\"instrlist\" id=\"instrlist\">\r\n                {apiResponseCopy.map( (val, key) => {\r\n                    return (\r\n                        <li key={key} className={key === 0 ? 'first' : key === apiResponseCopy.length - 1 ? 'last' : ''}>\r\n                            {val.done ? <div className='listlabel gray'><s>{getInstrLabel(val)}</s></div> : <div className='listlabel sky'>{getInstrLabel(val)}</div>}\r\n                            <div className={'listmsg ' + getMsgColor(val)}>{val.msg}</div>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n        </div>\r\n      </div>\r\n      <div id=\"end\"></div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Console;","export default class DataRange {\r\n    nodeId: number;\r\n    start: number;\r\n    end: number;\r\n    full: boolean;\r\n    highestItemId: number;\r\n}","import DataRange from \"./DataRange\";\r\n\r\nexport default class OrderedMap {\r\n    map: Map<number, DataRange> = new Map();\r\n    keysInOrder: number[] = [];\r\n\r\n    set(num: number, dRange: DataRange): void {\r\n\r\n        // only push and re-sort if creating new map entry\r\n        if (!this.map.has(num)) {\r\n            this.keysInOrder.push(num);\r\n            this.keysInOrder.sort((a, b) => a - b); // TODO: push to correct index so sort is unneccesary\r\n        }\r\n\r\n        this.map.set(num, dRange);\r\n    }\r\n\r\n    get(num: number): DataRange {\r\n        return this.map.get(num);\r\n    }\r\n\r\n    delete(num: number): boolean {\r\n        let delIndex = undefined;\r\n        for (let i = 0; i < this.keysInOrder.length; i++) {\r\n            if (this.keysInOrder[i] === num) {\r\n                delIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        if (delIndex !== undefined) {\r\n            this.keysInOrder.splice(delIndex, 1);\r\n        }\r\n        // TODO: do the above in a better way\r\n\r\n        return this.map.delete(num);\r\n    }\r\n}","import Network from \"./Network\";\r\nimport payload from \"./payload\";\r\nimport DataRange from \"./DataRange\";\r\nimport OrderedMap from \"./OrderedMap\";\r\n\r\nimport { Subject } from \"rxjs\";\r\nimport { buildNodeInfoString } from \"../util/interpret\";\r\n\r\nexport default class node {\r\n    id: number = 0;\r\n    connections: number[] = [];\r\n    latency: number = 100;\r\n    nodeMap: Map<number, node> = new Map(); // nodeId => node\r\n    dataRangeOrderedMap: OrderedMap = new OrderedMap(); // dataRange.start => dataRange\r\n\r\n    dataRange: DataRange[] = [];\r\n    dataSlice: Map<number, Object> = new Map();\r\n\r\n    clock: number[] = [];\r\n    mostRecentWrite: {clock: number[], itemId: number, item: any} = undefined;\r\n\r\n    eventStream: Subject<any> = undefined;\r\n\r\n    processPayload: (payload: payload, networkLatency: number, additionalDelay: number) => Promise<Object> = \r\n    (payload, networkLatency, additionalDelay) => {\r\n        if (payload.hasOwnProperty(\"msg\") && payload.msg === \"Hello!\") {\r\n            return Promise.resolve(\"Hello from node \" + this.id);\r\n\r\n        } else if (payload.pathIndex !== (payload.path.length - 1) && payload.pathIndex !== 0) {\r\n\r\n            // emit event\r\n            if (payload.op !== 'updateDataRange') {\r\n                this.eventStream.next({\r\n                    instrId: payload.instrId,\r\n                    nodeId: this.id,\r\n                    dir: 'recv',\r\n                    networkLatency: networkLatency,\r\n                    additionalDelay: additionalDelay,\r\n                    msg: 'middle node ' + this.id + ' received payload',\r\n                    payload: JSON.parse(JSON.stringify(payload)),\r\n                    done: false,\r\n                    nodeInfoString: buildNodeInfoString(this),\r\n                });\r\n            }\r\n            \r\n\r\n            // don't update clocks if the node is simply forwarding the message. Pretend like sourceNode is sending\r\n            // directly to targetNode\r\n            if (payload.dir === 'out') {\r\n                ++payload.pathIndex;\r\n            }else {\r\n                --payload.pathIndex;\r\n            }\r\n            payload.id = payload.path[payload.pathIndex];\r\n\r\n            // emit event\r\n            if (payload.op !== 'updateDataRange') {\r\n                this.eventStream.next({\r\n                    instrId: payload.instrId,\r\n                    nodeId: this.id,\r\n                    dir: 'send',\r\n                    msg: 'middle node ' + this.id + ' changed payload path, is forwarding',\r\n                    payload: JSON.parse(JSON.stringify(payload)),\r\n                    done: false,\r\n                    nodeInfoString: buildNodeInfoString(this),\r\n                });\r\n            }\r\n\r\n            return this.ping(payload);\r\n\r\n        } else if (payload.op === 'r' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'recv',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'final node ' + this.id + ' received payload',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            this.clock[this.id]++; // increment once more because we're sending a message back\r\n            payload.requestClock = payload.sourceClock;\r\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\r\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\r\n\r\n            let msg = 'itemId ' + payload.itemId + ' was not found in database';\r\n\r\n            for (let i = 0; i < this.dataRange.length; i++) {\r\n                if (payload.itemId >= this.dataRange[i].start && payload.itemId <= this.dataRange[i].end) {\r\n                    msg = 'successful';\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let item = this.dataSlice.get(payload.itemId);\r\n\r\n            // item is a pointer. we need to deep copy it just in case \r\n            // another operation mutates item while this response is en route\r\n            item = JSON.parse(JSON.stringify(item));\r\n            \r\n            payload.msg = msg;\r\n            payload.item = item;\r\n            payload.dir = 'in';\r\n            payload.id = payload.path[--payload.pathIndex];\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                msg: 'final node ' + this.id + ' sending read response',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            return this.ping(payload);\r\n        \r\n        } else if (payload.op === 'u' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'recv',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'final node ' + this.id + ' received payload',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            let msg = 'itemId ' + payload.itemId + ' was not found in database';\r\n\r\n            for (let i = 0; i < this.dataRange.length; i++) {\r\n                if (payload.itemId >= this.dataRange[i].start && payload.itemId <= this.dataRange[i].end) {\r\n                    msg = 'successful';\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let dbItem = this.dataSlice.get(payload.itemId);\r\n            const doIncomingWrite = this.sourceHasUpdatedVectorClock(payload);\r\n\r\n            if (dbItem && (doIncomingWrite || payload.item.deleted)) {\r\n                let changes = payload.item;\r\n\r\n                for (const key of Object.keys(changes)) {\r\n                    if (key === 'deleted' && changes[key] === true) {\r\n                        dbItem = {deleted: true};\r\n                        break;\r\n                    }\r\n                    dbItem[key] = changes[key];\r\n                }\r\n                this.dataSlice.set(payload.itemId, dbItem);\r\n            }\r\n\r\n            if ((doIncomingWrite === false) && (!!payload.item.deleted === false)) {\r\n                msg = 'this write has already been overwritten. Returning what is currently in the database';\r\n            }\r\n\r\n            if (doIncomingWrite) {\r\n                this.mostRecentWrite = {\r\n                    clock: JSON.parse(JSON.stringify(payload.sourceClock)), // yikes, gotta copy this instead of using pointers\r\n                    itemId: payload.itemId,\r\n                    item: payload.item\r\n                };\r\n            }\r\n\r\n            // item is a pointer. we need to deep copy it just in case \r\n            // another operation mutates item while this response is en route\r\n            dbItem = JSON.parse(JSON.stringify(dbItem));\r\n\r\n            payload.msg = msg;\r\n            payload.item = dbItem;\r\n            payload.dir = 'in';\r\n            payload.id = payload.path[--payload.pathIndex];\r\n\r\n            this.clock[this.id]++;\r\n            payload.requestClock = payload.sourceClock;\r\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                msg: 'final node ' + this.id + ' sending update response',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            return this.ping(payload);\r\n\r\n        } else if (payload.op === 'i' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'recv',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'final node ' + this.id + ' received payload',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n            \r\n            // increments at the bottom\r\n\r\n            let broadcast = 'successful';\r\n            let retItem = {};\r\n\r\n            let changedDataRange: DataRange = undefined;\r\n\r\n            if (!payload.hasOwnProperty('newRange')) {\r\n                let highestItemId = 0;\r\n\r\n                this.dataSlice.forEach( (val, key) => {\r\n                    if (key > highestItemId) {\r\n                        highestItemId = key;\r\n                    }\r\n                });\r\n\r\n                payload.itemId  = highestItemId + 1;\r\n\r\n                this.dataSlice.set(payload.itemId, payload.item);\r\n                retItem = this.dataSlice.get(payload.itemId);\r\n                this.dataRange.forEach( range => {\r\n                    if (payload.itemId === range.end) {\r\n                        range.full = true;\r\n                        broadcast = 'range that starts at ' + range.start + ' is now full';\r\n\r\n                        changedDataRange = range;\r\n                    }\r\n                });\r\n\r\n            } else { // we're creating a new data range on this node\r\n                this.dataRange.push(payload.newRange);\r\n                this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\r\n                \r\n                payload.itemId = payload.newRange.start;\r\n                this.dataSlice.set(payload.itemId, payload.item);\r\n                retItem = this.dataSlice.get(payload.itemId);\r\n                broadcast = 'new range ' + JSON.stringify(payload.newRange, null, '</br>') + ' added';\r\n\r\n                changedDataRange = payload.newRange;\r\n            }\r\n\r\n            /**\r\n             * if we filled the current range or created a new one,\r\n             * let all other nodes know\r\n             */\r\n            if (changedDataRange) {\r\n                const connMap = this.shortestPath(0, true);\r\n                let realConnMap: Map<number, {distance: any, visited: boolean, path: number[]}>;\r\n                if (connMap instanceof Map) {\r\n                    realConnMap = connMap;\r\n                }\r\n\r\n                realConnMap.forEach( (val, key) => {\r\n                    if (key !== this.id && key !== payload.path[0]) {\r\n                        this.clock[this.id]++;\r\n                        const tempClock = JSON.parse(JSON.stringify(this.clock));\r\n                        let pathIndex = val.path[0] === this.id ? 1 : 0;\r\n\r\n                        const payload = {\r\n                            id: val.path[pathIndex],\r\n                            path: val.path,\r\n                            pathIndex: pathIndex,\r\n                            op: 'updateDataRange',\r\n                            newRange: changedDataRange,\r\n                            dir: 'out',\r\n                            sourceClock: tempClock,\r\n                            instrId: key + 99, \r\n                        };\r\n\r\n                        // emit event, but it's too complicated :(\r\n                        // this.eventStream.next({\r\n                        //     instrId: payload.instrId,\r\n                        //     nodeId: this.id,\r\n                        //     dir: 'send',\r\n                        //     msg: 'node ' + this.id + ' emitting initial payload for updateDataRange op',\r\n                        //     payload: JSON.parse(JSON.stringify(payload)),\r\n                        //     done: false,\r\n                        //     nodeInfoString: buildNodeInfoString(this),\r\n                        // });\r\n    \r\n                        this.ping(payload);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // item is a pointer. we need to deep copy it just in case \r\n            // another operation mutates item while this response is en route\r\n            retItem = JSON.parse(JSON.stringify(retItem));\r\n\r\n            // changed dataRange must be updated immediately on sending node in case it is sending another insert\r\n            // this doesn't cover the case when the source node incorrectly sends multiple inserts to this node\r\n            // when it should have only sent one insert to this node\r\n            payload.newRange = changedDataRange;\r\n\r\n            payload.msg = broadcast;\r\n            payload.item = retItem;\r\n            payload.dir = 'in';\r\n            payload.id = payload.path[--payload.pathIndex];\r\n\r\n            this.clock[this.id]++;\r\n            payload.requestClock = payload.sourceClock;\r\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\r\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'final node ' + this.id + ' sending insert response',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            return this.ping(payload);\r\n\r\n        } else if (payload.op === 'updateDataRange' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\r\n\r\n            this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\r\n\r\n            // emit event, but it's too complicated :(\r\n            // this.eventStream.next({\r\n            //     instrId: payload.instrId,\r\n            //     nodeId: this.id,\r\n            //     dir: 'recv',\r\n            //     networkLatency: networkLatency,\r\n            //     additionalDelay: additionalDelay,\r\n            //     msg: 'final node ' + this.id + ' received updateDataRange payload',\r\n            //     payload: JSON.parse(JSON.stringify(payload)),\r\n            //     done: false,\r\n            //     nodeInfoString: buildNodeInfoString(this),\r\n            // });\r\n            \r\n            return Promise.resolve({msg: 'updateDataRange on node id ' + this.id + ' done'});\r\n\r\n        } else if (payload.pathIndex <= 0 && payload.newRange) {\r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\r\n        \r\n            this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'recv',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'original node ' + this.id + ' received response',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            return Promise.resolve(payload);\r\n\r\n        } else if (payload.pathIndex <= 0) {\r\n            \r\n            this.syncAndIncrementClock(payload.sourceClock);\r\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'recv',\r\n                networkLatency: networkLatency,\r\n                additionalDelay: additionalDelay,\r\n                msg: 'original node ' + this.id + ' received response',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });            \r\n        \r\n            return Promise.resolve(payload);\r\n\r\n        } else {\r\n            return Promise.resolve(\"unknown\");\r\n        }\r\n\r\n    };\r\n\r\n    constructor(id: number, eventStream?: Subject<any>) {\r\n        this.id = id;\r\n\r\n        if (eventStream) {\r\n            this.eventStream = eventStream;\r\n        }\r\n    }\r\n\r\n    ping(payload: payload, additionalDelay?: number): Promise<Object> {\r\n\r\n        if (this.id < 0) {\r\n            return Promise.resolve('node: I am an invalid node!')\r\n\r\n        } else if (payload.path.length === 1 && payload.path[0] === this.id) {\r\n            payload.pathIndex = 0;\r\n            return this.processPayload(payload, 0, 0);\r\n        }\r\n\r\n        const nodeToPing = this.nodeMap.get(payload.id);\r\n        if (!nodeToPing) {\r\n            return Promise.resolve('invalid node id requested');\r\n        }\r\n\r\n        if (!additionalDelay) {\r\n            additionalDelay = 0;\r\n        }\r\n\r\n        return this.connections.includes(payload.id) ? nodeToPing.respond(payload, additionalDelay) : Promise.resolve(\"node: this node is not connected to id \" + payload.id)\r\n    }\r\n\r\n    respond(payload: payload, additionalDelay?: number): Promise<Object> {\r\n        return new Promise<Object>((resolve) => {\r\n            const networkLatency = this.delay();\r\n            const totalDelay = additionalDelay ? networkLatency + additionalDelay : networkLatency\r\n\r\n            setTimeout(() => {\r\n                resolve({networkLatency: networkLatency, additionalDelay: additionalDelay});\r\n            }, totalDelay);\r\n        })\r\n        .then(\r\n            (val) => this.processPayload(payload, (val as any).networkLatency, (val as any).additionalDelay)\r\n        );\r\n    }\r\n\r\n    // set data that nodes will need to know about other nodes\r\n    // includes node object metadata (not the actual data) and data range information\r\n    // (which node has which range of id's? Is that range full?)\r\n    findAllNodes(originalNode: node, network: Network): void {\r\n        this.connections.forEach(id => {\r\n            let newNode = network.getNode(id);\r\n            if (newNode.id >= 0 && !originalNode.nodeMap.has(newNode.id)) {\r\n                originalNode.nodeMap.set(newNode.id, newNode); // find all other nodes\r\n                newNode.dataRange.forEach( range => { // find all other dataRanges\r\n                    originalNode.dataRangeOrderedMap.set(range.start, range);\r\n                });\r\n                originalNode.clock.push(0); // initialize vector clock\r\n                newNode.findAllNodes(originalNode, network);\r\n            } else {\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    read(itemId: number | Object, additionalDelay?: number, instrId?: number): Promise<Object> {\r\n        this.clock[this.id]++;\r\n        // console.log('node id ' + this.id + ' sending read: ' + this.clock);\r\n\r\n        if (typeof itemId === 'number') {\r\n            let targetNode = -1;\r\n\r\n            // If we didn't have dataRange start values mapped to node id's, this would be n-squared\r\n            // because for each node, we need to check each data range (and nodes can have multiple data ranges)\r\n\r\n            // TODO: make binary search instead of linear\r\n            const highest = this.dataRangeOrderedMap.keysInOrder.length - 1;\r\n            for (let i = highest; i >= 0; i--) {\r\n                let currDataRangeStart = this.dataRangeOrderedMap.keysInOrder[i];\r\n                if (currDataRangeStart <= itemId) {\r\n                    if (this.dataRangeOrderedMap.get(currDataRangeStart) === undefined) {\r\n                        targetNode = undefined;\r\n                    } else {\r\n                        targetNode = this.dataRangeOrderedMap.get(currDataRangeStart).nodeId;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (targetNode === undefined) {\r\n                return Promise.resolve({msg: 'requested id does not exist in db'});\r\n            }\r\n            \r\n            // get the shortest path\r\n            let prePath = this.shortestPath(targetNode, false);\r\n            let path: number[];\r\n            if (!(prePath instanceof Map)) {\r\n                path = prePath;\r\n            }\r\n\r\n            let pathIndex = path[0] === this.id ? 1 : 0;\r\n\r\n            const payload = {\r\n                id: path[pathIndex],\r\n                path: path,\r\n                pathIndex: pathIndex,\r\n                op: 'r',\r\n                itemId: itemId,\r\n                dir: 'out',\r\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\r\n                instrId: instrId\r\n            };\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                msg: 'node ' + this.id + ' emitting initial payload for read op',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n\r\n            return this.ping(payload, additionalDelay);\r\n        }\r\n\r\n        // else it's an object, non-index search\r\n\r\n        return Promise.resolve({result: 'unknown'});\r\n    }\r\n\r\n    update(itemId: number | Object, changes: Object, additionalDelay?: number, instrId?: number): Promise<Object> {\r\n        this.clock[this.id]++;\r\n        const updateOrDelete = (changes as any).deleted ? 'delete' : 'update';\r\n\r\n        if (typeof itemId === 'number') {\r\n            let targetNode = -1;\r\n\r\n            // If we didn't have dataRange start values mapped to node id's, this would be n-squared\r\n            // because for each node, we need to check each data range (and nodes can have multiple data ranges)\r\n\r\n            // TODO: make binary search instead of linear\r\n            const highest = this.dataRangeOrderedMap.keysInOrder.length - 1;\r\n            for (let i = highest; i >= 0; i--) {\r\n                let currDataRangeStart = this.dataRangeOrderedMap.keysInOrder[i];\r\n                if (currDataRangeStart <= itemId) {\r\n                    if (this.dataRangeOrderedMap.get(currDataRangeStart) === undefined) {\r\n                        targetNode = undefined;\r\n                    } else {\r\n                        targetNode = this.dataRangeOrderedMap.get(currDataRangeStart).nodeId;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (targetNode === undefined) {\r\n                return Promise.resolve({msg: 'requested id does not exist in db'});\r\n            }\r\n            \r\n            // get the shortest path\r\n            let prePath = this.shortestPath(targetNode, false);\r\n            let path: number[];\r\n            if (!(prePath instanceof Map)) {\r\n                path = prePath;\r\n            }\r\n\r\n            let pathIndex = path[0] === this.id ? 1 : 0;\r\n\r\n            const payload = {\r\n                id: path[pathIndex],\r\n                path: path,\r\n                pathIndex: pathIndex,\r\n                op: 'u',\r\n                itemId: itemId,\r\n                item: changes,\r\n                dir: 'out',\r\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\r\n                instrId: instrId\r\n            };\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                msg: 'node ' + this.id + ' emitting initial payload for ' + updateOrDelete + ' op',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n            \r\n            return this.ping(payload, additionalDelay);\r\n        }\r\n\r\n        // else it's an object, non-index search\r\n\r\n        return Promise.resolve({result: 'unknown'});\r\n    }\r\n\r\n    insert(item: Object | Object[], additionalDelay?: number, instrId?: number): Promise<Object> {\r\n        this.clock[this.id]++;\r\n        // console.log('node id ' + this.id + ' sending insert: ' + this.clock);\r\n\r\n\r\n        let targetNode = -1;\r\n\r\n        /**\r\n        * search all nodes for highest data range\r\n        * if there is room in that data range, simply add the data to the node that owns the highest data range\r\n        */\r\n        \r\n        const highest = this.dataRangeOrderedMap.keysInOrder[this.dataRangeOrderedMap.keysInOrder.length - 1];\r\n        const highestRange = this.dataRangeOrderedMap.get(highest);\r\n        if (highestRange && !highestRange.full) {\r\n            targetNode = highestRange.nodeId;\r\n            // get the shortest path\r\n            let prePath = this.shortestPath(targetNode, false);\r\n            let path: number[];\r\n            if (!(prePath instanceof Map)) {\r\n                path = prePath;\r\n            }\r\n \r\n            let pathIndex = path[0] === this.id ? 1 : 0;\r\n\r\n            const payload = {\r\n                id: path[pathIndex],\r\n                path: path,\r\n                pathIndex: pathIndex,\r\n                op: 'i',\r\n                item: item,\r\n                dir: 'out',\r\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\r\n                instrId: instrId\r\n            };\r\n\r\n            // emit event\r\n            this.eventStream.next({\r\n                instrId: payload.instrId,\r\n                nodeId: this.id,\r\n                dir: 'send',\r\n                msg: 'node ' + this.id + ' emitting initial payload for insert op',\r\n                payload: JSON.parse(JSON.stringify(payload)),\r\n                done: false,\r\n                nodeInfoString: buildNodeInfoString(this),\r\n            });\r\n             \r\n            return this.ping(payload, additionalDelay);\r\n        }\r\n\r\n        // else assign the new datarange to a node at random\r\n        // TODO: choose the node with the least number of data ranges, if there are multiple nodes then choose the one\r\n        // with the lowest id\r\n\r\n        let dataRangeToNode: [{numDataRange: number, nodeId: number}];\r\n\r\n        this.dataRangeOrderedMap.map.forEach( (currDataRange, key) => {\r\n\r\n            if (!dataRangeToNode) {\r\n                dataRangeToNode = [{numDataRange: 1, nodeId: currDataRange.nodeId}];\r\n    \r\n            } else if (!dataRangeToNode.find(val => val.nodeId === currDataRange.nodeId)) {\r\n                dataRangeToNode.push({numDataRange: 1, nodeId: currDataRange.nodeId});\r\n    \r\n            } else {\r\n                dataRangeToNode.find(val => val.nodeId === currDataRange.nodeId)\r\n                    .numDataRange++;\r\n            }\r\n        });\r\n\r\n        dataRangeToNode.sort((a, b) => a.numDataRange - b.numDataRange);\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < dataRangeToNode.length; i++) {\r\n            if (dataRangeToNode[i].numDataRange > dataRangeToNode[0].numDataRange) {\r\n                break;\r\n            }\r\n            count++;\r\n        }\r\n\r\n        const leastDataNodes = dataRangeToNode.splice(0, count);\r\n        \r\n        leastDataNodes.sort((a, b) => a.nodeId - b.nodeId);\r\n\r\n        targetNode = leastDataNodes[0].nodeId;\r\n\r\n        const newRange = new DataRange();\r\n        newRange.start = highestRange.end + 1;\r\n        newRange.end = newRange.start + this.dataRange[0].end - this.dataRange[0].start;\r\n        newRange.full = false;\r\n        newRange.nodeId = targetNode;\r\n\r\n        // get the shortest path\r\n        let prePath = this.shortestPath(targetNode, false);\r\n        let path: number[];\r\n        if (!(prePath instanceof Map)) {\r\n            path = prePath;\r\n        }\r\n\r\n        let pathIndex = path[0] === this.id ? 1 : 0;\r\n\r\n        const payload = {\r\n            id: path[pathIndex],\r\n            path: path,\r\n            pathIndex: pathIndex,\r\n            op: 'i',\r\n            item: item,\r\n            newRange: newRange,\r\n            dir: 'out',\r\n            sourceClock: JSON.parse(JSON.stringify(this.clock)),\r\n            instrId: instrId\r\n        };\r\n\r\n        // emit event\r\n        this.eventStream.next({\r\n            instrId: payload.instrId,\r\n            nodeId: this.id,\r\n            dir: 'send',\r\n            msg: 'node ' + this.id + ' emitting initial payload for insert op',\r\n            payload: JSON.parse(JSON.stringify(payload)),\r\n            done: false,\r\n            nodeInfoString: buildNodeInfoString(this),\r\n        });\r\n\r\n        return this.ping(payload, additionalDelay);\r\n    }\r\n\r\n    delete(itemId: number | Object, additionalDelay?: number, instrId?: number): Promise<Object> {\r\n        return this.update(itemId, {deleted: true}, additionalDelay, instrId);\r\n    }\r\n\r\n    recover() {\r\n        // if ping hits a node that no longer exists, use parity (one parity node per 2 data nodes)\r\n        // to recover the lost node\r\n\r\n        // with this method, 1 out of every 3 nodes can fail and db is 1.33x the size without safety\r\n        // with straight up replication, you can lose 1 out of every 2 nodes but the db is 2x the size\r\n    }\r\n\r\n    retry() {\r\n        // if any operation fails at any point in the path, track the node where it failed and retry 2 or 3 times\r\n        // if the same node failed all of those times, kill it and recover!\r\n    }\r\n\r\n    shortestPath(targetId: number, returnConnMap?: boolean): number[] | Map<number, {distance: any, visited: boolean, path: number[]}> {\r\n        const connMap: Map<number, {distance: any, visited: boolean, path: number[]}> = new Map();\r\n\r\n        this.nodeMap.forEach( node => {\r\n            if (node.id === this.id) {\r\n                connMap.set(node.id, {distance: 0, visited: true, path: [node.id]});\r\n            } else {\r\n                connMap.set(node.id, {distance: undefined, visited: false, path: []});\r\n            }\r\n        });\r\n\r\n        const jobQ = [this.id];\r\n        while (jobQ.length > 0) {\r\n\r\n            // pop current node\r\n            const currId = jobQ.splice(0, 1)[0];\r\n            \r\n            const preCurrConn = connMap.get(currId);\r\n            let currConn: {distance: any, visited: boolean, path: number[]} = {distance: -1, visited: false, path: []}\r\n            if (!!preCurrConn) {\r\n                currConn = preCurrConn;\r\n            }\r\n\r\n            const preCurrNode = this.nodeMap.get(currId);\r\n            let currNode: node = new node(-1)\r\n            if (!!preCurrNode) {\r\n                currNode = preCurrNode;\r\n            }\r\n\r\n            // add connections to jobQ for BFS order\r\n            currNode.connections.forEach( id => {\r\n                const nextConn = connMap.get(id);\r\n                if (!!nextConn && !nextConn.visited) {\r\n                    nextConn.distance = currConn.distance + 1;\r\n                    nextConn.path = currConn.path.concat([id]);\r\n                    jobQ.push(id);\r\n                }\r\n            });\r\n\r\n            // mark currConn as visited\r\n            currConn.visited = true;\r\n            if (!returnConnMap && currId === targetId) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (returnConnMap) {\r\n            return connMap;\r\n        } else {\r\n            const preRet = connMap.get(targetId);\r\n            let ret: number[] = [];\r\n            if (!!preRet) {\r\n                ret = preRet.path;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    delay(): number {\r\n        return Math.round(Math.random() * this.latency);\r\n    }\r\n\r\n    syncAndIncrementClock(sourceClock: number[]): void {\r\n        sourceClock.forEach( (val, i) => {\r\n            if (val > this.clock[i]) {\r\n                this.clock[i] = val;\r\n            }\r\n        });\r\n        this.clock[this.id]++;\r\n    }\r\n\r\n    sourceHasUpdatedVectorClock(payload: payload): boolean {\r\n\r\n        // if the source/request vector clock is updated, we will do the write\r\n        // if the source/request vector clock is behind our most recent write,\r\n        // we will ignore the incoming write\r\n        let doIncomingWrite = false;\r\n\r\n        if (this.mostRecentWrite === undefined) {\r\n            // console.log('VC: returning true because this is the first write');\r\n            return true;\r\n        }\r\n        \r\n\r\n        // console.log('inside VC stuff');\r\n        // console.log('mostRecentWrite: ' + JSON.stringify(this.mostRecentWrite));\r\n        // console.log('payload sourceClock: ' + JSON.stringify(payload.sourceClock));\r\n\r\n        for ( let i = 0; i < this.mostRecentWrite.clock.length; i++) {\r\n            if (this.mostRecentWrite.clock[i] < payload.sourceClock[i]) {\r\n                // then the source is either concurrent with or more updated than our last write\r\n                // therefore, we will do this write\r\n                doIncomingWrite = true;\r\n                break;\r\n            }\r\n        } // else, we won't do this write because it is behind the most recent write. It is logically in the past\r\n\r\n        // console.log('doIncomingWrite is ' + doIncomingWrite);\r\n        return doIncomingWrite;\r\n    }\r\n\r\n    emitEvent(event: any): void {\r\n        if (this.eventStream) {\r\n            this.eventStream.next(event);\r\n        }\r\n    }\r\n}","import node from \"./node\";\r\nimport DataRange from \"./DataRange\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nexport default class Network {\r\n    nodeMap: Map<number, node> = new Map();\r\n    numNodes: number = undefined;\r\n    eventStream: Subject<any> = undefined;\r\n\r\n    // generates a biased graph, but apparently it's similar to real networks\r\n    // TODO: generate a truly random graph\r\n    constructor(numNodes: number, inputDataRangeSize?: number, inputEventStream?: Subject<any>) {\r\n\r\n        const dataRangeSize = inputDataRangeSize ? inputDataRangeSize : 5;\r\n        this.eventStream = inputEventStream ? inputEventStream : new Subject<any>();\r\n\r\n        this.numNodes = numNodes;\r\n\r\n        // populate nodes\r\n        for (let i = 0; i < numNodes; i++) {\r\n            let n = new node(i, this.eventStream);\r\n\r\n            if (i > 0) {\r\n                let connectionsToPush = [];\r\n    \r\n                // push a random first connection\r\n                connectionsToPush.push(\r\n                    Math.round(Math.random() * (this.nodeMap.size - 1))\r\n                );\r\n\r\n                // 50% chance of having second connection\r\n                // if ( i > 1 && Math.round(Math.random())) {\r\n                //     connectionsToPush.push(\r\n                //         Math.round(Math.random() * (this.nodeMap.size - 1))\r\n                //     );\r\n                // }\r\n\r\n                connectionsToPush.forEach( conn => {\r\n                    n.connections.push(conn);\r\n\r\n                    // non-directed graph, directed wouldn't make sense for real networks\r\n                    const connNode = this.nodeMap.get(conn);\r\n                    if (connNode.connections.indexOf(n.id) < 0) {\r\n                        connNode.connections.push(n.id);  \r\n                    }\r\n                });\r\n            }\r\n            \r\n            // populate node's initial data range metadata for use by other nodes on the network\r\n            let initialSlice = i * dataRangeSize;\r\n\r\n            const initialRange = new DataRange();\r\n            initialRange.nodeId = n.id;\r\n            initialRange.start = initialSlice;\r\n            initialRange.end = initialSlice + dataRangeSize - 1;\r\n            initialRange.full = true;\r\n            n.dataRange.push(initialRange);\r\n\r\n            // populate node's initial data\r\n            for (let i = 0; i < dataRangeSize; i++) {\r\n                n.dataSlice.set(initialSlice + i, {fruit: this.getRandomFruit(initialSlice + i)});\r\n            }\r\n\r\n            this.nodeMap.set(n.id, n);\r\n        }\r\n\r\n        // after all nodes are created, instruct all nodes to find each other\r\n        this.nodeMap.forEach(node => {\r\n            node.findAllNodes(node, this);\r\n        });\r\n    }\r\n\r\n    getNode(id: number): node {\r\n        let ret = this.nodeMap.get(id);\r\n        return !!ret ? ret : new node(-1);\r\n    }\r\n\r\n    getRandomNode(): node {\r\n        let ret = this.nodeMap.get(Math.round(Math.random() * (this.nodeMap.size - 1)));\r\n        if (ret === undefined) {\r\n            console.log('network: getRandomNode failed');\r\n        }\r\n        return !!ret ? ret : new node(-1);\r\n    }\r\n\r\n    getRandomFruit(num: number): string {\r\n        const rand = Math.random();\r\n        let f: string;\r\n\r\n        if (rand < 0.1) {\r\n            f = 'apple';\r\n        } else if (rand < 0.2) {\r\n            f = 'banana';\r\n        } else if (rand < 0.3) {\r\n            f = 'cherry';\r\n        } else if (rand < 0.4) {\r\n            f = 'strawberry';\r\n        } else if (rand < 0.5) {\r\n            f = 'pineapple';\r\n        } else if (rand < 0.6) {\r\n            f = 'tomato';\r\n        } else if (rand < 0.7) {\r\n            f = 'tomahhto';\r\n        } else if (rand < 0.8) {\r\n            f = 'passionfruit';\r\n        } else if (rand < 0.9) {\r\n            f = 'grapefruit';\r\n        } else if (rand < 0.95) {\r\n            f = 'dragonfruit';\r\n        } else {\r\n            f = 'a super expensive Japanese melon';\r\n        }\r\n\r\n        return f;\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Network from \"../../model/Network\";\r\nimport { Instruction, interpretOneCommand } from \"../../util/interpret\";\r\nimport {Subject, Subscription} from 'rxjs';\r\n\r\ninterface ApiProps {\r\n    numNodes?: number,\r\n    network: Network,\r\n    setNetwork: React.Dispatch<React.SetStateAction<Network>>,\r\n    sentInstructions: Instruction[][],\r\n    setApiResponse: React.Dispatch<React.SetStateAction<Promise<any>>>,\r\n    simFinishedExecuting: boolean;\r\n}\r\n\r\nconst Api: React.FunctionComponent<ApiProps> = (props) => {\r\n\r\n    const [ eventStream ] = useState(new Subject<any>());\r\n    const [ emittedEvents, setEmittedEvents ] = useState([]);\r\n    const [ apiFinishedExecuting, setApiFinishedExecuting ] = useState(false);\r\n\r\n    useEffect( () => {\r\n        props.setNetwork(generateNetwork(10));\r\n    }, []);\r\n\r\n    const generateNetwork = (numNodes: number) => {\r\n        return new Network(numNodes, 3, eventStream);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // don't execute more backend stuff until the sim is done\r\n        if (!props.sentInstructions || props.simFinishedExecuting === false) {\r\n            return;\r\n        }\r\n\r\n        const subscription = eventStream.subscribe((event) => { emittedEvents.push(event) });\r\n        executeAllCommands(props.sentInstructions, 0, subscription);\r\n\r\n        /** \r\n         node 0 read 5\r\n         node 0 read 6\r\n\r\n         in-order\r\n         node 0 write 7 {\"hello\": \"hello!\"}\r\n         node 0 write 7 {\"hello\": \"second edit!\"}\r\n\r\n         n 0 u 6 {\"hello\":\"hello\"}\r\n         n 0 r 6\r\n         \r\n         in-order\r\n         n 0 d 6\r\n        */\r\n\r\n    }, [props.sentInstructions]);\r\n\r\n    useEffect( () => {\r\n        if (!apiFinishedExecuting) {\r\n            return;\r\n        }\r\n        props.setApiResponse(JSON.parse(JSON.stringify(emittedEvents)));\r\n\r\n        setEmittedEvents([]);\r\n        setApiFinishedExecuting(false);\r\n        \r\n    }, [apiFinishedExecuting]);\r\n\r\n\r\n    const executeAllCommands = (instrLists: Instruction[][], index: number, subs: Subscription) => {\r\n\r\n        if (index === instrLists.length) {\r\n            console.log('completed all commands!');\r\n            console.log(props.sentInstructions);\r\n\r\n            subs.unsubscribe();\r\n            setApiFinishedExecuting(true);\r\n\r\n            return {done: true};\r\n        }\r\n\r\n        const currList = instrLists[index];\r\n        const totalInList = currList.length;\r\n        let numCompletedInList = 0;\r\n\r\n        // all commands in this single block/list execute concurrently, but we only execute the next block/list\r\n        // when all commands in the current block/list resolve. This preserves the normal vs in-order execution methods\r\n        for (let i = 0; i < currList.length; i++) {\r\n\r\n            const originalInstr = currList[i];\r\n            const response = interpretOneCommand(originalInstr.instrId, originalInstr.text, true, props.network);\r\n            if (response instanceof Promise) {\r\n                response.then( (res) => {\r\n                    numCompletedInList++;\r\n\r\n                    originalInstr.res = res;\r\n                    // console.log('instr ' + originalInstr.instrId + ' completed');\r\n\r\n                    if (numCompletedInList === totalInList) {\r\n                        // console.log('completed this list/block!');\r\n                        return executeAllCommands(instrLists, ++index, subs);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return ( <></> ); // nothing, this component's only purpose is to simulate an api\r\n};\r\n\r\nexport default Api;","import React, { useEffect, useState } from 'react';\r\nimport './NavAndMenu.css';\r\nimport menu from '../../resource/menu.svg';\r\n\r\n\r\ninterface MenuProps {\r\n    \r\n}\r\n// \r\n// tut => introduction\r\n// walkthrough (enter command, tap node for clock, tap payload)\r\n// example commands\r\nconst Menu: React.FunctionComponent<MenuProps> = (props) => {\r\n    \r\n    const [ menuClasses, setMenuClasses ] = useState(['menu', 'overlay']);\r\n    const [ menuContents, setMenuContents ] = useState( 'initial-contents' );\r\n\r\n    const initialContents = (\r\n        <ul id=\"initial-contents\" className='initial-contents'>\r\n            <li id='tutorial-li'\r\n                onClick={() => {\r\n                    setMenuContents('tutorial-contents');\r\n                    setMenuClasses(['menu menu-full', 'overlay overlay-active']);\r\n\r\n                    if (document.getElementById('tutorial').classList.length < 2) {\r\n                        document.getElementById('tutorial').classList.add('display-none');\r\n                    }\r\n                }}\r\n            ><h2>welcome</h2></li>\r\n            <li onClick={() => {\r\n                setMenuContents('example-contents');\r\n                setMenuClasses(['menu menu-full', 'overlay overlay-active']);\r\n            }}><h2>example commands</h2></li>\r\n            <li onClick={() => {\r\n                setMenuContents('about-contents');\r\n                setMenuClasses(['menu menu-full', 'overlay overlay-active']);\r\n            }}><h2>motivation</h2></li>\r\n        </ul>\r\n    );\r\n\r\n    const getMsgShowcase = (o: {\r\n        id: string,\r\n        label: string,\r\n        bgc: string,\r\n        animation: string,\r\n        classes?: string\r\n    }) => {\r\n        return <div \r\n            id        ={o.id}\r\n            className ={o.classes ? 'msg-showcase ' + o.classes : 'msg-showcase'}\r\n            style     ={{backgroundColor: o.bgc, animation: o.animation}}\r\n        >\r\n            {o.label}\r\n        </div>  \r\n    };\r\n\r\n    const backToMenuBtn = (\r\n        <span \r\n            className='back-to-menu'\r\n            onClick={() => {\r\n                setMenuContents('initial-contents');\r\n                setMenuClasses(['menu menu-active', 'overlay overlay-active']);\r\n                document.getElementById('root').style.removeProperty('height');\r\n                document.getElementById('app').style.removeProperty('height');\r\n            }}\r\n        >back to menu</span>\r\n    );\r\n    \r\n    const tutorialContents = ( <>\r\n        {backToMenuBtn}\r\n\r\n        <div id=\"tutorial-wrapper\" className=\"menu-content-wrapper\">\r\n            <h1 id=\"tutorial-contents-hero\" className=\"contents-hero tutorial-first-fade\">\r\n                Welcome.\r\n            </h1>\r\n            <p id=\"tutorial-second-fade\" className=\"tutorial-second-fade\">\r\n                You might have heard about Lamport clocks, but what the heck are they actually used for? Keep reading to find out.\r\n            </p>\r\n\r\n            {window.innerWidth > 1195 ? \r\n                <p className=\"tutorial-second-fade\">\r\n                    *This app was designed on mobile first. \r\n                    Feel free to visit on your phone as well - \r\n                    this page is especially suited for vertical scrolling :)\r\n                </p>\r\n                :\r\n                ''}\r\n\r\n            <ul id=\"tutorial-third-fade\" className=\"instrlist menulist tutorial-third-fade\">\r\n                <li className=\"first\">\r\n                    <p>Node 1 is a node in our database.</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div id=\"s0n1\" className=\"dot-showcase\" style={{float: 'none'}}>1</div>\r\n                    </div>\r\n                </li>\r\n                \r\n                <li>\r\n                    <p>Let's send two write requests to the node, one after the other: w1 and w2.</p>\r\n                    <div className=\"showcase\">\r\n                        {getMsgShowcase({\r\n                            id: 's1w2',\r\n                            label: 'w2',\r\n                            bgc: 'rgba(24, 205, 250, 0.904)',\r\n                            animation: 's1 10s linear 8s infinite'\r\n                        })}\r\n                        {getMsgShowcase({\r\n                            id: 's1w1',\r\n                            label: 'w1',\r\n                            bgc: 'rgba(250, 235, 24, 0.904)',\r\n                            animation: 's1 10s linear 8s infinite'\r\n                        })}\r\n                        <div id=\"s1n1\" className=\"dot-showcase\">1</div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>w2 travels faster and completes first.</p>\r\n                    <div className=\"showcase\">\r\n                        {getMsgShowcase({\r\n                            id: 's2w2',\r\n                            label: 'w2',\r\n                            bgc: 'rgba(24, 205, 250, 0.904)',\r\n                            animation: 's2w2 10s linear 14s infinite'\r\n                        })}\r\n                        {getMsgShowcase({\r\n                            id: 's2w1',\r\n                            label: 'w1',\r\n                            bgc: 'rgba(250, 235, 24, 0.904)',\r\n                            animation: 's2w1 10s linear 14s infinite'\r\n                        })}\r\n                        <div id=\"s2n1\" className=\"dot-showcase\">1</div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>What happens when w1 arrives at the node after w2 already completed?</p>\r\n                    <p>The database will write w1, and end up with w1's value.</p>\r\n                    <div className=\"showcase showcase-3\">\r\n                        {getMsgShowcase({\r\n                            id: 's3w1',\r\n                            label: 'w1',\r\n                            bgc: 'rgba(250, 235, 24, 0.904)',\r\n                            animation: 's3w1 10s linear 18s infinite',\r\n                            classes: 'msg-showcase-3 s3n1',\r\n                        })}\r\n                        {getMsgShowcase({\r\n                            id: 's3w2',\r\n                            label: 'w2',\r\n                            bgc: 'rgba(24, 205, 250, 0.904)',\r\n                            animation: 's3w2 10s linear 18s infinite',\r\n                            classes: 'msg-showcase-3 s3n1',\r\n                        })}\r\n                        <div id=\"s3n3\" className=\"dot-showcase\" style={{backgroundColor: 'rgba(250, 24, 24, 0.904)', color: '#fff'}}>w1</div>\r\n                        <div id=\"s3n2\" className=\"dot-showcase s3n2\" style={{backgroundColor: 'rgba(24, 205, 250, 0.904)', animation: 's3n2 10s linear 18s infinite'}}>w2</div>\r\n                        <div id=\"s3n1\" className=\"dot-showcase s3n1\" style={{animation: 's3n1 10s linear 18s infinite'}}>1</div>\r\n                    </div>\r\n                    <p style={{marginTop: '15px'}}>Seems backwards right? w2 was sent most recently so the database should end up with w2's value.</p>\r\n                </li>\r\n                <li>\r\n                    <p>To solve this problem, each request is sent with a <strong>clock</strong>. It's just a number that counts up for each request sent and received.</p>\r\n                    <p>The clocks tell us that we sent w1 at time 5. We sent w2 right after, at time 6.</p>\r\n\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            {getMsgShowcase({\r\n                                id: 's4w1',\r\n                                label: 'w1',\r\n                                bgc: 'rgba(250, 235, 24, 0.904)',\r\n                                animation: '',\r\n                                classes: 'margin-auto display-block'\r\n                            })}\r\n                            <div className=\"tut-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half float-right\">\r\n                            {getMsgShowcase({\r\n                                id: 's4w2',\r\n                                label: 'w2',\r\n                                bgc: 'rgba(24, 205, 250, 0.904)',\r\n                                animation: '',\r\n                                classes: 'margin-auto display-block'\r\n                            })}\r\n                            <div className=\"tut-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>The node receives w2 first, and it remembers that w2 was sent at time 6.</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>w2</div>\r\n                        <div className=\"tut-clock-label\">\r\n                            <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                            <br></br>\r\n                            <span style={{color: \"#18cdfa\"}}>[</span>\r\n                            <span style={{color: '#f1f5fd'}}> 6 </span>\r\n                            <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>The node then receives w1. w1's clock is \"behind\" w2's clock so the node doesn't execute w1.</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            {getMsgShowcase({\r\n                                id: 's4w1',\r\n                                label: 'w1',\r\n                                bgc: 'rgba(250, 235, 24, 0.904)',\r\n                                animation: '',\r\n                                classes: 'margin-auto display-block'\r\n                            })}\r\n                            <div className=\"tut-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half float-right\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>w2</div>\r\n                            <div className=\"tut-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{marginTop: '15px'}}>When w1 arrives, it has already been overwritten by the more recent operation w2.</p>\r\n                    <p><strong>This is how logical clocks are used in distributed systems.</strong></p>\r\n                </li>\r\n                \r\n                <li className=\"last\">\r\n                    <p>To see logical clocks in action, enter these commands into the console on the main page: </p>\r\n                    <div className=\"tut-clock-label\" style={{paddingLeft: '10px', paddingRight: '10px', textAlign: 'left'}}>\r\n                        <span style={{color: '#f1f5fd', display: 'block', marginBottom: '5px'}}>\r\n                            {'node 0 update item 15 {\"fruit\": \"apple\"} delay 5'}\r\n                        </span>\r\n                        <span style={{color: '#f1f5fd', display: 'block'}}>\r\n                            {'node 0 update item 15 {\"fruit\": \"kiwi\", \"secondEdit\":\"true\"}'}\r\n                        </span>\r\n                    </div>\r\n                    <p style={{marginTop: '15px'}}>To learn what else you can do with this database simulation, \r\n                        <span className=\"open-examples\" onClick={() => {\r\n                            document.getElementById('root').style.removeProperty('height');\r\n                            document.getElementById('app').style.removeProperty('height');\r\n                            setMenuContents('example-contents');\r\n                            try {\r\n                                document.getElementById('menu-close').scrollIntoView({ behavior: \"smooth\"});\r\n                            } catch (e) { // mobile safari does not support smooth scroll\r\n                                document.getElementById('menu-close').scrollIntoView();\r\n                            };\r\n\r\n                            // give the new menu contents some time to expand to new height then set app height to new height\r\n                            setTimeout( () => {\r\n                                document.getElementById('root').style.height = document.getElementById('menu').offsetHeight + 'px';\r\n                                document.getElementById('app').style.height = document.getElementById('menu').offsetHeight + 'px';\r\n                            }, 500);\r\n                                                          \r\n                        }}>{window.innerWidth > 1195 ? ' click here.' : ' tap here.'}</span>\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </>);\r\n\r\n    const exampleContents = (<>\r\n        {backToMenuBtn}\r\n        <div id=\"example-wrapper\" className=\"menu-content-wrapper\">\r\n            <h1 id=\"example-contents-hero\" className=\"contents-hero\">\r\n                Example Commands\r\n            </h1>\r\n            <ul id=\"example-list\" className=\"instrlist menulist extra-p-margin\">\r\n                <li className=\"first\">\r\n                    <p>All commands can be abbreviated.</p>\r\n                    <p>Read</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>node 0 read item 15</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>n 0 r 15</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>Insert</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'node 0 insert item {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'n 0 i {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>Update</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'node 0 update item 15 {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'n 0 u 15 {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>Delete</p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'node 0 delete item 15'}</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'n 0 d 15'}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>\r\n                        Execute multiple commands by entering them on different lines in the console.\r\n                    </p>\r\n                    <p>\r\n                        <strong>Normal</strong>, the default, sends at the same time.\r\n                    </p>\r\n                    <p>\r\n                        <strong>In-order</strong> guarantees that the first command finishes before the second.\r\n                    </p>\r\n                    <p>\r\n                        <strong>Delay</strong> delays the command by a number of seconds.\r\n                    </p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'node 0 update item 15 {\"secondEdit\":false} delay 5'}</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <span>{'node 0 update item 15 {\"secondEdit\":true}'}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <div>{'in-order'}</div>\r\n                                <div>{'node 0 read item 15 delay 5'}</div>\r\n                                <div>{'node 0 read item 15'}</div>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half\">\r\n                            <div className=\"ex-clock-label\">\r\n                                <div>{'normal'}</div>\r\n                                <div>{'node 0 read item 15'}</div>\r\n                                <div>{'node 0 update item 15 {\"secondEdit\":true}'}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <h3 style={{margin: '0'}}>Workflow</h3>\r\n                    <p>\r\n                        {window.innerWidth > 1195 ? 'Click ' : 'Tap '}\r\n                        each node to display its data.\r\n                    </p>\r\n                    <p>\r\n                        Note the nodeId that will send the request, and the itemId that will be read or modified.\r\n                    </p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: \"#f1ef43\"}}>node 0 info</span>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: '#f1ef43'}}>dataSlice: </span>\r\n                                <span style={{color: '#18cdfa'}}>[</span>\r\n                                <span style={{color: '#f0d976'}}>{'{'}</span>\r\n                                itemId: 15, ...\r\n                                <span style={{color: '#f0d976'}}>{'}'}</span>\r\n                                <span style={{color: '#18cdfa'}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <p>\r\n                        Type your command in the console.\r\n                    </p>\r\n                    <p>\r\n                        Try {window.innerWidth > 1195 ? ' clicking ' : ' tapping '}\r\n                        the node that will send the command. Notice how its clock changes during the command.\r\n                    </p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n                <li className=\"last\">\r\n                    <p>\r\n                        Hit the run button, and {window.innerWidth > 1195 ? ' click ' : ' tap '}\r\n                        the blue message that pops up to see its contents. Then hit the play button.\r\n                    </p>\r\n                    <p>\r\n                        Pause the sim before and after the message hits the target node that contains data to be read or modified.\r\n                         How does the the target node's clock change?\r\n                    </p>\r\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 0 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"half ex-half\">\r\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\r\n                            <div className=\"ex-clock-label\">\r\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\r\n                                <br></br>\r\n                                <span style={{color: \"#18cdfa\"}}>[</span>\r\n                                <span style={{color: '#f1f5fd'}}> 2 </span>\r\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </>);\r\n\r\n    const aboutContents = (<>\r\n        {backToMenuBtn}\r\n        <div id=\"about-wrapper\" className=\"menu-content-wrapper\">\r\n            <h1 id=\"about-contents-hero\" className=\"contents-hero\">\r\n                Motivation\r\n            </h1>\r\n            <ul id=\"about-list\" className=\"instrlist menulist extra-p-margin\">\r\n                <li className=\"first\" style={{paddingTop: '0'}}>\r\n                    <h3 style={{margin: '0'}}>Hello, I'm Aleexsan Adal.</h3>\r\n                    <p>\r\n                        I heard about Lamport clocks from this episode of <span>\r\n                            <a target=\"_blank\" href=\"https://softwareengineeringdaily.com/2019/09/18/distributed-databases-with-aly-cabral/\">\r\n                                Software Engineering Daily,\r\n                            </a>\r\n                        </span> and did some googling on the concept.\r\n                    </p>\r\n                    <p> \r\n                        Most articles explained what the algorithm is (just increment for messages sent and received), \r\n                        but none had a clear explanation of <strong>why a distributed system needs to track logical time.</strong>\r\n                    </p>\r\n                </li>\r\n                <li>\r\n                    <p>\r\n                        <strong>The system needs clocks to re-order operations that arrive out of order. </strong>\r\n                        You could send write 1 and then write 2, but they may arrive in the reverse order due to network delay.\r\n                    </p>\r\n                    <p>\r\n                        The clocks will show which op was sent first, so the database nodes must compare the arriving clock with the most recent write's clock\r\n                        to determine what to do.\r\n                    </p>\r\n                    <p>This is the example explained in the welcome section.</p>\r\n                </li>\r\n                <li>\r\n                    <p>\r\n                        I'm still bewildered that this example or similar ones aren't included in every explanation of logical clocks.\r\n                    </p>\r\n                </li>\r\n                <li className=\"last\">\r\n                    <p>    \r\n                        --- From a visual learner, supporting other visual learners. Those engineering textbooks sure aren't.\r\n                    </p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </>);\r\n\r\n    const openMenu = () => {\r\n\r\n        if (document.getElementById('tutorial-wrapper')) {\r\n            setMenuClasses(['menu menu-full', 'overlay overlay-active']);\r\n\r\n        } else {\r\n            setMenuClasses(['menu menu-active', 'overlay overlay-active']);\r\n        }\r\n    };\r\n\r\n    useEffect( () => {\r\n\r\n        // expand the height of the app so scrolling isn't weird af\r\n        if (menuClasses[0] === 'menu menu-full') {\r\n\r\n            document.getElementById('root').style.height = document.getElementById('menu').offsetHeight + 'px';\r\n            document.getElementById('app').style.height = document.getElementById('menu').offsetHeight + 'px';\r\n\r\n        // collapse the app height back to normal\r\n        } else if (menuClasses[0] === 'menu') {\r\n            if (menuContents !== 'initial-contents') {\r\n                setMenuContents('initial-contents');\r\n            }\r\n\r\n            document.getElementById('root').style.removeProperty('height');\r\n            document.getElementById('app').style.removeProperty('height');\r\n        }\r\n    }, [menuClasses]);\r\n\r\n    useEffect( () => {\r\n        if (menuContents === 'tutorial-contents') {\r\n\r\n            const msgWidth = document.getElementById('s1w1').offsetWidth;\r\n    \r\n            let w1ToEnd = document.getElementById('s1n1').getBoundingClientRect().left\r\n            - document.getElementById('s1w1').getBoundingClientRect().left\r\n            - msgWidth;\r\n\r\n            let w2ToEnd = document.getElementById('s1n1').getBoundingClientRect().left\r\n            - document.getElementById('s1w2').getBoundingClientRect().left\r\n            - msgWidth;\r\n            \r\n            // showcase 1\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s1 {\r\n                    25% { transform: translate(${w1ToEnd}px, 0); }\r\n                    100% { transform: translate(${w1ToEnd}px, 0); }\r\n                }`\r\n            );\r\n\r\n            //showcase 2\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s2w1 {\r\n                    25% { transform: translate(${w1ToEnd - msgWidth}px, 0); }\r\n                    100% { transform: translate(${w1ToEnd - msgWidth}px, 0); }\r\n                }`\r\n            );\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s2w2 {\r\n                    17% { transform: translate(${w2ToEnd}px, 0); }\r\n                    100% { transform: translate(${w2ToEnd}px, 0); }\r\n                }`\r\n            );\r\n\r\n            // showcase 3\r\n            // w1 and w2 have already been translated because\r\n            // node 2 and 3 were in the way so their final trans is msgWidth * 3 or 4\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s3w2 {\r\n                    30%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\r\n                    40%  { transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\r\n                    100% { transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\r\n                }`\r\n            );\r\n\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s3n1 {\r\n                    30%  { opacity: 1; }\r\n                    40%  { opacity: 0; }\r\n                    100% { opacity: 0; }\r\n                }`\r\n            );\r\n\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s3w1 {\r\n                    50%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\r\n                    60%  { opacity: 1; }\r\n                    70%  { transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\r\n                    100% { transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\r\n                }`\r\n            );\r\n\r\n            (document.styleSheets[0] as any).insertRule(\r\n                `@keyframes s3n2 {\r\n                    60%  { opacity: 1; }\r\n                    70%  { opacity: 0; }\r\n                    100% { opacity: 0; }\r\n                }`\r\n            );\r\n        }\r\n\r\n    }, [menuContents]);\r\n\r\n    const returnContents = (label: string) => {\r\n        if (label === 'tutorial-contents') {\r\n            return tutorialContents;\r\n        } else if (label === 'example-contents') {\r\n            return exampleContents;\r\n        } else if (label === 'about-contents') {\r\n            return aboutContents;\r\n        } else {\r\n            return initialContents;\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <header>\r\n            <nav id='nav'>\r\n            <div className=\"nav-title\">\r\n                dist-sim\r\n            </div>\r\n            <img id=\"menu-btn\" className=\"menu-btn\" src={menu} alt=\"Menu icon\" onClick={() => openMenu()}></img>\r\n            </nav>\r\n        </header>\r\n\r\n        <div id='overlay' className={menuClasses[1]} onClick={() => setMenuClasses(['menu', 'overlay'])}></div>\r\n        <div id='menu' className={menuClasses[0]}>\r\n            <svg onClick={() => setMenuClasses(['menu', 'overlay'])}\r\n                id=\"menu-close\" className=\"menu-close\" viewBox=\"0 0 20 20\">\r\n\t\t\t\t<path d=\"M10.185,1.417c-4.741,0-8.583,3.842-8.583,8.583c0,4.74,3.842,8.582,8.583,8.582S18.768,14.74,18.768,10C18.768,5.259,14.926,1.417,10.185,1.417 M10.185,17.68c-4.235,0-7.679-3.445-7.679-7.68c0-4.235,3.444-7.679,7.679-7.679S17.864,5.765,17.864,10C17.864,14.234,14.42,17.68,10.185,17.68 M10.824,10l2.842-2.844c0.178-0.176,0.178-0.46,0-0.637c-0.177-0.178-0.461-0.178-0.637,0l-2.844,2.841L7.341,6.52c-0.176-0.178-0.46-0.178-0.637,0c-0.178,0.176-0.178,0.461,0,0.637L9.546,10l-2.841,2.844c-0.178,0.176-0.178,0.461,0,0.637c0.178,0.178,0.459,0.178,0.637,0l2.844-2.841l2.844,2.841c0.178,0.178,0.459,0.178,0.637,0c0.178-0.176,0.178-0.461,0-0.637L10.824,10z\"></path>\r\n\t\t\t</svg>\r\n\r\n            {returnContents(menuContents)}\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Menu;","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nimport Sim from './component/Sim/Sim';\r\nimport Console from './component/Console/Console';\r\nimport Api from './component/Api/Api';\r\nimport NavAndMenu from './component/NavAndMenu/NavAndMenu';\r\n\r\nimport { Instruction, buildNodeInfoString, buildPayloadInfoString } from './util/interpret';\r\nimport Network from './model/Network';\r\nimport { ControlsProps } from './component/Controls/Controls';\r\n\r\nconst App: React.FC = () => {\r\n    \r\n  // this needs to be a pointer or the tsx element will just do a primitive string copy and won't receive changes\r\n  const [nodeInfoClasses, setNodeInfoClasses] = useState(['node-info']);\r\n  const [runButtonClasses, setRunButtonClasses] = useState(['run']);\r\n  const [ runState, setRunState ] = useState('init');\r\n\r\n  // this is set when the API component mounts. For a real API, make the request for a network object from the real API\r\n  const [network, setNetwork] = useState(undefined as Network);\r\n\r\n  // initialize state to null values but keep those suckers typed... mostly\r\n  const [instructionsToSend, setInstructionsToSend] = useState(undefined as Instruction[][]);\r\n  const [apiResponse, setApiResponse] = useState(undefined);\r\n\r\n  // are we done executing the current set of instructions?\r\n  const [ finishedExecuting, setFinishedExecuting ] = useState(undefined as boolean);\r\n\r\n  // display progressive node info as simulation executes\r\n  // if we didn't have this state, getNodeInfo would display the completed node state immediately\r\n  // because the simulation has already been done on the displayed network\r\n  const [ mostRecentNodeInfo ] = useState(new Map<number, string>());\r\n  const [ mostRecentStepCompleted, setMostRecentStepCompleted ] = useState([] as number[]);\r\n\r\n  // re render sim if screen is over a certain size and we need to change padding\r\n  const [ rerenderSim, setRerenderSim ] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (window.innerWidth > 1195) {\r\n      document.documentElement.style.setProperty('--sim-wrapper-vertical-padding', '70px');\r\n      document.documentElement.style.setProperty('--sim-wrapper-horizontal-padding', '70px');\r\n      setRerenderSim(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!network) {\r\n      return;\r\n    }\r\n\r\n    document.documentElement.style.setProperty('--prompt-width', document.getElementById(\"prompt\").offsetWidth + 'px');\r\n    document.getElementById(\"textarea\").style.height = (document.getElementById(\"console\").offsetHeight - 30 - document.getElementById(\"run\").offsetHeight) + 'px';\r\n    \r\n    document.addEventListener('click',\r\n      (ev) => {\r\n        if ((ev.target as Element).id === 'circle-wrapper' || (ev.target as Element).id === 'sim-wrapper') {\r\n          closeNodeInfo();\r\n          // scrollToTop();\r\n          // document.getElementById('app').style.overflowY = 'hidden';\r\n        }\r\n      });\r\n\r\n    // when user clicks off of the textarea, scroll up so there isn't awks whitespace at the bottom\r\n    const ta = document.getElementById(\"textarea\");\r\n    ta.addEventListener('click', event => {\r\n\r\n      if (window.innerWidth <= 767) {\r\n        scrollToEnd();\r\n      }\r\n      document.removeEventListener('click', detectClickOffTextArea);\r\n      document.addEventListener('click', detectClickOffTextArea);\r\n    });\r\n\r\n    // fill map with current node data\r\n    for (let i = 0; i < network.numNodes; i++) {\r\n      mostRecentNodeInfo.set(i, buildNodeInfoString(network.getNode(i)));\r\n    }\r\n\r\n  }, [network]);\r\n\r\n  useEffect( () => {\r\n    if (!apiResponse) {\r\n      return;\r\n    }\r\n\r\n    let i = mostRecentStepCompleted.length ? mostRecentStepCompleted[0] : 0;\r\n\r\n    while (apiResponse[i] && apiResponse[i].done) {\r\n      mostRecentNodeInfo.set(apiResponse[i].nodeId, apiResponse[i].nodeInfoString);\r\n      i++;\r\n    }\r\n\r\n    mostRecentStepCompleted[0] = i > 0 ? i - 1 : 0;\r\n\r\n  }, [apiResponse]);\r\n\r\n  const detectClickOffTextArea = (event: MouseEvent) => {\r\n    \r\n    // only scroll up if the run button is not active. if it is active, controls component will scroll up for us\r\n    const runButtonActive = document.getElementById(\"run\").contains(event.target as Node) && document.getElementById(\"run\").classList.length > 1;\r\n\r\n    if (!document.getElementById(\"textarea\").contains(event.target as Node) && !runButtonActive) {\r\n      scrollToTop();\r\n      document.removeEventListener('click', detectClickOffTextArea);\r\n    }\r\n  }\r\n\r\n  const getNodeInfo = (id: number) => displayInfo(mostRecentNodeInfo.get(id));\r\n\r\n  const getPayloadInfo = (apiResIndex: number, msgId: string) => \r\n    displayInfo(\r\n      buildPayloadInfoString(\r\n        apiResponse[apiResIndex].payload,\r\n        msgId\r\n      )\r\n    );\r\n\r\n  const displayInfo = (info: string) => {\r\n    document.getElementById('node-info-wrapper').innerHTML = info;\r\n    if (document.getElementById('node-info').classList.length === 1) {\r\n\r\n      setNodeInfoClasses(['node-info node-info-active']);\r\n\r\n      // remove right after the animation ends (0.3s)\r\n      setTimeout( () => document.getElementById('liveinfo').style.display = 'none', 300);\r\n      // scrollToEnd();\r\n    }\r\n  };\r\n\r\n  const closeNodeInfo = () => {\r\n    setNodeInfoClasses(['node-info']);\r\n\r\n    document.getElementById('liveinfo').style.removeProperty('display');\r\n    setTimeout( () => document.getElementById('node-info').style.removeProperty('height'), 300);\r\n  }\r\n\r\n  const handleTextAreaInput = (ev) => {\r\n    const currValue = (document.getElementById('textarea') as any).value;\r\n\r\n    if (document.getElementById('tutorial').classList.length === 1) {\r\n      document.getElementById('tutorial').classList.add('display-none');\r\n    }\r\n\r\n    if (runButtonClasses[0] !== 'run run-active' && currValue) {\r\n      setRunButtonClasses(['run run-active']);\r\n      document.getElementById('run').classList.add('run-active');\r\n\r\n    } else if (!currValue) {\r\n      setRunButtonClasses(['run']);\r\n      document.getElementById('run').classList.remove('run-active');\r\n    }\r\n  };\r\n\r\n  const scrollToTop = () => {\r\n    try {\r\n      document.getElementById('nav').scrollIntoView({ behavior: \"smooth\"});\r\n    } catch (e) { // mobile safari does not support smooth scroll\r\n      document.getElementById('nav').scrollIntoView();\r\n    }\r\n  };\r\n\r\n  const scrollToEnd = () => {\r\n    try {\r\n      document.getElementById('end').scrollIntoView({behavior: \"smooth\"});\r\n    } catch (e) { // mobile safari does not support smooth scroll\r\n      document.getElementById('end').scrollIntoView();\r\n    }\r\n  };\r\n\r\n  const getControlsProps = (): ControlsProps => {\r\n    return {\r\n      setInstructionsToSend: setInstructionsToSend,\r\n      finishedExecuting: finishedExecuting,\r\n      setFinishedExecuting: setFinishedExecuting,\r\n      setRunButtonClasses: setRunButtonClasses,\r\n      runState: runState,\r\n      setRunState: setRunState,\r\n      setMostRecentStepCompleted: setMostRecentStepCompleted,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div id=\"app\" className=\"app\">\r\n\r\n      <NavAndMenu />\r\n\r\n      <Sim \r\n        net={network}\r\n        getNodeInfo={getNodeInfo}\r\n        getPayloadInfo={getPayloadInfo}\r\n        apiResponse={apiResponse}\r\n        setApiResponse={setApiResponse}\r\n        sentInstructions={instructionsToSend}\r\n        setSentInstructions={setInstructionsToSend}\r\n        setFinishedExecuting={setFinishedExecuting}\r\n        network={network}\r\n        mostRecentNodeInfo={mostRecentNodeInfo}\r\n        rerenderSim={rerenderSim}\r\n      />\r\n\r\n      <Console\r\n        ControlsProps={getControlsProps()}\r\n        handleTextAreaInput={handleTextAreaInput}\r\n        apiResponse={apiResponse}\r\n        sentInstructions={instructionsToSend}\r\n      />\r\n\r\n      <div id='node-info' className={nodeInfoClasses[0]}>\r\n        <svg \r\n          onClick={() => closeNodeInfo()}\r\n          id=\"node-info-close\" className=\"node-info-close\" viewBox=\"0 0 20 20\"\r\n          style={{left: (window.innerWidth > 766 ? (window.innerWidth/2) - 45 : window.innerWidth - 45) + 'px'}}\r\n          >\r\n          <path fill=\"#f1f5fd\" d=\"M10.185,1.417c-4.741,0-8.583,3.842-8.583,8.583c0,4.74,3.842,8.582,8.583,8.582S18.768,14.74,18.768,10C18.768,5.259,14.926,1.417,10.185,1.417 M10.185,17.68c-4.235,0-7.679-3.445-7.679-7.68c0-4.235,3.444-7.679,7.679-7.679S17.864,5.765,17.864,10C17.864,14.234,14.42,17.68,10.185,17.68 M10.824,10l2.842-2.844c0.178-0.176,0.178-0.46,0-0.637c-0.177-0.178-0.461-0.178-0.637,0l-2.844,2.841L7.341,6.52c-0.176-0.178-0.46-0.178-0.637,0c-0.178,0.176-0.178,0.461,0,0.637L9.546,10l-2.841,2.844c-0.178,0.176-0.178,0.461,0,0.637c0.178,0.178,0.459,0.178,0.637,0l2.844-2.841l2.844,2.841c0.178,0.178,0.459,0.178,0.637,0c0.178-0.176,0.178-0.461,0-0.637L10.824,10z\"></path>\r\n        </svg>\r\n        <div id='node-info-wrapper'></div>\r\n      </div>\r\n\r\n      <Api network={network} setNetwork={setNetwork} sentInstructions={instructionsToSend} setApiResponse={setApiResponse} simFinishedExecuting={finishedExecuting} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}