{"version":3,"sources":["resource/menu.svg","util/interpret.ts","component/Sim/Sim.tsx","component/Controls/Controls.tsx","component/Console/Console.tsx","model/DataRange.ts","model/OrderedMap.ts","model/node.ts","model/Network.ts","component/Api/Api.tsx","component/NavAndMenu/NavAndMenu.tsx","App.tsx","index.tsx"],"names":["module","exports","interpretOneCommand","instrId","input","executeCommands","network","inputObj","undefined","nodeId","op","itemId","additionalDelay","jsonStartIndex","jsonEndIndex","i","length","failure","msg","slice","JSON","parse","e","beforeJson","substring","afterJson","inputArr","split","cleanArr","forEach","token","push","isNaN","parseInt","n","getNode","additionalDelayMs","read","delete","insert","update","buildNodeInfoString","dataRangeString","dataRange","concat","start","end","dataSliceString","it","dataSlice","entries","val","next","value","Object","keys","key","clockString","stringify","clock","id","connections","Sim","props","useState","instructionBlockToExecute","setInstructionBlockToExecute","useEffect","rerenderSim","sizeOuterCircle","generateNodes","net","numNodes","insertAnimations","apiResponse","console","log","setFinishedExecuting","sentInstructions","instr","executeApiResponse","document","getElementById","innerHTML","mostRecentNodeInfo","set","width","offsetWidth","height","offsetHeight","circleDiameter","documentElement","style","setProperty","num","nodeDiameter","newDiv","createElement","setAttribute","toString","newContent","createTextNode","appendChild","deg","radius","remove","append","transform","lineHeight","addEventListener","ev","getNodeInfo","edges","nodeMap","node","connection","findIndex","elem","newLine","div1","div2","off1","getOffset","off2","x1","left","y1","top","x2","y2","Math","sqrt","cx","cy","thickness","angle","atan2","PI","padding","margin","backgroundColor","position","connect","insertBefore","getBoundingClientRect","getComputedStyle","j","window","pageXOffset","pageYOffset","styleSheets","insertRule","pauseFirstAnimations","ind","done","setTimeout","thisMsg","dir","includes","setApiResponse","allInstr","thisBlock","thisInstr","inst","thisBlockDone","setSentInstructions","nextMsg","delay","networkLatency","msgId","div","animation","getPayloadInfo","el","rect","className","Controls","finishedExecuting","btn","resetRunBtn","classList","setRunButtonClasses","toggle","setInstrList","setApiResponseCopy","setMostRecentStepCompleted","removeEventListener","changeRunStatus","runOrControls","active","contains","running","play","success","blocks","instructionBlocks","inputCommands","toLowerCase","nextInstructionId","ibIndex","normal","inOrder","str","trim","text","interpret","instructionBlock","checkResult","errText","setInstructionsToSend","add","click","msgs","getElementsByClassName","item","getAttribute","animationPlayState","onClick","Console","instrList","apiResponseCopy","Map","mapInstrIdsToLabels","setMapInstrIdsToLabels","displayResponse","setDisplayResponse","setLiWidth","currMsg","tokens","get","ControlsProps","toggleButtonsAndInfo","updateInstrList","instrArr","getInstrLabel","includeColon","mapRes","newMap","label","labelList","opIndex","currLabel","li","getMsgColor","totalWidth","labels","maxWidth","currWidth","getInstrClasses","c","onChange","handleTextAreaInput","map","newState","showResponse","res","color","dangerouslySetInnerHTML","__html","getResponseText","DataRange","full","highestItemId","OrderedMap","keysInOrder","dRange","this","has","sort","a","b","delIndex","splice","eventStream","latency","dataRangeOrderedMap","mostRecentWrite","processPayload","payload","hasOwnProperty","Promise","resolve","pathIndex","path","nodeInfoString","ping","syncAndIncrementClock","sourceClock","requestClock","dbItem","doIncomingWrite","sourceHasUpdatedVectorClock","deleted","changes","broadcast","retItem","changedDataRange","newRange","range","realConnMap","connMap","shortestPath","tempClock","nodeToPing","respond","then","originalNode","newNode","findAllNodes","targetNode","currDataRangeStart","prePath","result","updateOrDelete","dataRangeToNode","highest","highestRange","currDataRange","find","numDataRange","count","leastDataNodes","targetId","returnConnMap","distance","visited","jobQ","currId","preCurrConn","currConn","preCurrNode","currNode","nextConn","preRet","ret","round","random","event","Network","inputDataRangeSize","inputEventStream","dataRangeSize","Subject","connectionsToPush","size","conn","connNode","indexOf","initialSlice","initialRange","fruit","getRandomFruit","rand","Api","emittedEvents","setEmittedEvents","apiFinishedExecuting","setApiFinishedExecuting","setNetwork","generateNetwork","simFinishedExecuting","subscription","subscribe","executeAllCommands","instrLists","index","subs","unsubscribe","currList","totalInList","numCompletedInList","originalInstr","response","Menu","menuClasses","setMenuClasses","menuContents","setMenuContents","initialContents","getMsgShowcase","o","webkitAnimationClassName","webkitAnimation","name","duration","func","repeat","classes","bgc","backToMenuBtn","removeProperty","tutorialContents","innerWidth","textAlign","float","marginTop","marginLeft","marginRight","display","paddingLeft","paddingRight","marginBottom","scrollIntoView","behavior","exampleContents","aboutContents","paddingTop","target","href","msgWidth","w1ToEnd","w2ToEnd","src","menu","alt","viewBox","d","App","nodeInfoClasses","setNodeInfoClasses","runButtonClasses","runState","setRunState","instructionsToSend","mostRecentStepCompleted","setRerenderSim","closeNodeInfo","scrollToEnd","detectClickOffTextArea","runButtonActive","scrollToTop","displayInfo","info","apiResIndex","pathString","opString","itemIdString","itemString","msgString","buildPayloadInfoString","currValue","fill","ReactDOM","render"],"mappings":"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","file":"static/js/main.91800589.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu.c159867d.svg\";","import Network from \"../model/Network\";\nimport node from \"../model/node\";\nimport payload from \"../model/payload\";\n\nexport interface Instruction {\n    instrId: number,\n    text: string,\n    res?: any,\n    done: boolean,\n}\n\nexport function createInstructionBlocks(input: string): Instruction[][] {\n\n    input = input.toLowerCase();\n\n    const inputCommands = input.split(\"\\n\");\n    let instructionBlocks: Instruction[][];\n    let nextInstructionId = 0;\n    let ibIndex = 0;\n\n    let normal = true;   // execute all instructions, don't wait\n    let inOrder = false; // wait for response before executing next instruction to guarantee order\n\n    for (let i = 0; i < inputCommands.length; ++i) {\n\n        const str = inputCommands[i].trim();\n        if (!str.length) {\n            continue;\n\n        } else if (str === 'normal') {\n            normal = true;\n            inOrder = false;\n            if (instructionBlocks) {\n                ibIndex = instructionBlocks.length; // set ibIndex to the current instruction block that we just initialized\n            }\n            continue;\n\n        } else if (str === 'in-order') {\n            normal = false;\n            inOrder = true;\n            continue;\n        }\n\n        if (!instructionBlocks) {\n            instructionBlocks = [\n                [{instrId: nextInstructionId++, text: str, done: false}]\n            ];\n            continue;\n        }  \n\n        if (normal && !instructionBlocks[ibIndex]) {\n            instructionBlocks.push([{instrId: nextInstructionId++, text: str, done: false}]);\n            ibIndex = instructionBlocks.length - 1; // set ibIndex to the current instruction block that we just initialized\n\n        } else if (normal && instructionBlocks[ibIndex]) {\n            instructionBlocks[ibIndex].push({instrId: nextInstructionId++, text: str, done: false});\n\n        } else if (inOrder) {\n            instructionBlocks.push([{instrId: nextInstructionId++, text: str, done: false}]);\n            ibIndex = instructionBlocks.length; // set ibIndex to the block AFTER this one ie it doesn't exist yet\n        }\n    }\n\n    return instructionBlocks;\n}\n\nexport function interpretAllCommands(something: any): any {\n    // what do I put here?\n    return undefined;\n}\n\n\n/**\n * \n * @param input string command input\n * @param executeCommands if false, this function just checks for bad syntax\n * \n * @returns Object with .failure either true or false, or the timeline\n */\nexport function interpretOneCommand(instrId: number, input: string, executeCommands: boolean, network?: Network): any {\n\n    // if command has correct syntax all of these will be populated as necessary\n    let inputObj  = undefined;\n    let nodeId: number = undefined;\n    let op: 'read' | 'update' | 'insert' | 'delete' = undefined;\n    let itemId: number = undefined;\n    let additionalDelay: number = undefined;\n\n    // detect json object and take it out before splitting\n    let jsonStartIndex = 0;\n    let jsonEndIndex = 0;\n\n    for(let i = 0; i < input.length; i++) {\n        if (input[i] === '{') {\n            jsonStartIndex = i;\n        } else if (input[i] === '}') {\n            jsonEndIndex = ++i;\n        }\n    }\n\n    if (jsonStartIndex && !jsonEndIndex) {\n        return {failure: true, msg: 'entered JSON string \\'' + input.slice(jsonStartIndex, input.length - 1) + '\\' was missing a closing bracket'};\n    }\n\n    if (jsonStartIndex) {\n        try {\n            inputObj = JSON.parse(input.slice(jsonStartIndex, jsonEndIndex));\n        } catch (e) {\n            return {failure: true, msg: 'entered JSON string \\'' + input.slice(jsonStartIndex, jsonEndIndex) + '\\' was invalid. Did you remember to put quotes?'};\n        }\n\n        const beforeJson = input.substring(0, jsonStartIndex);\n        let afterJson = undefined;\n        if (jsonEndIndex + 1 < input.length) {\n            afterJson = input.substring(jsonEndIndex + 1, input.length);\n        }\n\n        if (afterJson !== undefined) {\n            input = beforeJson + ' ' + afterJson;\n        } else {\n            input = beforeJson;\n        }\n    }\n\n    let inputArr = input.split(\" \");\n    let cleanArr: string[] = [];\n\n    inputArr.forEach( (token) => {\n        if (token.length !== 0) {\n            cleanArr.push(token);\n        }\n    });\n\n    inputArr = cleanArr;\n    let i = 0;\n\n    if (inputArr[i] === 'node' || inputArr[i] === 'n') {\n        i++;\n    }\n    \n    if (!isNaN(inputArr[i] as any)) {\n        nodeId = parseInt(inputArr[i]);\n        i++;\n    } else {\n        return {failure: true, msg: 'Node id \\'' + inputArr[i] + '\\' is invalid'};\n    }\n\n    if (inputArr[i] === 'read' || inputArr[i] === 'r') {\n        op = 'read';\n        i++;\n\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\n            i++;\n        }\n        if (!isNaN(inputArr[i] as any)) {\n            itemId = parseInt(inputArr[i]);\n            i++;\n\n        } else {\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\n        }\n\n    } else if (inputArr[i] === 'update' || inputArr[i] === 'u' || inputArr[i] === 'write' || inputArr[i] === 'w') {\n        op = 'update';\n        i++;\n\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\n            i++;\n        }\n        if (!isNaN(inputArr[i] as any)) {\n            itemId = parseInt(inputArr[i]);\n            i++;\n\n        } else {\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\n        }\n\n    } else if (inputArr[i] === 'insert' || inputArr[i] === 'i') {\n        op = 'insert';\n        i++;\n\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\n            i++;\n        }\n\n    } else if (inputArr[i] === 'delete' || inputArr[i] === 'd') {\n        op = 'delete';\n        i++;\n\n        if (inputArr[i] === 'item' || inputArr[i] === 'i') {\n            i++;\n        }\n        if (!isNaN(inputArr[i] as any)) {\n            itemId = parseInt(inputArr[i]);\n            i++;\n        } else {\n            return {failure: true, msg: 'Item id must be a number, input was \\'' + inputArr[i] + '\\''};\n        }\n\n    } else {\n        return {failure: true, msg: 'operation \\'' + inputArr[i] + '\\' not recognized'};\n    }\n\n    if (i < inputArr.length && (inputArr[i] === 'delay' || inputArr[i] === 'd')) {\n        i++;\n        if (!isNaN(inputArr[i] as any)) {\n            additionalDelay = parseInt(inputArr[i]);\n            i++;\n        } else {\n            return {failure: true, msg: 'delay must be followed by a number, ' + inputArr[i] + ' is not a number'};\n        }\n    }\n\n    if (!executeCommands) {\n        return {failure: false};\n\n    } else if (executeCommands && !network) {\n        return {failure: true, msg: 'A network to perform the operations on must be provided'};\n    }\n\n    // now, actually execute the commands lol\n    const n = network.getNode(nodeId);\n    const additionalDelayMs = additionalDelay * 100;\n\n    if (op === 'read') {\n        return n.read(itemId, additionalDelayMs, instrId);\n\n    } else if (op === 'delete') {\n        return n.delete(itemId, additionalDelayMs, instrId);\n\n    } else if (op === 'insert') {\n        return n.insert(inputObj, additionalDelayMs, instrId);\n \n    } else if (op === 'update') {\n        return n.update(itemId, inputObj, additionalDelayMs, instrId);\n    }\n}\n\nexport function buildNodeInfoString(n: node): string {\n    let dataRangeString = '[{';\n    for (let i = 0; i < n.dataRange.length; i++) {\n      dataRangeString = dataRangeString.concat(n.dataRange[i].start + ' => ' + n.dataRange[i].end);\n      if (i + 1 < n.dataRange.length) {\n        dataRangeString = dataRangeString.concat('}, {');\n      }\n    }\n    dataRangeString = dataRangeString.concat('}]');\n\n    let dataSliceString = \"<span style=''>[</span></br>\";\n    const it = n.dataSlice.entries();\n\n    let val = it.next().value;\n    while (!!val) {\n      dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>{</span>itemId: \" + val[0] + ', ');\n      Object.keys(val[1]).forEach( (key) => {\n        dataSliceString = dataSliceString.concat(key + ': ' + val[1][key] + ', ');\n      });\n      dataSliceString = dataSliceString.slice(0, -2); \n\n      if (val = it.next().value) {\n        dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>}</span>,</br>\");\n      } else {\n        dataSliceString = dataSliceString.concat(\"<span style='color: #f0d976'>}</span></br>\");\n      }\n    }\n    dataSliceString = dataSliceString.concat(\"<span style=''>]</span>\");\n\n    let clockString = JSON.stringify(n.clock);\n    clockString = clockString.split('[')[1];\n    clockString = clockString.split(']')[0];\n    clockString = \"<span style='color: #18cdfa'>[</span>\".concat(clockString).concat(\"<span style='color: #18cdfa'>]</span>\");\n\n    let infoToPrint = \"<h3 class='nodeinfo-h3'>node \" + n.id + \" info</h3>\" + \n      \"<span style='color: #f1ef43'>clock: </span>\"       + clockString                   + '</br>' +\n      \"<span style='color: #f1ef43'>connections: </span>\" + JSON.stringify(n.connections) + '</br>' +\n      \"<span style='color: #f1ef43'>dataRange: </span>\"   + dataRangeString               + '</br>' +\n      \"<span style='color: #f1ef43'>dataSlice: </span>\"   + dataSliceString\n    //   + \"<span style='color: #dd9f58'>}</span>\"\n    \n    return infoToPrint;\n  };\n\nexport function buildPayloadInfoString(payload: payload, msgId: string): string {\n    console.log(payload);\n    const label = document.getElementById(msgId).innerHTML;\n\n    let pathString = '';\n    if (payload.dir === 'out') {\n\n        for (let i = 0; i < payload.path.length; i++) {\n\n            pathString = pathString.concat(payload.path[i].toString());\n\n            if (i + 1 < payload.path.length) {\n                pathString = pathString.concat(' => ');\n            }\n        }\n\n    } else {\n\n        for (let i = payload.path.length - 1; i >= 0; i--) {\n\n            pathString = pathString.concat(payload.path[i].toString());\n\n            if (i - 1 >= 0) {\n                pathString = pathString.concat(' => ');\n            }\n        }\n    }\n\n    let opString = '';\n    if (payload.op === 'r') {\n        opString = 'read';\n    } else if (payload.op === 'u') {\n        opString = 'update';\n    } else if (payload.op === 'i') {\n        opString = 'insert';\n    } else if (payload.op === 'd') {\n        opString = 'delete';\n    }\n\n    let itemIdString = '';\n    if (payload.itemId) {\n        itemIdString =     \"<span style='color: #f1ef43'>itemId: </span>\" + payload.itemId + '</br>';\n    }\n\n    let itemString = '';\n    if (payload.item) {\n        itemString =     \"<span style='color: #f1ef43'>item: </span>\" + JSON.stringify(payload.item, null, 1) + '</br>';\n    }\n\n    let msgString = '';\n    if (payload.msg) {\n        msgString =     \"<span style='color: #f1ef43'>msg: </span>\" + payload.msg + '</br>';\n    }\n\n    let sourceClockString = \"<span style='color: #f1ef43'>sourceClock (node \" + pathString[0] + \"): </span>\" + JSON.stringify(payload.sourceClock) + '</br>';\n\n    let infoToPrint = \"<h3 class='payloadinfo-h3'>payload \" + label + \" info</h3>\" +\n    \"<span style='color: #f1ef43'>path: </span>\" + pathString + '</br>' +\n    \"<span style='color: #f1ef43'>operation: </span>\" + opString + '</br>' +\n    itemIdString + itemString + msgString + sourceClockString;\n\n\n    return infoToPrint;\n}","import React, { useEffect, useState } from 'react';\nimport './Sim.css';\nimport Network from '../../model/Network';\nimport { Instruction, buildNodeInfoString } from '../../util/interpret';\n\ninterface SimProps {\n\tnet: Network;\n\tgetNodeInfo: (id: number) => void;\n\tgetPayloadInfo: (apiResIndex: number, msgId: string) => void;\n\tapiResponse: any;\n\tsetApiResponse: React.Dispatch<any>;\n\tsentInstructions: Instruction[][];\n\tsetSentInstructions: React.Dispatch<React.SetStateAction<Instruction[][]>>;\n\tsetFinishedExecuting: React.Dispatch<React.SetStateAction<boolean>>;\n\n\t// so sim can update shown info for \"silent\" updates like datarange changes during the sim\n\tnetwork: Network;\n\tmostRecentNodeInfo: Map<number, string>;\n\n\trerenderSim: boolean;\n }\n\nconst Sim: React.FunctionComponent<SimProps> = (props) => {\n\n\tconst [ instructionBlockToExecute, setInstructionBlockToExecute ] = useState(undefined as number);\n\n\tuseEffect( () => {\n\n\t\tif (props.rerenderSim) {\n\t\t\tsizeOuterCircle();\n\t\t\tgenerateNodes(props.net.numNodes);\n\t\t\tinsertAnimations(props.net.numNodes);\n\t\t}\n\n\t}, [props.rerenderSim]);\n\n\tuseEffect(() => {\n\n\t\t// TODO: make this work for resizing too\n\t\t// window.addEventListener('resize', sizeOuterCircle);\n\t\tsizeOuterCircle();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (props.net) {\n\t\t\tgenerateNodes(props.net.numNodes);\n\t\t\tinsertAnimations(props.net.numNodes);\n\t\t}\n\t}, [props.net]);\n\n\tuseEffect( () => {\n\t\tif (!props.apiResponse || instructionBlockToExecute !== undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log('received api response! ', props.apiResponse);\n\t\tprops.setFinishedExecuting(false);\n\t\tsetInstructionBlockToExecute(0);\n\t\t\n\t}, [props.apiResponse]);\n\n\tuseEffect( () => {\n\t\tif (instructionBlockToExecute === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (instructionBlockToExecute === props.sentInstructions.length) {\n\t\t\tconsole.log('executed all blocks!');\n\t\t\tprops.setFinishedExecuting(true);\n\t\t\tsetInstructionBlockToExecute(undefined); // reset ibToExecute\n\n\t\t\t// fill map with current node data to capture info from silent changes such as\n\t\t\t// datarange update notifications on insert (seen in clocks of all nodes)\n\t\t\tfor (let i = 0; i < props.network.numNodes; i++) {\n\t\t\t\tprops.mostRecentNodeInfo.set(i, buildNodeInfoString(props.network.getNode(i)));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst instrToExecute = props.sentInstructions[instructionBlockToExecute];\n\n\t\tinstrToExecute.forEach( instr => {\n\t\t\tconst instrId = instr.instrId;\n\t\t\t\n\t\t\tfor (let i = 0; i < props.apiResponse.length; i++ ) {\n\t\t\t\tif (props.apiResponse[i].instrId === instrId) {\n\t\t\t\t\texecuteApiResponse(props.apiResponse, i, document.getElementById('run').innerHTML === 'wait');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\t// this is basically manipulating app state by looking directly at the dom...\n\t\t// goal is to pause the initial run button click. really bad obviously\n\t\t// the only other relevant code is in controls run button click function\n\t\tif (document.getElementById('run').innerHTML === 'wait') {\n\t\t\tdocument.getElementById('run').innerHTML = 'pause';\n\t\t}\n\n\t}, [instructionBlockToExecute]);\n\n\tconst sizeOuterCircle = () => {\n\t\tvar width = document.getElementById(\"sim-wrapper\").offsetWidth;\n\t\tvar height = document.getElementById(\"sim-wrapper\").offsetHeight;\n\n\t\t// screen is tall\n\t\tif (height > width) {\n\t\t\tvar circleDiameter = document.getElementById(\"circle-wrapper\").offsetWidth;\n\n\t\t\tdocument.documentElement.style.setProperty(\n\t\t\t\t'--circle-wrapper-height', \n\t\t\t\tcircleDiameter + 'px'\n\t\t\t);\n\n\t\t\t// set padding to center vertically\n\t\t\tdocument.documentElement.style.setProperty(\n\t\t\t\t'--sim-wrapper-vertical-padding',\n\t\t\t\t((document.getElementById(\"sim-wrapper\").offsetHeight - circleDiameter) / 2) + 'px'\n\t\t\t)\n\n\t\t\t// reset height to what it was originally\n\t\t\tdocument.getElementById(\"sim-wrapper\").style.height = height + 'px';\n\n\t\t// screen is wide\n\t\t} else if (height < width) {\n\t\t\tdocument.documentElement.style.setProperty(\n\t\t\t\t'--circle-wrapper-width', \n\t\t\t\tdocument.getElementById(\"circle-wrapper\").offsetHeight + 'px'\n\t\t\t);\n\t\t}\n\n\t};\n\n\tconst generateNodes = (num) => {\n\t\tconst nodeDiameter = document.getElementById('circle-wrapper').offsetWidth / 7;\n\t\tdocument.documentElement.style.setProperty('--node-diameter', nodeDiameter + 'px');\n\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tconst newDiv = document.createElement('div');\n\t\t\tnewDiv.setAttribute('class', 'dot');\n\t\t\tnewDiv.setAttribute('id', i.toString());\n\t\t\tconst newContent = document.createTextNode(i.toString());\n\t\t\tnewDiv.appendChild(newContent);\n\n\t\t\tconst deg = (360 / num) * i;\n\n\t\t\tvar radius = (document.getElementById(\"circle-wrapper\").offsetWidth / 2) + 'px';\n\n\t\t\t// if this is the second render, remove the already existing node\n\t\t\tif (document.getElementById(i.toString())) {\n\t\t\t\tdocument.getElementById(i.toString()).remove();\n\t\t\t}\n\n\t\t\tdocument.getElementById('circle-wrapper').append(newDiv);\n\t\t\tdocument.getElementById(i.toString()).style.transform = \"rotate(-90deg) rotate(\" + deg + \"deg) translate(\" + radius + \") rotate(-\" + deg + \"deg) rotate(90deg)\";\n\t\t\tdocument.getElementById(i.toString()).style.lineHeight = document.getElementById(i.toString()).offsetWidth - 2 + 'px'; // reset line height, - 2 is border width\n\n\t\t\tdocument.getElementById(i.toString()).addEventListener('click', (ev) => {props.getNodeInfo(i)});\n\t\t}\n\n\t\tconst edges = [];\n\t\t\n\t\tprops.net.nodeMap.forEach(node => {\n\t\t\tnode.connections.forEach( connection => {\n\t\t\t\tif (edges.findIndex(\n\t\t\t\t\telem => (elem[0] === node.id && elem[1] === connection) || (elem[1] === node.id && elem[0] === connection)\n\t\t\t\t) < 0) {\n\n\t\t\t\t\t// add the edge to edges, create new line on the svg\n\t\t\t\t\tconst newLine = connect(document.getElementById(node.id.toString()), document.getElementById(connection.toString()));\n\t\t\t\t\tdocument.getElementById('sim-wrapper').insertBefore(newLine, document.getElementById('circle-wrapper'));\n\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t\n\t};\n\n\tconst insertAnimations = (numNodes: number) => {\n\t\tconst subtractBy = document.getElementById('0').getBoundingClientRect().top;\n\t\tconst msgWidth = parseInt(getComputedStyle(document.getElementById('0')).width);\n\t\tvar width = document.getElementById(\"sim-wrapper\").offsetWidth;\n\t\tvar height = document.getElementById(\"sim-wrapper\").offsetHeight;\n\n\t\tfor (let i = 0; i < numNodes; i++) {\n\t\t\tfor (let j = 0; j < numNodes; j++) {\n\t\t\t\tif (i === j) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet x1, x2, y1, y2;\n\t\t\t\t\n\t\t\t\t\tx1 = document.getElementById(i.toString()).getBoundingClientRect().left + window.pageXOffset;\n\t\t\t\t\ty1 = document.getElementById(i.toString()).getBoundingClientRect().top + window.pageYOffset;\n\t\n\t\t\t\t\tx2 = document.getElementById(j.toString()).getBoundingClientRect().left + window.pageXOffset;\n\t\t\t\t\ty2 = document.getElementById(j.toString()).getBoundingClientRect().top + window.pageYOffset;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// // going right or left\n\t\t\t\t// if (x2 - x1 > 0)      { x1 += Math.round(msgWidth/4); x2 -= Math.round(msgWidth/4); }\t\t\t\t\n\t\t\t\t// else if (x2 - x1 < 0) { x1 -= Math.round(msgWidth/4); x2 += Math.round(msgWidth/4); }\n\n\t\t\t\t// // going down or up\n\t\t\t\t// if (y2 - y1 > 0)      { y1 += Math.round(msgWidth/4); y2 -= Math.round(msgWidth/4); }\n\t\t\t\t// else if (y2 - y1 < 0) { y1 -= Math.round(msgWidth/4); y2 += Math.round(msgWidth/4); }\n\n\n\t\t\t\t(document.styleSheets[0] as any).insertRule(\n\t\t\t\t\t`@keyframes id${i}to${j} { from{ left:${x1}px; top:${y1}px   } to{ left:${x2}px; top:${y2}px } }`\n\t\t\t\t);\n\n\t\t\t\t(document.styleSheets[0] as any).insertRule(\n\t\t\t\t\t`.msg${i}to${j} { left:${x1}px; top:${y1}px }`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst executeApiResponse = (apiResponse: [{\n\t\tinstrId: number,\n\t\tnodeId: number,\n\t\tdir: string,\n\t\tmsg: string,\n\t\tpayload: any,\n\t\tnodeInfoString: string,\n\t\tnetworkLatency?: number,\n\t\tadditionalDelay?: number,\n\t\tdone: boolean,\n\t}], i: number, pauseFirstAnimations?: boolean) => {\n\n\t\tconsole.log('executing ' + i);\n\t\tfor (let ind = i-1; ind >= 0; --ind) {\n\t\t\tif (apiResponse[ind].done === false) {\n\t\t\t\tconsole.log('out of order, waiting for correct thing to execute');\n\t\t\t\tsetTimeout(() => executeApiResponse(apiResponse, i), 500);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (i === apiResponse.length) {\n\t\t\tconsole.log('does this ever happen?');\n\t\t\treturn;\n\t\t}\n\n\t\tconst thisMsg = apiResponse[i];\n\t\tif (thisMsg.dir === 'recv' && thisMsg.msg.includes('original')) {\n\t\t\tconsole.log('finished instr ' + thisMsg.instrId);\n\t\t\tthisMsg.done = true;\n\n\t\t\t// emit apiResponse progression (separate from instruction progression)\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\n\n\t\t\t// barrier synchronization\n\t\t\tconst allInstr = props.sentInstructions;\n\t\t\tconst thisBlock = allInstr[instructionBlockToExecute];\n\t\t\tconst thisInstr = thisBlock.findIndex((inst) => inst.instrId === thisMsg.instrId);\n\t\t\t\n\t\t\tif (thisInstr >= 0) {\n\t\t\t\tthisBlock[thisInstr].done = true;\n\t\t\t}\n\n\t\t\tlet thisBlockDone = true;\n\t\t\tfor (let i = 0; i < thisBlock.length; i++) {\n\t\t\t\tif (!thisBlock[i].done) { thisBlockDone = false; }\n\t\t\t}\n\n\t\t\t// update sentInstructions so that the console can display properly\n\t\t\tprops.setSentInstructions(JSON.parse(JSON.stringify(allInstr)));\n\n\t\t\t// execute the next block\n\t\t\tif (thisBlockDone) {\n\t\t\t\tsetInstructionBlockToExecute(instructionBlockToExecute + 1);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// ending the updateDataRange messages\n\t\tif (thisMsg.dir === 'recv' && thisMsg.msg.includes('final') && thisMsg.msg.includes('updateDataRange')) {\n\t\t\tconsole.log('finished instr ' + thisMsg.instrId);\n\t\t\tthisMsg.done = true;\n\n\t\t\t// emit apiResponse progression (separate from instruction progression)\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet next = i + 1;\n\t\twhile (apiResponse[next].instrId !== apiResponse[i].instrId) {\n\t\t\tnext++;\n\t\t} \n\n\t\tconst nextMsg = apiResponse[next];\n\n\t\t// ie. reading data on the same node\n\t\tif (nextMsg.nodeId === thisMsg.nodeId) {\n\t\t\tthisMsg.done = true;\n\n\t\t\t// emit apiResponse progression (separate from instruction progression)\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\n\n\t\t\texecuteApiResponse(apiResponse, next);\n\t\t\treturn;\n\t\t}\n\n\t\tif (thisMsg.msg.includes('initial payload') ||\n\t\t\t(thisMsg.dir === 'send' && thisMsg.msg.includes('middle')) ||\n\t\t\t(thisMsg.dir === 'send' && thisMsg.msg.includes('final'))\n\t\t) {\t\n\t\t\tlet delay = 1 + (nextMsg.networkLatency/100) + (nextMsg.additionalDelay/100);\n\n\t\t\tconst msg = document.createElement('div');\n\t\t\tconst msgId = `instr_${thisMsg.instrId}_msg${thisMsg.nodeId}to${nextMsg.nodeId}_apiresindex_${i}`;\n\t\t\tmsg.setAttribute('class', `msg msg${thisMsg.nodeId}to${nextMsg.nodeId}`);\n\t\t\tmsg.setAttribute('id', msgId);\n\t\t\tdocument.getElementById('sim-wrapper').appendChild(msg);\n\t\t\tconst div = document.getElementById(msgId);\n\t\t\tdiv.style.height = document.getElementById('0').offsetHeight + 'px';\n\t\t\tdiv.style.width = document.getElementById('0').offsetWidth + 'px';\n\t\t\tdiv.style.lineHeight = div.offsetHeight.toString() + 'px';\n\n\t\t\tif (pauseFirstAnimations) {\n\t\t\t\tdiv.style.animation = `id${thisMsg.nodeId}to${nextMsg.nodeId} ${delay}s linear forwards paused`;\n\n\t\t\t} else {\n\t\t\t\tdiv.style.animation = `id${thisMsg.nodeId}to${nextMsg.nodeId} ${delay}s linear forwards`;\n\t\t\t}\n\n\t\t\tdiv.addEventListener('animationend', () => {\n\t\t\t\tconsole.log(`Animation ${msgId} ended`);\n\t\t\t\tdiv.remove();\n\t\t\t\texecuteApiResponse(apiResponse, next);\n\t\t\t});\n\n\t\t\tdiv.addEventListener('click', () => props.getPayloadInfo(i, msgId));\n\n\t\t\tthisMsg.done = true;\n\n\t\t\t// emit apiResponse progression (separate from instruction progression)\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ((thisMsg.dir === 'recv' && thisMsg.msg.includes('middle')) ||\n\t\t\t(thisMsg.dir === 'recv' && thisMsg.msg.includes('final'))\n\t\t) {\n\t\t\tthisMsg.done = true;\n\n\t\t\t// emit apiResponse progression (separate from instruction progression)\n\t\t\tprops.setApiResponse(JSON.parse(JSON.stringify(apiResponse)));\n\n\t\t\t\n\t\t\treturn executeApiResponse(apiResponse, next);\n\t\t}\n\t}\n\n\n\tfunction getOffset( el ) {\n\t\tvar rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t\tleft: rect.left + window.pageXOffset,\n\t\t\ttop: rect.top + window.pageYOffset,\n\t\t\twidth: rect.width || el.offsetWidth,\n\t\t\theight: rect.height || el.offsetHeight\n\t\t};\n\t}\n\t\n\tfunction connect(div1: HTMLElement, div2: HTMLElement): HTMLElement { // draw a line connecting elements\n\t\tconst thickness = 2;\n\n\t\tvar off1 = getOffset(div1);\n\t\tvar off2 = getOffset(div2);\n\t\t// middle\n\t\tvar x1 = off1.left + (off1.width / 2);\n\t\tvar y1 = off1.top + (off1.height / 2);\n\t\t// middle\n\t\tvar x2 = off2.left + (off2.width / 2);\n\t\tvar y2 = off2.top + (off2.height / 2);\n\t\t// distance\n\t\tvar length = Math.sqrt(((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)));\n\t\t// center\n\t\tvar cx = ((x1 + x2) / 2) - (length / 2);\n\t\tvar cy = ((y1 + y2) / 2) - (thickness / 2);\n\t\t// angle\n\t\tvar angle = Math.atan2((y1-y2),(x1-x2))*(180/Math.PI);\n\t\t\n\t\tconst newLine = document.createElement('div');\n\t\tnewLine.style.padding = '0px';\n\t\tnewLine.style.margin = '0px';\n\t\tnewLine.style.height = '2px';\n\t\tnewLine.style.backgroundColor = '#282c34';\n\t\tnewLine.style.lineHeight = '1px';\n\t\tnewLine.style.position = 'absolute';\n\t\tnewLine.style.left = cx + 'px';\n\t\tnewLine.style.top = cy + 'px';\n\t\tnewLine.style.width = length + 'px';\n\t\tnewLine.style.transform = 'rotate(' + angle + 'deg)';\n\n\t\treturn newLine as HTMLElement;\n\t}\n\n\n\treturn (\n\t\t\t<div id=\"sim-wrapper\" className=\"sim-wrapper\">\n\t\t\t\t<div id=\"circle-wrapper\" className=\"circle-wrapper\">\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n}\n\nexport default Sim;","import React, { useEffect, useState } from 'react';\nimport './Controls.css';\nimport * as interpret from '../../util/interpret';\n\nexport interface ControlsProps {\n\tsetInstructionsToSend: React.Dispatch<React.SetStateAction<interpret.Instruction[][]>>;\n\tfinishedExecuting: boolean;\n\tsetFinishedExecuting: React.Dispatch<React.SetStateAction<boolean>>;\n\tsetRunButtonClasses: React.Dispatch<React.SetStateAction<string[]>>;\n\n\trunState: string;\n\tsetRunState: React.Dispatch<React.SetStateAction<string>>;\n\t\n\tsetMostRecentStepCompleted: React.Dispatch<React.SetStateAction<number[]>>;\n\n\t// delivered by the Console component just so this component can delay resetting the instruction list\n\tsetInstrList?: React.Dispatch<React.SetStateAction<interpret.Instruction[]>>\n\n\tsetApiResponseCopy?: React.Dispatch<React.SetStateAction<any[]>>;\n}\n\nconst Controls: React.FunctionComponent<ControlsProps> = (props) => {\n\n\tuseEffect( () => {\n\t\tif (!props.finishedExecuting) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (props.finishedExecuting) {\n\t\t\tconst btn = document.getElementById('run');\n\t\t\tbtn.innerHTML = 'reset';\n\n\t\t\tbtn.addEventListener('click', resetRunBtn);\n\t\t}\n\t}, [props.finishedExecuting]);\n\n\tconst resetRunBtn = () => {\n\t\tconst btn = document.getElementById('run');\n\t\tbtn.classList.remove('run-active');\n\t\tbtn.classList.remove('run-running');\n\t\tbtn.classList.remove('display-block');\n\t\tbtn.classList.remove('display-none');\n\n\t\tbtn.innerHTML = 'run';\n\t\t(document.getElementById(\"textarea\") as any).value = '';\n\n\t\tprops.setFinishedExecuting(undefined);\n\t\tprops.setRunButtonClasses(['run']);\n\n\t\tconst toggleButtonsAndInfo = () => {\n\t\t\tdocument.getElementById('prompt').classList.toggle('display-none');\n\t\t\tdocument.getElementById('textarea').classList.toggle('display-none');\n\t\t\tdocument.getElementById('liveinfo').classList.toggle('display-none');\n\t\t};\n\n\t\t// originally executed on console component, but this component handles reset now\n\t\ttoggleButtonsAndInfo();\n\n\t\t// side effect of this on console component is resetting mapInstrIdToLabel map\n\t\t// if done anywhere else the map gets reset to the old map because the old\n\t\t// instructions still exist at this point. very frustrating\n\t\tprops.setInstrList([] as interpret.Instruction[]);\n\t\tprops.setApiResponseCopy([]);\n\t\tprops.setMostRecentStepCompleted([]);\n\n\t\tbtn.removeEventListener('click', resetRunBtn);\n\t};\n\n\tconst changeRunStatus = (runOrControls: string) => {\n\n\t\tconst btn = document.getElementById('run');\n\t\tconst active = btn.classList.contains('run-active');\n\t\tconst running = btn.classList.contains('run-running');\n\n\t\t// const back = document.getElementById('back');\n\t\tconst play = document.getElementById('play');\n\t\t// const forward = document.getElementById('forward');\n\n\t\tif (runOrControls === 'run' && active && !running) {\n\t\t\tif (document.getElementById('err-text')) {\n\t\t\t\tdocument.getElementById('err-text').remove();\n\t\t\t}\n\n\t\t\tlet success = true;\n\t\t\tconst blocks = interpret.createInstructionBlocks((document.getElementById(\"textarea\") as any).value);\n\n\t\t\tblocks.forEach( instructionBlock => {\n\n\t\t\t\tinstructionBlock.forEach(instr => {\n\n\t\t\t\t\tconst checkResult = interpret.interpretOneCommand(instr.instrId, instr.text, false);\n\t\t\t\t\tif (checkResult.failure) {\n\n\t\t\t\t\t\tsuccess = false;\n\n\t\t\t\t\t\tconst errText = document.createElement('span');\n\t\t\t\t\t\terrText.setAttribute('id', 'err-text');\n\t\t\t\t\t\terrText.setAttribute('style', 'color: orange');\n\t\t\t\t\t\tconst newContent = document.createTextNode('failure: ' + checkResult.msg);\n\t\t\t\t\t\terrText.appendChild(newContent);\n\n\t\t\t\t\t\tdocument.getElementById('console').insertBefore(errText, document.getElementById('textarea'));\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (success) {\n\t\t\t\t// this is equivalent to \"sending\" instructions to our api component\n\t\t\t\t// (it's listening for changes to its sent instructions prop)\n\n\t\t\t\t// if using a real api, we would detect instructions to send and\n\t\t\t\t// make an api request, then return the apiResponse to the app component\n\t\t\t\tprops.setInstructionsToSend(blocks);\n\t\t\t\tbtn.innerHTML = 'wait';\n\t\t\t\tbtn.classList.add('run-running');\n\n\t\t\t\tdocument.getElementById('run').click();\n\t\t\t};\n\n\t\t} else if(runOrControls === 'run' && running) {\n\n\t\t\tconst msgs = document.getElementsByClassName('msg');\n\n\t\t\tfor (let i = 0; i < msgs.length; i++) {\n\t\t\t\tconst item = document.getElementById(msgs.item(i).getAttribute('id'));\n\t\t\t\titem.style.animationPlayState = 'paused';\n\t\t\t}\n\n\t\t\t// toggle and show the back-play-forward btns\n\t\t\tbtn.classList.remove('run-active');\n\t\t\tbtn.classList.remove('run-running');\n\t\t\t// btn.classList.remove('display-block');\n\t\t\tbtn.classList.add('display-none');\n\n\t\t\t// back.classList.remove('display-none');\n\t\t\tplay.classList.remove('display-none');\n\t\t\t// forward.classList.remove('display-none');\n\t\t\t// back.classList.add('display-inline-block');\n\t\t\t// play.classList.add('display-inline-block');\n\t\t\t// forward.classList.add('display-inline-block');\n\n\t\t} else if (runOrControls === 'play') {\n\n\t\t\tconst msgs = document.getElementsByClassName('msg');\n\n\t\t\tfor (let i = 0; i < msgs.length; i++) {\n\t\t\t\tconst item = document.getElementById(msgs.item(i).getAttribute('id'));\n\t\t\t\titem.style.animationPlayState = 'running';\n\t\t\t}\n\n\t\t\tbtn.classList.remove('display-none');\n\t\t\t// btn.classList.add('display-block');\n\t\t\tbtn.classList.add('run-active');\n\t\t\tbtn.classList.add('run-running');\n\n\t\t\t// back.classList.remove('display-inline-block');\n\t\t\t// play.classList.remove('display-inline-block');\n\t\t\t// forward.classList.remove('display-inline-block');\n\t\t\t// back.classList.add('display-none');\n\t\t\tplay.classList.add('display-none');\n\t\t\t// forward.classList.add('display-none');\n\t\t}\n\t};\n\t\n\tconst tutorial = () => {\n\t\tdocument.getElementById('tutorial').classList.add('display-none');\n\t\tdocument.getElementById('menu-btn').click();\n\t\tsetTimeout( () => {\n\t\t\tdocument.getElementById('tutorial-li').click();\n\t\t}, 800);\n\n\t};\n\n\treturn (\n\t\t<>\n\t\t<div id=\"run\" className=\"run\" onClick={() => {if(document.getElementById('run').classList.length > 1) { changeRunStatus('run'); }}}>run</div>\n\t\t{/* <div id=\"back\" className=\"back\" onClick={() => {scrollToTop(); changeRunStatus('back');}}>&lt;=</div> */}\n\t\t<div id=\"play\" className=\"play display-none\" onClick={() => {changeRunStatus('play');}}>play</div>\n\t\t{/* <div id=\"forward\" className=\"forward\" onClick={() => {scrollToTop(); changeRunStatus('forward');}}>=></div> */}\n\n\t\t<div id=\"tutorial\" className=\"tutorial\" onClick={() => tutorial()}>first visit?</div>\n\t\t</>\n\t);\n\n}\n\nexport default Controls;","import React, { useEffect, useState } from 'react';\nimport './Console.css';\nimport Network from '../../model/Network';\nimport { Instruction } from '../../util/interpret';\nimport * as interpret from '../../util/interpret';\nimport Controls, { ControlsProps } from '../Controls/Controls';\n\ninterface ConsoleProps {\n    ControlsProps: ControlsProps;\n    apiResponse: any;\n    handleTextAreaInput: (event: React.ChangeEvent<Element>) => void;\n    sentInstructions: Instruction[][];\n}\n\nconst Console: React.FunctionComponent<ConsoleProps> = (props) => {\n\n    const [ instrList, setInstrList ] = useState([] as Instruction[]);\n    const [ apiResponseCopy, setApiResponseCopy ] = useState([]);\n    const [ mapInstrIdsToLabels, setMapInstrIdsToLabels ] = useState(new Map<number, string>());\n    const [ displayResponse, setDisplayResponse ] = useState([] as boolean[]);\n    \n\n    useEffect( () => {\n        if (!props.apiResponse) {\n            return;\n        }\n\n        // only set LiWidth on the first apiResponse\n        if (apiResponseCopy.length === 0) {\n            setLiWidth();\n        }\n\n        setApiResponseCopy(props.apiResponse);\n\n        console.log('console received new api progression');\n        console.log(props.apiResponse);\n\n        const msgs = document.getElementsByClassName('msg');\n        for (let i = 0; i < msgs.length; i++) {\n            const currMsg = msgs.item(i) as HTMLElement;\n            const tokens = currMsg.id.split('_');\n            if (!currMsg.innerHTML && mapInstrIdsToLabels.get(parseInt(tokens[1]))) {\n                currMsg.innerHTML = mapInstrIdsToLabels.get(parseInt(tokens[1]));\n            }\n        }\n\n    }, [props.apiResponse]);\n    \n    useEffect( () => {\n        if (props.ControlsProps.finishedExecuting === undefined) {\n            return;\n\n        // we're currently executing something\n        } else if (props.ControlsProps.finishedExecuting === false) {\n            toggleButtonsAndInfo();\n            updateInstrList();\n\n        // we're done executing\n        } else {\n            // toggleButtonsAndInfo executed by the reset event listener on Controls component\n            // resetting the instruction list also done on the controls component\n        }\n\n    }, [props.ControlsProps.finishedExecuting]);\n\n    useEffect( () => {\n        if (!props.sentInstructions) {\n            return;\n        }\n\n        console.log('updated instr:');\n        console.log(props.sentInstructions)\n        updateInstrList();\n    }, [props.sentInstructions]);\n\n    useEffect( () => {\n        if (instrList.length === 0) {\n            setMapInstrIdsToLabels(undefined);\n            // set this map to undefined so labels reset for next instructions\n\n            setDisplayResponse([]);\n\n        } else if (displayResponse.length === 0) {\n\n            instrList.forEach( instr => displayResponse[instr.instrId] = false );\n        }\n    }, [instrList]);\n\n    const toggleButtonsAndInfo = () => {\n        document.getElementById('prompt').classList.toggle('display-none');\n        document.getElementById('textarea').classList.toggle('display-none');\n        document.getElementById('liveinfo').classList.toggle('display-none');\n    };\n\n    const updateInstrList = () => {\n        const instrList = [] as Instruction[];\n        props.sentInstructions.forEach( instrArr => {\n            instrArr.forEach( instr => {\n                instrList.push(instr);\n            });\n        });\n\n        setInstrList(instrList);\n    };\n\n    const getInstrLabel = (instr: any, includeColon?: boolean): any => {\n\n        let mapRes = undefined;\n        let newMap = undefined as Map<number, string>;\n\n        if (mapInstrIdsToLabels) {\n            mapRes = mapInstrIdsToLabels.get(instr.instrId);\n            \n        } else {\n            newMap = new Map<number, string>();\n        }\n\n        // define labels for all instructions at once\n        if (mapRes === undefined) {\n            let label: string;\n\n            let labelList = [];\n            for (let i = 0; i < instrList.length; i++) {\n                const thisInstr = instrList[i];\n                const tokens = thisInstr.text.split(' ');\n                let opIndex = 0;\n                let done = false;\n\n                while (!done) {\n                    if (tokens[opIndex] === 'read' || tokens[opIndex] === 'r') {\n                        label = 'r';\n                        done = true;\n\n                    } else if (tokens[opIndex] === 'update' || tokens[opIndex] === 'u') {\n                        label = 'u';\n                        done = true;\n\n                    } else if (tokens[opIndex] === 'insert' || tokens[opIndex] === 'i') {\n                        label = 'i';\n                        done = true;\n\n                    } else if (tokens[opIndex] === 'delete' || tokens[opIndex] === 'd') {\n                        label = 'd';\n                        done = true;\n                    }\n\n                    opIndex++;\n                }\n\n                if (tokens[opIndex] === 'item' || tokens[opIndex] === 'i' ) {\n                    opIndex++;\n                }\n\n                if (label !== 'i') {\n                    label = label.concat(tokens[opIndex]);\n\n                    for (let i = labelList.length - 1; i >= 0; i--) {\n                        const currLabel = labelList[i].label;\n                        if (currLabel[0] === label[0] && currLabel[1] === label[1]) {\n\n                            if (currLabel.includes('_')) {\n                                label = label.concat('_' + (parseInt(currLabel[currLabel.length - 1]) + 1).toString());\n                            } else {\n                                label = label.concat('_2');\n                            }\n\n                        }\n                    }\n\n                } else {\n\n                    for (let i = labelList.length - 1; i >= 0; i--) {\n                        const currLabel = labelList[i].label;\n                        if (currLabel[0] === label[0]) {\n\n                            if (currLabel.includes('_')) {\n                                label = label.concat('_' + (parseInt(currLabel[currLabel.length - 1]) + 1).toString());\n                            } else {\n                                label = label.concat('_2');\n                            }\n\n                        }\n                    }\n                }\n\n                labelList.push({instrId: thisInstr.instrId, label: label});\n            }\n\n            labelList.forEach( li => {\n                newMap.set(li.instrId, li.label);\n            });\n\n            if (document.getElementById('run').innerHTML !== 'run') {\n                // this will set a new map for the second instruction ONLY\n                // when the run button's innerHTML is not 'run'\n                // this indicates that new instructions are on the way\n                setMapInstrIdsToLabels(newMap);\n            }\n\n            label = newMap.get(instr.instrId);\n\n            return includeColon === false ? label : label + \": \";\n\n        } else {\n            return includeColon === false ? mapRes : mapRes + \": \";\n        }\n    };\n\n    const getMsgColor = (val: any): string => {\n        return val.done ? 'gray' : val.msg.includes('final') ? 'blue' : val.msg.includes('original') ? 'yellow' : 'sky'\n    };\n\n    const setLiWidth = () => {\n        const totalWidth = document.getElementById('instrlist').offsetWidth;\n\n        let labels = document.getElementsByClassName('listlabel');\n\n        let maxWidth = 0;\n        for (let i = 0; i < labels.length; i++) {\n            const currWidth = (labels.item(i) as HTMLElement).offsetWidth;\n            if (currWidth > maxWidth) {\n                maxWidth = currWidth;\n            }\n        }\n\n        let msgs = document.getElementsByClassName('listmsg');\n        labels = document.getElementsByClassName('listlabel');\n\n        for (let i = 0; i < msgs.length; i++) {\n            let item = msgs.item(i) as HTMLElement;\n            let label = labels.item(i) as HTMLElement;\n\n            item.style.width = (totalWidth - maxWidth - 1) + 'px';\n            label.style.lineHeight = item.offsetHeight + 'px';\n        }\n    };\n\n    const getInstrClasses = (instrList: any[], key: number): string => {\n        let c = instrList[key].done ? 'gray' : 'sky';\n        if (key === 0) {\n            c = c.concat(' first');\n        }\n        if (key === instrList.length - 1) {\n            c = c.concat(' last');\n        }\n        return c;\n    };\n\n    const showResponse = (instrId: number): void => {\n        const newState = [];\n        displayResponse.forEach( (val, i) => {\n            newState[i] = i === instrId ? true : val;\n        });\n        setDisplayResponse(newState);\n    };\n\n    const getResponseText = (instr: any): any => {\n\n        let str = instr.res.itemId ? `itemId: ${instr.res.itemId}, ` : '';\n\n        if (instr.res.item) {\n            Object.keys(instr.res.item).forEach( (key) => {\n                str = str.concat(key + ': ' + instr.res.item[key] + ', ');\n            });\n            str = str.slice(0, -2); \n        }\n\n        return (<>\n            <span style={{color: '#f1ef43'}}>msg: </span><span dangerouslySetInnerHTML={{__html: instr.res.msg}}></span><br></br>\n            <span style={{color: '#f1ef43'}}>item: </span>\n            <span style={{color: '#f0d976'}}>{'{'}</span>\n                {str}\n            <span style={{color: '#f0d976'}}>{'}'}</span>\n        </>)\n    };\n\n\n    return (\n        <>\n        <div id=\"console\" className=\"console\">\n        <Controls {...props.ControlsProps} setInstrList={setInstrList} setApiResponseCopy={setApiResponseCopy} />\n  \n        <div id=\"prompt\" className=\"before-textarea blink\">>>></div>\n        <textarea id=\"textarea\" onClick={() => document.getElementById('prompt').classList.remove('blink')} onChange={props.handleTextAreaInput}></textarea>\n        <div id=\"liveinfo\" className=\"liveinfo display-none\">\n\n            <h3 className={'liveinfo-h3 top-margin-20'}>executing instructions:</h3>\n            <ul className='instrlist'>\n                {instrList.map((instr, key) => {\n                    return <li\n                        id={'instr' + instr.instrId.toString()}\n                        key={key}\n                        className={getInstrClasses(instrList, key)}\n                    >\n                        {instr.done ? <s>{'instr ' + getInstrLabel(instr)}</s> : 'instr ' + getInstrLabel(instr)}\n                        {instr.text}\n\n                        {instr.done && !displayResponse[instr.instrId] ? <div className=\"view-response\" onClick={() => showResponse(instr.instrId)}>view response</div> : ''}\n                        {displayResponse[instr.instrId] ? <div className='response-text'><span className='blue'> instr {getInstrLabel(instr, false)} response: </span><br></br>{getResponseText(instr)}</div> : ''}\n                    </li>\n                })}\n            </ul>\n            \n\n            <h3 className={'liveinfo-h3 top-margin'}>all system actions:</h3>\n            <ul className=\"instrlist\" id=\"instrlist\">\n                {apiResponseCopy.map( (val, key) => {\n                    return (\n                        <li key={key} className={key === 0 ? 'first' : key === apiResponseCopy.length - 1 ? 'last' : ''}>\n                            {val.done ? <div className='listlabel gray'><s>{getInstrLabel(val)}</s></div> : <div className='listlabel sky'>{getInstrLabel(val)}</div>}\n                            <div className={'listmsg ' + getMsgColor(val)}>{val.msg}</div>\n                        </li>\n                    )\n                })}\n            </ul>\n\n        </div>\n      </div>\n      <div id=\"end\"></div>\n      </>\n    );\n}\n\nexport default Console;","export default class DataRange {\n    nodeId: number;\n    start: number;\n    end: number;\n    full: boolean;\n    highestItemId: number;\n}","import DataRange from \"./DataRange\";\n\nexport default class OrderedMap {\n    map: Map<number, DataRange> = new Map();\n    keysInOrder: number[] = [];\n\n    set(num: number, dRange: DataRange): void {\n\n        // only push and re-sort if creating new map entry\n        if (!this.map.has(num)) {\n            this.keysInOrder.push(num);\n            this.keysInOrder.sort((a, b) => a - b); // TODO: push to correct index so sort is unneccesary\n        }\n\n        this.map.set(num, dRange);\n    }\n\n    get(num: number): DataRange {\n        return this.map.get(num);\n    }\n\n    delete(num: number): boolean {\n        let delIndex = undefined;\n        for (let i = 0; i < this.keysInOrder.length; i++) {\n            if (this.keysInOrder[i] === num) {\n                delIndex = i;\n                break;\n            }\n        }\n        if (delIndex !== undefined) {\n            this.keysInOrder.splice(delIndex, 1);\n        }\n        // TODO: do the above in a better way\n\n        return this.map.delete(num);\n    }\n}","import Network from \"./Network\";\nimport payload from \"./payload\";\nimport DataRange from \"./DataRange\";\nimport OrderedMap from \"./OrderedMap\";\n\nimport { Subject } from \"rxjs\";\nimport { buildNodeInfoString } from \"../util/interpret\";\n\nexport default class node {\n    id: number = 0;\n    connections: number[] = [];\n    latency: number = 100;\n    nodeMap: Map<number, node> = new Map(); // nodeId => node\n    dataRangeOrderedMap: OrderedMap = new OrderedMap(); // dataRange.start => dataRange\n\n    dataRange: DataRange[] = [];\n    dataSlice: Map<number, Object> = new Map();\n\n    clock: number[] = [];\n    mostRecentWrite: {clock: number[], itemId: number, item: any} = undefined;\n\n    eventStream: Subject<any> = undefined;\n\n    processPayload: (payload: payload, networkLatency: number, additionalDelay: number) => Promise<Object> = \n    (payload, networkLatency, additionalDelay) => {\n        if (payload.hasOwnProperty(\"msg\") && payload.msg === \"Hello!\") {\n            return Promise.resolve(\"Hello from node \" + this.id);\n\n        } else if (payload.pathIndex !== (payload.path.length - 1) && payload.pathIndex !== 0) {\n\n            // emit event\n            if (payload.op !== 'updateDataRange') {\n                this.eventStream.next({\n                    instrId: payload.instrId,\n                    nodeId: this.id,\n                    dir: 'recv',\n                    networkLatency: networkLatency,\n                    additionalDelay: additionalDelay,\n                    msg: 'middle node ' + this.id + ' received payload',\n                    payload: JSON.parse(JSON.stringify(payload)),\n                    done: false,\n                    nodeInfoString: buildNodeInfoString(this),\n                });\n            }\n            \n\n            // don't update clocks if the node is simply forwarding the message. Pretend like sourceNode is sending\n            // directly to targetNode\n            if (payload.dir === 'out') {\n                ++payload.pathIndex;\n            }else {\n                --payload.pathIndex;\n            }\n            payload.id = payload.path[payload.pathIndex];\n\n            // emit event\n            if (payload.op !== 'updateDataRange') {\n                this.eventStream.next({\n                    instrId: payload.instrId,\n                    nodeId: this.id,\n                    dir: 'send',\n                    msg: 'middle node ' + this.id + ' changed payload path, is forwarding',\n                    payload: JSON.parse(JSON.stringify(payload)),\n                    done: false,\n                    nodeInfoString: buildNodeInfoString(this),\n                });\n            }\n\n            return this.ping(payload);\n\n        } else if (payload.op === 'r' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\n            this.syncAndIncrementClock(payload.sourceClock);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'recv',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'final node ' + this.id + ' received payload',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            this.clock[this.id]++; // increment once more because we're sending a message back\n            payload.requestClock = payload.sourceClock;\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\n\n            let msg = 'itemId ' + payload.itemId + ' was not found in database';\n\n            for (let i = 0; i < this.dataRange.length; i++) {\n                if (payload.itemId >= this.dataRange[i].start && payload.itemId <= this.dataRange[i].end) {\n                    msg = 'successful';\n                    break;\n                }\n            }\n\n            let item = this.dataSlice.get(payload.itemId);\n\n            // item is a pointer. we need to deep copy it just in case \n            // another operation mutates item while this response is en route\n            item = JSON.parse(JSON.stringify(item));\n            \n            payload.msg = msg;\n            payload.item = item;\n            payload.dir = 'in';\n            payload.id = payload.path[--payload.pathIndex];\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                msg: 'final node ' + this.id + ' sending read response',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            return this.ping(payload);\n        \n        } else if (payload.op === 'u' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\n            this.syncAndIncrementClock(payload.sourceClock);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'recv',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'final node ' + this.id + ' received payload',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            let msg = 'itemId ' + payload.itemId + ' was not found in database';\n\n            for (let i = 0; i < this.dataRange.length; i++) {\n                if (payload.itemId >= this.dataRange[i].start && payload.itemId <= this.dataRange[i].end) {\n                    msg = 'successful';\n                    break;\n                }\n            }\n\n            let dbItem = this.dataSlice.get(payload.itemId);\n            const doIncomingWrite = this.sourceHasUpdatedVectorClock(payload);\n\n            if (dbItem && (doIncomingWrite || payload.item.deleted)) {\n                let changes = payload.item;\n\n                for (const key of Object.keys(changes)) {\n                    if (key === 'deleted' && changes[key] === true) {\n                        dbItem = {deleted: true};\n                        break;\n                    }\n                    dbItem[key] = changes[key];\n                }\n                this.dataSlice.set(payload.itemId, dbItem);\n            }\n\n            if ((doIncomingWrite === false) && (!!payload.item.deleted === false)) {\n                msg = 'this write has already been overwritten. Returning what is currently in the database';\n            }\n\n            if (doIncomingWrite) {\n                this.mostRecentWrite = {\n                    clock: JSON.parse(JSON.stringify(payload.sourceClock)), // yikes, gotta copy this instead of using pointers\n                    itemId: payload.itemId,\n                    item: payload.item\n                };\n            }\n\n            // item is a pointer. we need to deep copy it just in case \n            // another operation mutates item while this response is en route\n            dbItem = JSON.parse(JSON.stringify(dbItem));\n\n            payload.msg = msg;\n            payload.item = dbItem;\n            payload.dir = 'in';\n            payload.id = payload.path[--payload.pathIndex];\n\n            this.clock[this.id]++;\n            payload.requestClock = payload.sourceClock;\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                msg: 'final node ' + this.id + ' sending update response',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            return this.ping(payload);\n\n        } else if (payload.op === 'i' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\n            this.syncAndIncrementClock(payload.sourceClock);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'recv',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'final node ' + this.id + ' received payload',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n            \n            // increments at the bottom\n\n            let broadcast = 'successful';\n            let retItem = {};\n\n            let changedDataRange: DataRange = undefined;\n\n            if (!payload.hasOwnProperty('newRange')) {\n                let highestItemId = 0;\n\n                this.dataSlice.forEach( (val, key) => {\n                    if (key > highestItemId) {\n                        highestItemId = key;\n                    }\n                });\n\n                payload.itemId  = highestItemId + 1;\n\n                this.dataSlice.set(payload.itemId, payload.item);\n                retItem = this.dataSlice.get(payload.itemId);\n                this.dataRange.forEach( range => {\n                    if (payload.itemId === range.end) {\n                        range.full = true;\n                        broadcast = 'range that starts at ' + range.start + ' is now full';\n\n                        changedDataRange = range;\n                    }\n                });\n\n            } else { // we're creating a new data range on this node\n                this.dataRange.push(payload.newRange);\n                this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\n                \n                payload.itemId = payload.newRange.start;\n                this.dataSlice.set(payload.itemId, payload.item);\n                retItem = this.dataSlice.get(payload.itemId);\n                broadcast = 'new range ' + JSON.stringify(payload.newRange, null, '</br>') + ' added';\n\n                changedDataRange = payload.newRange;\n            }\n\n            /**\n             * if we filled the current range or created a new one,\n             * let all other nodes know\n             */\n            if (changedDataRange) {\n                const connMap = this.shortestPath(0, true);\n                let realConnMap: Map<number, {distance: any, visited: boolean, path: number[]}>;\n                if (connMap instanceof Map) {\n                    realConnMap = connMap;\n                }\n\n                realConnMap.forEach( (val, key) => {\n                    if (key !== this.id && key !== payload.path[0]) {\n                        this.clock[this.id]++;\n                        const tempClock = JSON.parse(JSON.stringify(this.clock));\n                        let pathIndex = val.path[0] === this.id ? 1 : 0;\n\n                        const payload = {\n                            id: val.path[pathIndex],\n                            path: val.path,\n                            pathIndex: pathIndex,\n                            op: 'updateDataRange',\n                            newRange: changedDataRange,\n                            dir: 'out',\n                            sourceClock: tempClock,\n                            instrId: key + 99, \n                        };\n\n                        // emit event, but it's too complicated :(\n                        // this.eventStream.next({\n                        //     instrId: payload.instrId,\n                        //     nodeId: this.id,\n                        //     dir: 'send',\n                        //     msg: 'node ' + this.id + ' emitting initial payload for updateDataRange op',\n                        //     payload: JSON.parse(JSON.stringify(payload)),\n                        //     done: false,\n                        //     nodeInfoString: buildNodeInfoString(this),\n                        // });\n    \n                        this.ping(payload);\n                    }\n                });\n            }\n\n            // item is a pointer. we need to deep copy it just in case \n            // another operation mutates item while this response is en route\n            retItem = JSON.parse(JSON.stringify(retItem));\n\n            // changed dataRange must be updated immediately on sending node in case it is sending another insert\n            // this doesn't cover the case when the source node incorrectly sends multiple inserts to this node\n            // when it should have only sent one insert to this node\n            payload.newRange = changedDataRange;\n\n            payload.msg = broadcast;\n            payload.item = retItem;\n            payload.dir = 'in';\n            payload.id = payload.path[--payload.pathIndex];\n\n            this.clock[this.id]++;\n            payload.requestClock = payload.sourceClock;\n            payload.sourceClock = JSON.parse(JSON.stringify(this.clock));\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'final node ' + this.id + ' sending insert response',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            return this.ping(payload);\n\n        } else if (payload.op === 'updateDataRange' && payload.pathIndex === payload.path.length - 1 && payload.dir === 'out') {\n            this.syncAndIncrementClock(payload.sourceClock);\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\n\n            this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\n\n            // emit event, but it's too complicated :(\n            // this.eventStream.next({\n            //     instrId: payload.instrId,\n            //     nodeId: this.id,\n            //     dir: 'recv',\n            //     networkLatency: networkLatency,\n            //     additionalDelay: additionalDelay,\n            //     msg: 'final node ' + this.id + ' received updateDataRange payload',\n            //     payload: JSON.parse(JSON.stringify(payload)),\n            //     done: false,\n            //     nodeInfoString: buildNodeInfoString(this),\n            // });\n            \n            return Promise.resolve({msg: 'updateDataRange on node id ' + this.id + ' done'});\n\n        } else if (payload.pathIndex <= 0 && payload.newRange) {\n            this.syncAndIncrementClock(payload.sourceClock);\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\n        \n            this.dataRangeOrderedMap.set(payload.newRange.start, payload.newRange);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'recv',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'original node ' + this.id + ' received response',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            return Promise.resolve(payload);\n\n        } else if (payload.pathIndex <= 0) {\n            \n            this.syncAndIncrementClock(payload.sourceClock);\n            // console.log('node id ' + this.id + ' new clock: ' + this.clock);\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'recv',\n                networkLatency: networkLatency,\n                additionalDelay: additionalDelay,\n                msg: 'original node ' + this.id + ' received response',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });            \n        \n            return Promise.resolve(payload);\n\n        } else {\n            return Promise.resolve(\"unknown\");\n        }\n\n    };\n\n    constructor(id: number, eventStream?: Subject<any>) {\n        this.id = id;\n\n        if (eventStream) {\n            this.eventStream = eventStream;\n        }\n    }\n\n    ping(payload: payload, additionalDelay?: number): Promise<Object> {\n\n        if (this.id < 0) {\n            return Promise.resolve('node: I am an invalid node!')\n\n        } else if (payload.path.length === 1 && payload.path[0] === this.id) {\n            payload.pathIndex = 0;\n            return this.processPayload(payload, 0, 0);\n        }\n\n        const nodeToPing = this.nodeMap.get(payload.id);\n        if (!nodeToPing) {\n            return Promise.resolve('invalid node id requested');\n        }\n\n        if (!additionalDelay) {\n            additionalDelay = 0;\n        }\n\n        return this.connections.includes(payload.id) ? nodeToPing.respond(payload, additionalDelay) : Promise.resolve(\"node: this node is not connected to id \" + payload.id)\n    }\n\n    respond(payload: payload, additionalDelay?: number): Promise<Object> {\n        return new Promise<Object>((resolve) => {\n            const networkLatency = this.delay();\n            const totalDelay = additionalDelay ? networkLatency + additionalDelay : networkLatency\n\n            setTimeout(() => {\n                resolve({networkLatency: networkLatency, additionalDelay: additionalDelay});\n            }, totalDelay);\n        })\n        .then(\n            (val) => this.processPayload(payload, (val as any).networkLatency, (val as any).additionalDelay)\n        );\n    }\n\n    // set data that nodes will need to know about other nodes\n    // includes node object metadata (not the actual data) and data range information\n    // (which node has which range of id's? Is that range full?)\n    findAllNodes(originalNode: node, network: Network): void {\n        this.connections.forEach(id => {\n            let newNode = network.getNode(id);\n            if (newNode.id >= 0 && !originalNode.nodeMap.has(newNode.id)) {\n                originalNode.nodeMap.set(newNode.id, newNode); // find all other nodes\n                newNode.dataRange.forEach( range => { // find all other dataRanges\n                    originalNode.dataRangeOrderedMap.set(range.start, range);\n                });\n                originalNode.clock.push(0); // initialize vector clock\n                newNode.findAllNodes(originalNode, network);\n            } else {\n                return;\n            }\n        });\n    }\n\n    read(itemId: number | Object, additionalDelay?: number, instrId?: number): Promise<Object> {\n        this.clock[this.id]++;\n        // console.log('node id ' + this.id + ' sending read: ' + this.clock);\n\n        if (typeof itemId === 'number') {\n            let targetNode = -1;\n\n            // If we didn't have dataRange start values mapped to node id's, this would be n-squared\n            // because for each node, we need to check each data range (and nodes can have multiple data ranges)\n\n            // TODO: make binary search instead of linear\n            const highest = this.dataRangeOrderedMap.keysInOrder.length - 1;\n            for (let i = highest; i >= 0; i--) {\n                let currDataRangeStart = this.dataRangeOrderedMap.keysInOrder[i];\n                if (currDataRangeStart <= itemId) {\n                    if (this.dataRangeOrderedMap.get(currDataRangeStart) === undefined) {\n                        targetNode = undefined;\n                    } else {\n                        targetNode = this.dataRangeOrderedMap.get(currDataRangeStart).nodeId;\n                    }\n                    break;\n                }\n            }\n\n            if (targetNode === undefined) {\n                return Promise.resolve({msg: 'requested id does not exist in db'});\n            }\n            \n            // get the shortest path\n            let prePath = this.shortestPath(targetNode, false);\n            let path: number[];\n            if (!(prePath instanceof Map)) {\n                path = prePath;\n            }\n\n            let pathIndex = path[0] === this.id ? 1 : 0;\n\n            const payload = {\n                id: path[pathIndex],\n                path: path,\n                pathIndex: pathIndex,\n                op: 'r',\n                itemId: itemId,\n                dir: 'out',\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\n                instrId: instrId\n            };\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                msg: 'node ' + this.id + ' emitting initial payload for read op',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n\n            return this.ping(payload, additionalDelay);\n        }\n\n        // else it's an object, non-index search\n\n        return Promise.resolve({result: 'unknown'});\n    }\n\n    update(itemId: number | Object, changes: Object, additionalDelay?: number, instrId?: number): Promise<Object> {\n        this.clock[this.id]++;\n        const updateOrDelete = (changes as any).deleted ? 'delete' : 'update';\n\n        if (typeof itemId === 'number') {\n            let targetNode = -1;\n\n            // If we didn't have dataRange start values mapped to node id's, this would be n-squared\n            // because for each node, we need to check each data range (and nodes can have multiple data ranges)\n\n            // TODO: make binary search instead of linear\n            const highest = this.dataRangeOrderedMap.keysInOrder.length - 1;\n            for (let i = highest; i >= 0; i--) {\n                let currDataRangeStart = this.dataRangeOrderedMap.keysInOrder[i];\n                if (currDataRangeStart <= itemId) {\n                    if (this.dataRangeOrderedMap.get(currDataRangeStart) === undefined) {\n                        targetNode = undefined;\n                    } else {\n                        targetNode = this.dataRangeOrderedMap.get(currDataRangeStart).nodeId;\n                    }\n                    break;\n                }\n            }\n\n            if (targetNode === undefined) {\n                return Promise.resolve({msg: 'requested id does not exist in db'});\n            }\n            \n            // get the shortest path\n            let prePath = this.shortestPath(targetNode, false);\n            let path: number[];\n            if (!(prePath instanceof Map)) {\n                path = prePath;\n            }\n\n            let pathIndex = path[0] === this.id ? 1 : 0;\n\n            const payload = {\n                id: path[pathIndex],\n                path: path,\n                pathIndex: pathIndex,\n                op: 'u',\n                itemId: itemId,\n                item: changes,\n                dir: 'out',\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\n                instrId: instrId\n            };\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                msg: 'node ' + this.id + ' emitting initial payload for ' + updateOrDelete + ' op',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n            \n            return this.ping(payload, additionalDelay);\n        }\n\n        // else it's an object, non-index search\n\n        return Promise.resolve({result: 'unknown'});\n    }\n\n    insert(item: Object | Object[], additionalDelay?: number, instrId?: number): Promise<Object> {\n        this.clock[this.id]++;\n        // console.log('node id ' + this.id + ' sending insert: ' + this.clock);\n\n\n        let targetNode = -1;\n\n        /**\n        * search all nodes for highest data range\n        * if there is room in that data range, simply add the data to the node that owns the highest data range\n        */\n        \n        const highest = this.dataRangeOrderedMap.keysInOrder[this.dataRangeOrderedMap.keysInOrder.length - 1];\n        const highestRange = this.dataRangeOrderedMap.get(highest);\n        if (highestRange && !highestRange.full) {\n            targetNode = highestRange.nodeId;\n            // get the shortest path\n            let prePath = this.shortestPath(targetNode, false);\n            let path: number[];\n            if (!(prePath instanceof Map)) {\n                path = prePath;\n            }\n \n            let pathIndex = path[0] === this.id ? 1 : 0;\n\n            const payload = {\n                id: path[pathIndex],\n                path: path,\n                pathIndex: pathIndex,\n                op: 'i',\n                item: item,\n                dir: 'out',\n                sourceClock: JSON.parse(JSON.stringify(this.clock)),\n                instrId: instrId\n            };\n\n            // emit event\n            this.eventStream.next({\n                instrId: payload.instrId,\n                nodeId: this.id,\n                dir: 'send',\n                msg: 'node ' + this.id + ' emitting initial payload for insert op',\n                payload: JSON.parse(JSON.stringify(payload)),\n                done: false,\n                nodeInfoString: buildNodeInfoString(this),\n            });\n             \n            return this.ping(payload, additionalDelay);\n        }\n\n        // else assign the new datarange to a node at random\n        // TODO: choose the node with the least number of data ranges, if there are multiple nodes then choose the one\n        // with the lowest id\n\n        let dataRangeToNode: [{numDataRange: number, nodeId: number}];\n\n        this.dataRangeOrderedMap.map.forEach( (currDataRange, key) => {\n\n            if (!dataRangeToNode) {\n                dataRangeToNode = [{numDataRange: 1, nodeId: currDataRange.nodeId}];\n    \n            } else if (!dataRangeToNode.find(val => val.nodeId === currDataRange.nodeId)) {\n                dataRangeToNode.push({numDataRange: 1, nodeId: currDataRange.nodeId});\n    \n            } else {\n                dataRangeToNode.find(val => val.nodeId === currDataRange.nodeId)\n                    .numDataRange++;\n            }\n        });\n\n        dataRangeToNode.sort((a, b) => a.numDataRange - b.numDataRange);\n\n        let count = 0;\n        for (let i = 0; i < dataRangeToNode.length; i++) {\n            if (dataRangeToNode[i].numDataRange > dataRangeToNode[0].numDataRange) {\n                break;\n            }\n            count++;\n        }\n\n        const leastDataNodes = dataRangeToNode.splice(0, count);\n        \n        leastDataNodes.sort((a, b) => a.nodeId - b.nodeId);\n\n        targetNode = leastDataNodes[0].nodeId;\n\n        const newRange = new DataRange();\n        newRange.start = highestRange.end + 1;\n        newRange.end = newRange.start + this.dataRange[0].end - this.dataRange[0].start;\n        newRange.full = false;\n        newRange.nodeId = targetNode;\n\n        // get the shortest path\n        let prePath = this.shortestPath(targetNode, false);\n        let path: number[];\n        if (!(prePath instanceof Map)) {\n            path = prePath;\n        }\n\n        let pathIndex = path[0] === this.id ? 1 : 0;\n\n        const payload = {\n            id: path[pathIndex],\n            path: path,\n            pathIndex: pathIndex,\n            op: 'i',\n            item: item,\n            newRange: newRange,\n            dir: 'out',\n            sourceClock: JSON.parse(JSON.stringify(this.clock)),\n            instrId: instrId\n        };\n\n        // emit event\n        this.eventStream.next({\n            instrId: payload.instrId,\n            nodeId: this.id,\n            dir: 'send',\n            msg: 'node ' + this.id + ' emitting initial payload for insert op',\n            payload: JSON.parse(JSON.stringify(payload)),\n            done: false,\n            nodeInfoString: buildNodeInfoString(this),\n        });\n\n        return this.ping(payload, additionalDelay);\n    }\n\n    delete(itemId: number | Object, additionalDelay?: number, instrId?: number): Promise<Object> {\n        return this.update(itemId, {deleted: true}, additionalDelay, instrId);\n    }\n\n    recover() {\n        // if ping hits a node that no longer exists, use parity (one parity node per 2 data nodes)\n        // to recover the lost node\n\n        // with this method, 1 out of every 3 nodes can fail and db is 1.33x the size without safety\n        // with straight up replication, you can lose 1 out of every 2 nodes but the db is 2x the size\n    }\n\n    retry() {\n        // if any operation fails at any point in the path, track the node where it failed and retry 2 or 3 times\n        // if the same node failed all of those times, kill it and recover!\n    }\n\n    shortestPath(targetId: number, returnConnMap?: boolean): number[] | Map<number, {distance: any, visited: boolean, path: number[]}> {\n        const connMap: Map<number, {distance: any, visited: boolean, path: number[]}> = new Map();\n\n        this.nodeMap.forEach( node => {\n            if (node.id === this.id) {\n                connMap.set(node.id, {distance: 0, visited: true, path: [node.id]});\n            } else {\n                connMap.set(node.id, {distance: undefined, visited: false, path: []});\n            }\n        });\n\n        const jobQ = [this.id];\n        while (jobQ.length > 0) {\n\n            // pop current node\n            const currId = jobQ.splice(0, 1)[0];\n            \n            const preCurrConn = connMap.get(currId);\n            let currConn: {distance: any, visited: boolean, path: number[]} = {distance: -1, visited: false, path: []}\n            if (!!preCurrConn) {\n                currConn = preCurrConn;\n            }\n\n            const preCurrNode = this.nodeMap.get(currId);\n            let currNode: node = new node(-1)\n            if (!!preCurrNode) {\n                currNode = preCurrNode;\n            }\n\n            // add connections to jobQ for BFS order\n            currNode.connections.forEach( id => {\n                const nextConn = connMap.get(id);\n                if (!!nextConn && !nextConn.visited) {\n                    nextConn.distance = currConn.distance + 1;\n                    nextConn.path = currConn.path.concat([id]);\n                    jobQ.push(id);\n                }\n            });\n\n            // mark currConn as visited\n            currConn.visited = true;\n            if (!returnConnMap && currId === targetId) {\n                break;\n            }\n        }\n\n        if (returnConnMap) {\n            return connMap;\n        } else {\n            const preRet = connMap.get(targetId);\n            let ret: number[] = [];\n            if (!!preRet) {\n                ret = preRet.path;\n            }\n            return ret;\n        }\n    }\n\n    delay(): number {\n        return Math.round(Math.random() * this.latency);\n    }\n\n    syncAndIncrementClock(sourceClock: number[]): void {\n        sourceClock.forEach( (val, i) => {\n            if (val > this.clock[i]) {\n                this.clock[i] = val;\n            }\n        });\n        this.clock[this.id]++;\n    }\n\n    sourceHasUpdatedVectorClock(payload: payload): boolean {\n\n        // if the source/request vector clock is updated, we will do the write\n        // if the source/request vector clock is behind our most recent write,\n        // we will ignore the incoming write\n        let doIncomingWrite = false;\n\n        if (this.mostRecentWrite === undefined) {\n            // console.log('VC: returning true because this is the first write');\n            return true;\n        }\n        \n\n        // console.log('inside VC stuff');\n        // console.log('mostRecentWrite: ' + JSON.stringify(this.mostRecentWrite));\n        // console.log('payload sourceClock: ' + JSON.stringify(payload.sourceClock));\n\n        for ( let i = 0; i < this.mostRecentWrite.clock.length; i++) {\n            if (this.mostRecentWrite.clock[i] < payload.sourceClock[i]) {\n                // then the source is either concurrent with or more updated than our last write\n                // therefore, we will do this write\n                doIncomingWrite = true;\n                break;\n            }\n        } // else, we won't do this write because it is behind the most recent write. It is logically in the past\n\n        // console.log('doIncomingWrite is ' + doIncomingWrite);\n        return doIncomingWrite;\n    }\n\n    emitEvent(event: any): void {\n        if (this.eventStream) {\n            this.eventStream.next(event);\n        }\n    }\n}","import node from \"./node\";\nimport DataRange from \"./DataRange\";\nimport { Subject } from \"rxjs\";\n\nexport default class Network {\n    nodeMap: Map<number, node> = new Map();\n    numNodes: number = undefined;\n    eventStream: Subject<any> = undefined;\n\n    // generates a biased graph, but apparently it's similar to real networks\n    // TODO: generate a truly random graph\n    constructor(numNodes: number, inputDataRangeSize?: number, inputEventStream?: Subject<any>) {\n\n        const dataRangeSize = inputDataRangeSize ? inputDataRangeSize : 5;\n        this.eventStream = inputEventStream ? inputEventStream : new Subject<any>();\n\n        this.numNodes = numNodes;\n\n        // populate nodes\n        for (let i = 0; i < numNodes; i++) {\n            let n = new node(i, this.eventStream);\n\n            if (i > 0) {\n                let connectionsToPush = [];\n    \n                // push a random first connection\n                connectionsToPush.push(\n                    Math.round(Math.random() * (this.nodeMap.size - 1))\n                );\n\n                // 50% chance of having second connection\n                // if ( i > 1 && Math.round(Math.random())) {\n                //     connectionsToPush.push(\n                //         Math.round(Math.random() * (this.nodeMap.size - 1))\n                //     );\n                // }\n\n                connectionsToPush.forEach( conn => {\n                    n.connections.push(conn);\n\n                    // non-directed graph, directed wouldn't make sense for real networks\n                    const connNode = this.nodeMap.get(conn);\n                    if (connNode.connections.indexOf(n.id) < 0) {\n                        connNode.connections.push(n.id);  \n                    }\n                });\n            }\n            \n            // populate node's initial data range metadata for use by other nodes on the network\n            let initialSlice = i * dataRangeSize;\n\n            const initialRange = new DataRange();\n            initialRange.nodeId = n.id;\n            initialRange.start = initialSlice;\n            initialRange.end = initialSlice + dataRangeSize - 1;\n            initialRange.full = true;\n            n.dataRange.push(initialRange);\n\n            // populate node's initial data\n            for (let i = 0; i < dataRangeSize; i++) {\n                n.dataSlice.set(initialSlice + i, {fruit: this.getRandomFruit(initialSlice + i)});\n            }\n\n            this.nodeMap.set(n.id, n);\n        }\n\n        // after all nodes are created, instruct all nodes to find each other\n        this.nodeMap.forEach(node => {\n            node.findAllNodes(node, this);\n        });\n    }\n\n    getNode(id: number): node {\n        let ret = this.nodeMap.get(id);\n        return !!ret ? ret : new node(-1);\n    }\n\n    getRandomNode(): node {\n        let ret = this.nodeMap.get(Math.round(Math.random() * (this.nodeMap.size - 1)));\n        if (ret === undefined) {\n            console.log('network: getRandomNode failed');\n        }\n        return !!ret ? ret : new node(-1);\n    }\n\n    getRandomFruit(num: number): string {\n        const rand = Math.random();\n        let f: string;\n\n        if (rand < 0.1) {\n            f = 'apple';\n        } else if (rand < 0.2) {\n            f = 'banana';\n        } else if (rand < 0.3) {\n            f = 'cherry';\n        } else if (rand < 0.4) {\n            f = 'strawberry';\n        } else if (rand < 0.5) {\n            f = 'pineapple';\n        } else if (rand < 0.6) {\n            f = 'tomato';\n        } else if (rand < 0.7) {\n            f = 'tomahhto';\n        } else if (rand < 0.8) {\n            f = 'passionfruit';\n        } else if (rand < 0.9) {\n            f = 'grapefruit';\n        } else if (rand < 0.95) {\n            f = 'dragonfruit';\n        } else {\n            f = 'a super expensive Japanese melon';\n        }\n\n        return f;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport Network from \"../../model/Network\";\nimport { Instruction, interpretOneCommand } from \"../../util/interpret\";\nimport {Subject, Subscription} from 'rxjs';\n\ninterface ApiProps {\n    numNodes?: number,\n    network: Network,\n    setNetwork: React.Dispatch<React.SetStateAction<Network>>,\n    sentInstructions: Instruction[][],\n    setApiResponse: React.Dispatch<React.SetStateAction<Promise<any>>>,\n    simFinishedExecuting: boolean;\n}\n\nconst Api: React.FunctionComponent<ApiProps> = (props) => {\n\n    const [ eventStream ] = useState(new Subject<any>());\n    const [ emittedEvents, setEmittedEvents ] = useState([]);\n    const [ apiFinishedExecuting, setApiFinishedExecuting ] = useState(false);\n\n    useEffect( () => {\n        props.setNetwork(generateNetwork(10));\n    }, []);\n\n    const generateNetwork = (numNodes: number) => {\n        return new Network(numNodes, 3, eventStream);\n    }\n\n    useEffect(() => {\n        // don't execute more backend stuff until the sim is done\n        if (!props.sentInstructions || props.simFinishedExecuting === false) {\n            return;\n        }\n\n        const subscription = eventStream.subscribe((event) => { emittedEvents.push(event) });\n        executeAllCommands(props.sentInstructions, 0, subscription);\n\n        /** \n         node 0 read 5\n         node 0 read 6\n\n         in-order\n         node 0 write 7 {\"hello\": \"hello!\"}\n         node 0 write 7 {\"hello\": \"second edit!\"}\n\n         n 0 u 6 {\"hello\":\"hello\"}\n         n 0 r 6\n         \n         in-order\n         n 0 d 6\n        */\n\n    }, [props.sentInstructions]);\n\n    useEffect( () => {\n        if (!apiFinishedExecuting) {\n            return;\n        }\n        props.setApiResponse(JSON.parse(JSON.stringify(emittedEvents)));\n\n        setEmittedEvents([]);\n        setApiFinishedExecuting(false);\n        \n    }, [apiFinishedExecuting]);\n\n\n    const executeAllCommands = (instrLists: Instruction[][], index: number, subs: Subscription) => {\n\n        if (index === instrLists.length) {\n            console.log('completed all commands!');\n            console.log(props.sentInstructions);\n\n            subs.unsubscribe();\n            setApiFinishedExecuting(true);\n\n            return {done: true};\n        }\n\n        const currList = instrLists[index];\n        const totalInList = currList.length;\n        let numCompletedInList = 0;\n\n        // all commands in this single block/list execute concurrently, but we only execute the next block/list\n        // when all commands in the current block/list resolve. This preserves the normal vs in-order execution methods\n        for (let i = 0; i < currList.length; i++) {\n\n            const originalInstr = currList[i];\n            const response = interpretOneCommand(originalInstr.instrId, originalInstr.text, true, props.network);\n            if (response instanceof Promise) {\n                response.then( (res) => {\n                    numCompletedInList++;\n\n                    originalInstr.res = res;\n                    // console.log('instr ' + originalInstr.instrId + ' completed');\n\n                    if (numCompletedInList === totalInList) {\n                        // console.log('completed this list/block!');\n                        return executeAllCommands(instrLists, ++index, subs);\n                    }\n                });\n            }\n        }\n    };\n\n    return ( <></> ); // nothing, this component's only purpose is to simulate an api\n};\n\nexport default Api;","import React, { useEffect, useState } from 'react';\nimport './NavAndMenu.css';\nimport menu from '../../resource/menu.svg';\n\n\ninterface MenuProps {\n    \n}\n\nconst Menu: React.FunctionComponent<MenuProps> = (props) => {\n    \n    const [ menuClasses, setMenuClasses ] = useState(['menu', 'overlay']);\n    const [ menuContents, setMenuContents ] = useState( 'initial-contents' );\n\n    const initialContents = (\n        <ul id=\"initial-contents\" className='initial-contents'>\n            <li id='tutorial-li'\n                onClick={() => {\n                    setMenuContents('tutorial-contents');\n                    setMenuClasses(['menu menu-full', 'overlay overlay-active']);\n\n                    if (document.getElementById('tutorial').classList.length < 2) {\n                        document.getElementById('tutorial').classList.add('display-none');\n                    }\n                }}\n            ><h2>welcome</h2></li>\n            <li onClick={() => {\n                setMenuContents('example-contents');\n                setMenuClasses(['menu menu-full', 'overlay overlay-active']);\n            }}><h2>example commands</h2></li>\n            <li onClick={() => {\n                setMenuContents('about-contents');\n                setMenuClasses(['menu menu-full', 'overlay overlay-active']);\n            }}><h2>motivation</h2></li>\n        </ul>\n    );\n\n    const getMsgShowcase = (o: {\n        id: string,\n        label: string,\n        bgc: string,\n        animation: string,\n        webkitAnimation: {name: string, duration: string, func: string, delay: string, repeat: string},\n        webkitAnimationClassName: string,\n        classes?: string\n    }) => {\n        if (o.webkitAnimationClassName.length > 0) {\n            (document.styleSheets[0] as any).insertRule(\n                `.${o.webkitAnimationClassName} {\n                    -webkit-animation-name: ${o.webkitAnimation.name};\n                    -webkit-animation-duration: ${o.webkitAnimation.duration};\n                    -webkit-animation-timing-function: ${o.webkitAnimation.func};\n                    -webkit-animation-delay: ${o.webkitAnimation.delay};\n                    -webkit-animation-iteration-count: ${o.webkitAnimation.repeat};\n                }`\n            );\n        }\n        \n        return <div \n            id        ={o.id}\n            className ={o.classes ? `msg-showcase ${o.webkitAnimationClassName} ` + o.classes : `msg-showcase ${o.webkitAnimationClassName}`}\n            style     ={{backgroundColor: o.bgc}}\n        >\n            {o.label}\n        </div>  \n    };\n\n    const backToMenuBtn = (\n        <span \n            className='back-to-menu'\n            onClick={() => {\n                setMenuContents('initial-contents');\n                setMenuClasses(['menu menu-active', 'overlay overlay-active']);\n                document.getElementById('root').style.removeProperty('height');\n                document.getElementById('app').style.removeProperty('height');\n            }}\n        >back to menu</span>\n    );\n    \n    const tutorialContents = ( <>\n        {backToMenuBtn}\n\n        <div id=\"tutorial-wrapper\" className=\"menu-content-wrapper\">\n            <h1 id=\"tutorial-contents-hero\" className=\"contents-hero tutorial-first-fade\">\n                Welcome.\n            </h1>\n            <p id=\"tutorial-second-fade\" className=\"tutorial-second-fade\">\n                You might have heard about Lamport clocks, but what the heck are they actually used for? Keep reading to find out.\n            </p>\n\n            {window.innerWidth > 1195 ? \n                <p className=\"tutorial-second-fade\">\n                    *This app was designed on mobile first. \n                    Feel free to visit on your phone as well - \n                    this page is especially suited for vertical scrolling :)\n                </p>\n                :\n                ''}\n\n            <ul id=\"tutorial-third-fade\" className=\"instrlist menulist tutorial-third-fade\">\n                <li className=\"first\">\n                    <p>Node 1 is a node in our database.</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div id=\"s0n1\" className=\"dot-showcase\" style={{float: 'none'}}>1</div>\n                    </div>\n                </li>\n                \n                <li>\n                    <p>Let's send two write requests to the node, one after the other: w1 and w2.</p>\n                    <div className=\"showcase\">\n                        {getMsgShowcase({\n                            id: 's1w2',\n                            label: 'w2',\n                            bgc: 'rgba(24, 205, 250, 0.904)',\n                            animation: 's1 10s linear 8s infinite',\n                            webkitAnimation: {name: 'wk-s1', duration: '10s', func: 'linear', delay: '8s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s1-class',\n                        })}\n                        {getMsgShowcase({\n                            id: 's1w1',\n                            label: 'w1',\n                            bgc: 'rgba(250, 235, 24, 0.904)',\n                            animation: 's1 10s linear 8s infinite',\n                            webkitAnimation: {name: 'wk-s1', duration: '10s', func: 'linear', delay: '8s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s1-class',\n                        })}\n                        <div id=\"s1n1\" className=\"dot-showcase\">1</div>\n                    </div>\n                </li>\n                <li>\n                    <p>w2 travels faster and completes first.</p>\n                    <div className=\"showcase\">\n                        {getMsgShowcase({\n                            id: 's2w2',\n                            label: 'w2',\n                            bgc: 'rgba(24, 205, 250, 0.904)',\n                            animation: 's2w2 10s linear 14s infinite',\n                            webkitAnimation: {name: 'wk-s2w2', duration: '10s', func: 'linear', delay: '14s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s2w2-class',\n                        })}\n                        {getMsgShowcase({\n                            id: 's2w1',\n                            label: 'w1',\n                            bgc: 'rgba(250, 235, 24, 0.904)',\n                            animation: 's2w1 10s linear 14s infinite',\n                            webkitAnimation: {name: 'wk-s2w1', duration: '10s', func: 'linear', delay: '14s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s2w1-class',\n                        })}\n                        <div id=\"s2n1\" className=\"dot-showcase\">1</div>\n                    </div>\n                </li>\n                <li>\n                    <p>What happens when w1 arrives at the node after w2 already completed?</p>\n                    <p>The database will write w1, and end up with w1's value.</p>\n                    <div className=\"showcase showcase-3\">\n                        {getMsgShowcase({\n                            id: 's3w1',\n                            label: 'w1',\n                            bgc: 'rgba(250, 235, 24, 0.904)',\n                            animation: 's3w1 10s linear 18s infinite',\n                            webkitAnimation: {name: 'wk-s3w1', duration: '10s', func: 'linear', delay: '18s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s3w1-class',\n                            classes: 'msg-showcase-3 s3n1',\n                        })}\n                        {getMsgShowcase({\n                            id: 's3w2',\n                            label: 'w2',\n                            bgc: 'rgba(24, 205, 250, 0.904)',\n                            animation: 's3w2 10s linear 18s infinite',\n                            webkitAnimation: {name: 'wk-s3w2', duration: '10s', func: 'linear', delay: '18s', repeat: 'infinite'},\n                            webkitAnimationClassName: 'wk-s3w2-class',\n                            classes: 'msg-showcase-3 s3n1',\n                        })}\n                        <div id=\"s3n3\" className=\"dot-showcase\" style={{backgroundColor: 'rgba(250, 24, 24, 0.904)', color: '#fff'}}>w1</div>\n                        <div id=\"s3n2\" className=\"dot-showcase s3n2\" style={{backgroundColor: 'rgba(24, 205, 250, 0.904)', animation: 's3n2 10s linear 18s infinite'}}>w2</div>\n                        <div id=\"s3n1\" className=\"dot-showcase s3n1\" style={{animation: 's3n1 10s linear 18s infinite'}}>1</div>\n                    </div>\n                    <p style={{marginTop: '15px'}}>Seems backwards right? w2 was sent most recently so the database should end up with w2's value.</p>\n                </li>\n                <li>\n                    <p>To solve this problem, each request is sent with a <strong>clock</strong>. It's just a number that counts up for each request sent and received.</p>\n                    <p>The clocks tell us that we sent w1 at time 5. We sent w2 right after, at time 6.</p>\n\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            {getMsgShowcase({\n                                id: 's4w1',\n                                label: 'w1',\n                                bgc: 'rgba(250, 235, 24, 0.904)',\n                                animation: '',\n                                webkitAnimation: {name: '', duration: '', func: '', delay: '', repeat: ''},\n                                webkitAnimationClassName: '',\n                                classes: 'margin-auto display-block',\n                            })}\n                            <div className=\"tut-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div> \n                        </div>\n                        <div className=\"half float-right\">\n                            {getMsgShowcase({\n                                id: 's4w2',\n                                label: 'w2',\n                                bgc: 'rgba(24, 205, 250, 0.904)',\n                                animation: '',\n                                webkitAnimation: {name: '', duration: '', func: '', delay: '', repeat: ''},\n                                webkitAnimationClassName: '',\n                                classes: 'margin-auto display-block',\n                            })}\n                            <div className=\"tut-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>The node receives w2 first, and it remembers that w2 was sent at time 6.</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>w2</div>\n                        <div className=\"tut-clock-label\">\n                            <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                            <br></br>\n                            <span style={{color: \"#18cdfa\"}}>[</span>\n                            <span style={{color: '#f1f5fd'}}> 6 </span>\n                            <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>The node then receives w1. w1's clock is \"behind\" w2's clock so the node doesn't execute w1.</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            {getMsgShowcase({\n                                id: 's4w1',\n                                label: 'w1',\n                                bgc: 'rgba(250, 235, 24, 0.904)',\n                                animation: '',\n                                webkitAnimation: {name: '', duration: '', func: '', delay: '', repeat: ''},\n                                webkitAnimationClassName: '',\n                                classes: 'margin-auto display-block'\n                            })}\n                            <div className=\"tut-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div> \n                        </div>\n                        <div className=\"half float-right\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>w2</div>\n                            <div className=\"tut-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                    </div>\n                    <p style={{marginTop: '15px'}}>When w1 arrives, it has already been overwritten by the more recent operation w2.</p>\n                    <p><strong>This is how logical clocks are used in distributed systems.</strong></p>\n                </li>\n                \n                <li className=\"last\">\n                    <p>To see logical clocks in action, enter these commands into the console on the main page: </p>\n                    <div className=\"tut-clock-label\" style={{paddingLeft: '10px', paddingRight: '10px', textAlign: 'left'}}>\n                        <span style={{color: '#f1f5fd', display: 'block', marginBottom: '5px'}}>\n                            {'node 0 update item 15 {\"fruit\": \"apple\"} delay 5'}\n                        </span>\n                        <span style={{color: '#f1f5fd', display: 'block'}}>\n                            {'node 0 update item 15 {\"fruit\": \"kiwi\", \"secondEdit\":\"true\"}'}\n                        </span>\n                    </div>\n                    <p style={{marginTop: '15px'}}>To learn what else you can do with this database simulation, \n                        <span className=\"open-examples\" onClick={() => {\n                            document.getElementById('root').style.removeProperty('height');\n                            document.getElementById('app').style.removeProperty('height');\n                            setMenuContents('example-contents');\n                            try {\n                                document.getElementById('menu-close').scrollIntoView({ behavior: \"smooth\"});\n                            } catch (e) { // mobile safari does not support smooth scroll\n                                document.getElementById('menu-close').scrollIntoView();\n                            };\n\n                            // give the new menu contents some time to expand to new height then set app height to new height\n                            setTimeout( () => {\n                                document.getElementById('root').style.height = document.getElementById('menu').offsetHeight + 'px';\n                                document.getElementById('app').style.height = document.getElementById('menu').offsetHeight + 'px';\n                            }, 500);\n                                                          \n                        }}>{window.innerWidth > 1195 ? ' click here.' : ' tap here.'}</span>\n                    </p>\n                </li>\n            </ul>\n        </div>\n    </>);\n\n    const exampleContents = (<>\n        {backToMenuBtn}\n        <div id=\"example-wrapper\" className=\"menu-content-wrapper\">\n            <h1 id=\"example-contents-hero\" className=\"contents-hero\">\n                Example Commands\n            </h1>\n            <ul id=\"example-list\" className=\"instrlist menulist extra-p-margin\">\n                <li className=\"first\">\n                    <p>All commands can be abbreviated.</p>\n                    <p>Read</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>node 0 read item 15</span>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>n 0 r 15</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>Insert</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'node 0 insert item {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'n 0 i {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>Update</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'node 0 update item 15 {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'n 0 u 15 {\"anyField\":\"anyString\", \"anyNumber\":10 }'}</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>Delete</p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'node 0 delete item 15'}</span>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'n 0 d 15'}</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>\n                        Execute multiple commands by entering them on different lines in the console.\n                    </p>\n                    <p>\n                        <strong>Normal</strong>, the default, sends at the same time.\n                    </p>\n                    <p>\n                        <strong>In-order</strong> guarantees that the first command finishes before the second.\n                    </p>\n                    <p>\n                        <strong>Delay</strong> delays the command by a number of seconds.\n                    </p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'node 0 update item 15 {\"secondEdit\":false} delay 5'}</span>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <span>{'node 0 update item 15 {\"secondEdit\":true}'}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <div>{'in-order'}</div>\n                                <div>{'node 0 read item 15 delay 5'}</div>\n                                <div>{'node 0 read item 15'}</div>\n                            </div> \n                        </div>\n                        <div className=\"half\">\n                            <div className=\"ex-clock-label\">\n                                <div>{'normal'}</div>\n                                <div>{'node 0 read item 15'}</div>\n                                <div>{'node 0 update item 15 {\"secondEdit\":true}'}</div>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <h3 style={{margin: '0'}}>Workflow</h3>\n                    <p>\n                        {window.innerWidth > 1195 ? 'Click ' : 'Tap '}\n                        each node to display its data.\n                    </p>\n                    <p>\n                        Note the nodeId that will send the request, and the itemId that will be read or modified.\n                    </p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: \"#f1ef43\"}}>node 0 info</span>\n                            </div> \n                        </div>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: '#f1ef43'}}>dataSlice: </span>\n                                <span style={{color: '#18cdfa'}}>[</span>\n                                <span style={{color: '#f0d976'}}>{'{'}</span>\n                                itemId: 15, ...\n                                <span style={{color: '#f0d976'}}>{'}'}</span>\n                                <span style={{color: '#18cdfa'}}>]</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li>\n                    <p>\n                        Type your command in the console.\n                    </p>\n                    <p>\n                        Try {window.innerWidth > 1195 ? ' clicking ' : ' tapping '}\n                        the node that will send the command. Notice how its clock changes during the command.\n                    </p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 5 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block'}}>0</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 6 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li className=\"last\">\n                    <p>\n                        Hit the run button, and {window.innerWidth > 1195 ? ' click ' : ' tap '}\n                        the blue message that pops up to see its contents. Then hit the play button.\n                    </p>\n                    <p>\n                        Pause the sim before and after the message hits the target node that contains data to be read or modified.\n                         How does the the target node's clock change?\n                    </p>\n                    <div className=\"showcase\" style={{textAlign: 'center'}}>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 0 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                        <div className=\"half ex-half\">\n                            <div className=\"dot-showcase\" style={{float: 'none', margin: 'auto', display: 'block', backgroundColor: 'rgba(24, 205, 250, 0.904)'}}>5</div>\n                            <div className=\"ex-clock-label\">\n                                <span style={{color: \"#f1ef43\", marginLeft: \"10px\"}}>clock: </span>\n                                <br></br>\n                                <span style={{color: \"#18cdfa\"}}>[</span>\n                                <span style={{color: '#f1f5fd'}}> 2 </span>\n                                <span style={{color: \"#18cdfa\", marginRight: \"10px\"}}>]</span>\n                            </div>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </>);\n\n    const aboutContents = (<>\n        {backToMenuBtn}\n        <div id=\"about-wrapper\" className=\"menu-content-wrapper\">\n            <h1 id=\"about-contents-hero\" className=\"contents-hero\">\n                Motivation\n            </h1>\n            <ul id=\"about-list\" className=\"instrlist menulist extra-p-margin\">\n                <li className=\"first\" style={{paddingTop: '0'}}>\n                    <h3 style={{margin: '0'}}>Hello, I'm Aleexsan Adal.</h3>\n                    <p>\n                        I heard about Lamport clocks from this episode of <span>\n                            <a target=\"_blank\" href=\"https://softwareengineeringdaily.com/2019/09/18/distributed-databases-with-aly-cabral/\">\n                                Software Engineering Daily,\n                            </a>\n                        </span> and did some googling on the concept.\n                    </p>\n                    <p> \n                        Most articles explained what the algorithm is (just increment for messages sent and received), \n                        but none had a clear explanation of <strong>why a distributed system needs to track logical time.</strong>\n                    </p>\n                </li>\n                <li>\n                    <p>\n                        <strong>The system needs clocks to re-order operations that arrive out of order. </strong>\n                        You could send write 1 and then write 2, but they may arrive in the reverse order due to network delay.\n                    </p>\n                    <p>\n                        The clocks will show which op was sent first, so the database nodes must compare the arriving clock with the most recent write's clock\n                        to determine what to do.\n                    </p>\n                    <p>This is the example explained in the welcome section.</p>\n                </li>\n                <li>\n                    <p>\n                        I'm still bewildered that this example or similar ones aren't included in every explanation of logical clocks.\n                    </p>\n                </li>\n                <li className=\"last\">\n                    <p>    \n                        --- From a visual learner, supporting other visual learners. Those engineering textbooks sure aren't.\n                    </p>\n                </li>\n            </ul>\n        </div>\n    </>);\n\n    const openMenu = () => {\n\n        if (document.getElementById('tutorial-wrapper')) {\n            setMenuClasses(['menu menu-full', 'overlay overlay-active']);\n\n        } else {\n            setMenuClasses(['menu menu-active', 'overlay overlay-active']);\n        }\n    };\n\n    useEffect( () => {\n\n        // expand the height of the app so scrolling isn't weird af\n        if (menuClasses[0] === 'menu menu-full') {\n\n            document.getElementById('root').style.height = document.getElementById('menu').offsetHeight + 'px';\n            document.getElementById('app').style.height = document.getElementById('menu').offsetHeight + 'px';\n\n        // collapse the app height back to normal\n        } else if (menuClasses[0] === 'menu') {\n            if (menuContents !== 'initial-contents') {\n                setMenuContents('initial-contents');\n            }\n\n            document.getElementById('root').style.removeProperty('height');\n            document.getElementById('app').style.removeProperty('height');\n        }\n    }, [menuClasses]);\n\n    useEffect( () => {\n        if (menuContents === 'tutorial-contents') {\n\n            const msgWidth = document.getElementById('s1w1').offsetWidth;\n    \n            let w1ToEnd = document.getElementById('s1n1').getBoundingClientRect().left\n            - document.getElementById('s1w1').getBoundingClientRect().left\n            - msgWidth;\n\n            let w2ToEnd = document.getElementById('s1n1').getBoundingClientRect().left\n            - document.getElementById('s1w2').getBoundingClientRect().left\n            - msgWidth;\n            \n            // showcase 1\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s1 {\n                    0% { transform: translate(0, 0); }\n                    25% { transform: translate(${w1ToEnd}px, 0); }\n                    100% { transform: translate(${w1ToEnd}px, 0); }\n                }`\n            );\n\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s1 {\n                    0% { -webkit-transform: translate(0, 0); }\n                    25% { -webkit-transform: translate(${w1ToEnd}px, 0); }\n                    100% { -webkit-transform: translate(${w1ToEnd}px, 0); }\n                }`\n            );\n\n            //showcase 2\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s2w1 {\n                    0% { transform: translate(0, 0); }\n                    25% { transform: translate(${w1ToEnd - msgWidth}px, 0); }\n                    100% { transform: translate(${w1ToEnd - msgWidth}px, 0); }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s2w2 {\n                    0% { transform: translate(0, 0); }\n                    17% { transform: translate(${w2ToEnd}px, 0); }\n                    100% { transform: translate(${w2ToEnd}px, 0); }\n                }`\n            );\n\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s2w1 {\n                    0% { -webkit-transform: translate(0, 0); }\n                    25% { -webkit-transform: translate(${w1ToEnd - msgWidth}px, 0); }\n                    100% { -webkit-transform: translate(${w1ToEnd - msgWidth}px, 0); }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s2w2 {\n                    0% { -webkit-transform: translate(0, 0); }\n                    17% { -webkit-transform: translate(${w2ToEnd}px, 0); }\n                    100% { -webkit-transform: translate(${w2ToEnd}px, 0); }\n                }`\n            );\n\n            // showcase 3\n            // w1 and w2 have already been translated because\n            // node 2 and 3 were in the way so their final trans is msgWidth * 3 or 4\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s3w2 {\n                    0%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    30%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    40%  { transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\n                    100% { transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s3n1 {\n                    0%  { opacity: 1; }\n                    30%  { opacity: 1; }\n                    40%  { opacity: 0; }\n                    100% { opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s3w1 {\n                    0%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    50%  { transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    60%  { opacity: 1; }\n                    70%  { transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\n                    100% { transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@keyframes s3n2 {\n                    0%  { opacity: 1; }\n                    60%  { opacity: 1; }\n                    70%  { opacity: 0; }\n                    100% { opacity: 0; }\n                }`\n            );\n\n\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s3w2 {\n                    0%  { -webkit-transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    30%  { -webkit-transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    40%  { -webkit-transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\n                    100% { -webkit-transform: translate(${(msgWidth) * 3}px, 0); opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s3n1 {\n                    0%  { opacity: 1; }\n                    30%  { opacity: 1; }\n                    40%  { opacity: 0; }\n                    100% { opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s3w1 {\n                    0%  { -webkit-transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    50%  { -webkit-transform: translate(${(msgWidth) * 2}px, 0); opacity: 1; }\n                    60%  { opacity: 1; }\n                    70%  { -webkit-transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\n                    100% { -webkit-transform: translate(${(msgWidth) * 4}px, 0); opacity: 0; }\n                }`\n            );\n            (document.styleSheets[0] as any).insertRule(\n                `@-webkit-keyframes wk-s3n2 {\n                    0%  { opacity: 1; }\n                    60%  { opacity: 1; }\n                    70%  { opacity: 0; }\n                    100% { opacity: 0; }\n                }`\n            );\n        }\n\n    }, [menuContents]);\n\n    const returnContents = (label: string) => {\n        if (label === 'tutorial-contents') {\n            return tutorialContents;\n        } else if (label === 'example-contents') {\n            return exampleContents;\n        } else if (label === 'about-contents') {\n            return aboutContents;\n        } else {\n            return initialContents;\n        }\n    }\n\n    return (<>\n        <header>\n            <nav id='nav'>\n            <div className=\"nav-title\">\n                dist-sim\n            </div>\n            <img id=\"menu-btn\" className=\"menu-btn\" src={menu} alt=\"Menu icon\" onClick={() => openMenu()}></img>\n            </nav>\n        </header>\n\n        <div id='overlay' className={menuClasses[1]} onClick={() => setMenuClasses(['menu', 'overlay'])}></div>\n        <div id='menu' className={menuClasses[0]}>\n            <svg onClick={() => setMenuClasses(['menu', 'overlay'])}\n                id=\"menu-close\" className=\"menu-close\" viewBox=\"0 0 20 20\">\n\t\t\t\t<path d=\"M10.185,1.417c-4.741,0-8.583,3.842-8.583,8.583c0,4.74,3.842,8.582,8.583,8.582S18.768,14.74,18.768,10C18.768,5.259,14.926,1.417,10.185,1.417 M10.185,17.68c-4.235,0-7.679-3.445-7.679-7.68c0-4.235,3.444-7.679,7.679-7.679S17.864,5.765,17.864,10C17.864,14.234,14.42,17.68,10.185,17.68 M10.824,10l2.842-2.844c0.178-0.176,0.178-0.46,0-0.637c-0.177-0.178-0.461-0.178-0.637,0l-2.844,2.841L7.341,6.52c-0.176-0.178-0.46-0.178-0.637,0c-0.178,0.176-0.178,0.461,0,0.637L9.546,10l-2.841,2.844c-0.178,0.176-0.178,0.461,0,0.637c0.178,0.178,0.459,0.178,0.637,0l2.844-2.841l2.844,2.841c0.178,0.178,0.459,0.178,0.637,0c0.178-0.176,0.178-0.461,0-0.637L10.824,10z\"></path>\n\t\t\t</svg>\n\n            {returnContents(menuContents)}\n        </div>\n    </>)\n}\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Sim from './component/Sim/Sim';\nimport Console from './component/Console/Console';\nimport Api from './component/Api/Api';\nimport NavAndMenu from './component/NavAndMenu/NavAndMenu';\n\nimport { Instruction, buildNodeInfoString, buildPayloadInfoString } from './util/interpret';\nimport Network from './model/Network';\nimport { ControlsProps } from './component/Controls/Controls';\n\nconst App: React.FC = () => {\n    \n  // this needs to be a pointer or the tsx element will just do a primitive string copy and won't receive changes\n  const [nodeInfoClasses, setNodeInfoClasses] = useState(['node-info']);\n  const [runButtonClasses, setRunButtonClasses] = useState(['run']);\n  const [ runState, setRunState ] = useState('init');\n\n  // this is set when the API component mounts. For a real API, make the request for a network object from the real API\n  const [network, setNetwork] = useState(undefined as Network);\n\n  // initialize state to null values but keep those suckers typed... mostly\n  const [instructionsToSend, setInstructionsToSend] = useState(undefined as Instruction[][]);\n  const [apiResponse, setApiResponse] = useState(undefined);\n\n  // are we done executing the current set of instructions?\n  const [ finishedExecuting, setFinishedExecuting ] = useState(undefined as boolean);\n\n  // display progressive node info as simulation executes\n  // if we didn't have this state, getNodeInfo would display the completed node state immediately\n  // because the simulation has already been done on the displayed network\n  const [ mostRecentNodeInfo ] = useState(new Map<number, string>());\n  const [ mostRecentStepCompleted, setMostRecentStepCompleted ] = useState([] as number[]);\n\n  // re render sim if screen is over a certain size and we need to change padding\n  const [ rerenderSim, setRerenderSim ] = useState(false);\n\n  useEffect( () => {\n    if (window.innerWidth > 1195) {\n      document.documentElement.style.setProperty('--sim-wrapper-vertical-padding', '70px');\n      document.documentElement.style.setProperty('--sim-wrapper-horizontal-padding', '70px');\n      setRerenderSim(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!network) {\n      return;\n    }\n\n    document.documentElement.style.setProperty('--prompt-width', document.getElementById(\"prompt\").offsetWidth + 'px');\n    document.getElementById(\"textarea\").style.height = (document.getElementById(\"console\").offsetHeight - 30 - document.getElementById(\"run\").offsetHeight) + 'px';\n    \n    document.addEventListener('click',\n      (ev) => {\n        if ((ev.target as Element).id === 'circle-wrapper' || (ev.target as Element).id === 'sim-wrapper') {\n          closeNodeInfo();\n          // scrollToTop();\n          // document.getElementById('app').style.overflowY = 'hidden';\n        }\n      });\n\n    // when user clicks off of the textarea, scroll up so there isn't awks whitespace at the bottom\n    const ta = document.getElementById(\"textarea\");\n    ta.addEventListener('click', event => {\n\n      if (window.innerWidth <= 767) {\n        scrollToEnd();\n      }\n      document.removeEventListener('click', detectClickOffTextArea);\n      document.addEventListener('click', detectClickOffTextArea);\n    });\n\n    // fill map with current node data\n    for (let i = 0; i < network.numNodes; i++) {\n      mostRecentNodeInfo.set(i, buildNodeInfoString(network.getNode(i)));\n    }\n\n  }, [network]);\n\n  useEffect( () => {\n    if (!apiResponse) {\n      return;\n    }\n\n    let i = mostRecentStepCompleted.length ? mostRecentStepCompleted[0] : 0;\n\n    while (apiResponse[i] && apiResponse[i].done) {\n      mostRecentNodeInfo.set(apiResponse[i].nodeId, apiResponse[i].nodeInfoString);\n      i++;\n    }\n\n    mostRecentStepCompleted[0] = i > 0 ? i - 1 : 0;\n\n  }, [apiResponse]);\n\n  const detectClickOffTextArea = (event: MouseEvent) => {\n    \n    // only scroll up if the run button is not active. if it is active, controls component will scroll up for us\n    const runButtonActive = document.getElementById(\"run\").contains(event.target as Node) && document.getElementById(\"run\").classList.length > 1;\n\n    if (!document.getElementById(\"textarea\").contains(event.target as Node) && !runButtonActive) {\n      scrollToTop();\n      document.removeEventListener('click', detectClickOffTextArea);\n    }\n  }\n\n  const getNodeInfo = (id: number) => displayInfo(mostRecentNodeInfo.get(id));\n\n  const getPayloadInfo = (apiResIndex: number, msgId: string) => \n    displayInfo(\n      buildPayloadInfoString(\n        apiResponse[apiResIndex].payload,\n        msgId\n      )\n    );\n\n  const displayInfo = (info: string) => {\n    document.getElementById('node-info-wrapper').innerHTML = info;\n    if (document.getElementById('node-info').classList.length === 1) {\n\n      setNodeInfoClasses(['node-info node-info-active']);\n\n      // remove right after the animation ends (0.3s)\n      setTimeout( () => document.getElementById('liveinfo').style.display = 'none', 300);\n      // scrollToEnd();\n    }\n  };\n\n  const closeNodeInfo = () => {\n    setNodeInfoClasses(['node-info']);\n\n    document.getElementById('liveinfo').style.removeProperty('display');\n    setTimeout( () => document.getElementById('node-info').style.removeProperty('height'), 300);\n  }\n\n  const handleTextAreaInput = (ev) => {\n    const currValue = (document.getElementById('textarea') as any).value;\n\n    if (document.getElementById('tutorial').classList.length === 1) {\n      document.getElementById('tutorial').classList.add('display-none');\n    }\n\n    if (runButtonClasses[0] !== 'run run-active' && currValue) {\n      setRunButtonClasses(['run run-active']);\n      document.getElementById('run').classList.add('run-active');\n\n    } else if (!currValue) {\n      setRunButtonClasses(['run']);\n      document.getElementById('run').classList.remove('run-active');\n    }\n  };\n\n  const scrollToTop = () => {\n    try {\n      document.getElementById('nav').scrollIntoView({ behavior: \"smooth\"});\n    } catch (e) { // mobile safari does not support smooth scroll\n      document.getElementById('nav').scrollIntoView();\n    }\n  };\n\n  const scrollToEnd = () => {\n    try {\n      document.getElementById('end').scrollIntoView({behavior: \"smooth\"});\n    } catch (e) { // mobile safari does not support smooth scroll\n      document.getElementById('end').scrollIntoView();\n    }\n  };\n\n  const getControlsProps = (): ControlsProps => {\n    return {\n      setInstructionsToSend: setInstructionsToSend,\n      finishedExecuting: finishedExecuting,\n      setFinishedExecuting: setFinishedExecuting,\n      setRunButtonClasses: setRunButtonClasses,\n      runState: runState,\n      setRunState: setRunState,\n      setMostRecentStepCompleted: setMostRecentStepCompleted,\n    };\n  }\n\n  return (\n    <div id=\"app\" className=\"app\">\n\n      <NavAndMenu />\n\n      <Sim \n        net={network}\n        getNodeInfo={getNodeInfo}\n        getPayloadInfo={getPayloadInfo}\n        apiResponse={apiResponse}\n        setApiResponse={setApiResponse}\n        sentInstructions={instructionsToSend}\n        setSentInstructions={setInstructionsToSend}\n        setFinishedExecuting={setFinishedExecuting}\n        network={network}\n        mostRecentNodeInfo={mostRecentNodeInfo}\n        rerenderSim={rerenderSim}\n      />\n\n      <Console\n        ControlsProps={getControlsProps()}\n        handleTextAreaInput={handleTextAreaInput}\n        apiResponse={apiResponse}\n        sentInstructions={instructionsToSend}\n      />\n\n      <div id='node-info' className={nodeInfoClasses[0]}>\n        <svg \n          onClick={() => closeNodeInfo()}\n          id=\"node-info-close\" className=\"node-info-close\" viewBox=\"0 0 20 20\"\n          style={{left: (window.innerWidth > 766 ? (window.innerWidth/2) - 45 : window.innerWidth - 45) + 'px'}}\n          >\n          <path fill=\"#f1f5fd\" d=\"M10.185,1.417c-4.741,0-8.583,3.842-8.583,8.583c0,4.74,3.842,8.582,8.583,8.582S18.768,14.74,18.768,10C18.768,5.259,14.926,1.417,10.185,1.417 M10.185,17.68c-4.235,0-7.679-3.445-7.679-7.68c0-4.235,3.444-7.679,7.679-7.679S17.864,5.765,17.864,10C17.864,14.234,14.42,17.68,10.185,17.68 M10.824,10l2.842-2.844c0.178-0.176,0.178-0.46,0-0.637c-0.177-0.178-0.461-0.178-0.637,0l-2.844,2.841L7.341,6.52c-0.176-0.178-0.46-0.178-0.637,0c-0.178,0.176-0.178,0.461,0,0.637L9.546,10l-2.841,2.844c-0.178,0.176-0.178,0.461,0,0.637c0.178,0.178,0.459,0.178,0.637,0l2.844-2.841l2.844,2.841c0.178,0.178,0.459,0.178,0.637,0c0.178-0.176,0.178-0.461,0-0.637L10.824,10z\"></path>\n        </svg>\n        <div id='node-info-wrapper'></div>\n      </div>\n\n      <Api network={network} setNetwork={setNetwork} sentInstructions={instructionsToSend} setApiResponse={setApiResponse} simFinishedExecuting={finishedExecuting} />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}